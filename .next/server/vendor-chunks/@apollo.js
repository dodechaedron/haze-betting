"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@apollo";
exports.ids = ["vendor-chunks/@apollo"];
exports.modules = {

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/AccumulateMultipartResponsesLink.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/AccumulateMultipartResponsesLink.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AccumulateMultipartResponsesLink = void 0;\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/main.cjs\");\nconst utilities_1 = __webpack_require__(/*! @apollo/client/utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs\");\nclass AccumulateMultipartResponsesLink extends client_1.ApolloLink {\n    constructor(config) {\n        super();\n        this.maxDelay = config.cutoffDelay;\n    }\n    request(operation, forward) {\n        if (!forward) {\n            throw new Error(\"This is not a terminal link!\");\n        }\n        const operationContainsMultipartDirectives = (0, utilities_1.hasDirectives)([\"defer\"], operation.query);\n        const upstream = forward(operation);\n        if (!operationContainsMultipartDirectives)\n            return upstream;\n        // TODO: this could be overwritten with a `@AccumulateMultipartResponsesConfig(maxDelay: 1000)` directive on the operation\n        const maxDelay = this.maxDelay;\n        let accumulatedData, maxDelayTimeout;\n        return new utilities_1.Observable((subscriber) => {\n            const upstreamSubscription = upstream.subscribe({\n                next: (result) => {\n                    if (accumulatedData) {\n                        if (accumulatedData.data && \"incremental\" in result) {\n                            accumulatedData.data = (0, utilities_1.mergeIncrementalData)(accumulatedData.data, result);\n                        }\n                        else if (result.data) {\n                            accumulatedData.data = result.data;\n                        }\n                        if (result.errors) {\n                            accumulatedData.errors = [\n                                ...(accumulatedData.errors || []),\n                                ...(result.errors || []),\n                            ];\n                        }\n                        // the spec is not mentioning on how to merge these, so we just do a shallow merge?\n                        if (result.extensions)\n                            accumulatedData.extensions = Object.assign(Object.assign({}, accumulatedData.extensions), result.extensions);\n                    }\n                    else {\n                        accumulatedData = result;\n                    }\n                    if (!maxDelay) {\n                        flushAccumulatedData();\n                    }\n                    else if (!maxDelayTimeout) {\n                        maxDelayTimeout = setTimeout(flushAccumulatedData, maxDelay);\n                    }\n                },\n                error: (error) => {\n                    if (maxDelayTimeout)\n                        clearTimeout(maxDelayTimeout);\n                    subscriber.error(error);\n                },\n                complete: () => {\n                    if (maxDelayTimeout) {\n                        clearTimeout(maxDelayTimeout);\n                        flushAccumulatedData();\n                    }\n                    subscriber.complete();\n                },\n            });\n            function flushAccumulatedData() {\n                subscriber.next(accumulatedData);\n                subscriber.complete();\n                upstreamSubscription.unsubscribe();\n            }\n            return function cleanUp() {\n                clearTimeout(maxDelayTimeout);\n                upstreamSubscription.unsubscribe();\n            };\n        });\n    }\n}\nexports.AccumulateMultipartResponsesLink = AccumulateMultipartResponsesLink;\n//# sourceMappingURL=AccumulateMultipartResponsesLink.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL0FjY3VtdWxhdGVNdWx0aXBhcnRSZXNwb25zZXNMaW5rLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdDQUF3QztBQUN4QyxpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBZ0I7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsNkZBQTBCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9henVyby1iZXR0aW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2V4cGVyaW1lbnRhbC1uZXh0anMtYXBwLXN1cHBvcnQvZGlzdC9zc3IvQWNjdW11bGF0ZU11bHRpcGFydFJlc3BvbnNlc0xpbmsuanM/YjdjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWNjdW11bGF0ZU11bHRpcGFydFJlc3BvbnNlc0xpbmsgPSB2b2lkIDA7XG5jb25zdCBjbGllbnRfMSA9IHJlcXVpcmUoXCJAYXBvbGxvL2NsaWVudFwiKTtcbmNvbnN0IHV0aWxpdGllc18xID0gcmVxdWlyZShcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllc1wiKTtcbmNsYXNzIEFjY3VtdWxhdGVNdWx0aXBhcnRSZXNwb25zZXNMaW5rIGV4dGVuZHMgY2xpZW50XzEuQXBvbGxvTGluayB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubWF4RGVsYXkgPSBjb25maWcuY3V0b2ZmRGVsYXk7XG4gICAgfVxuICAgIHJlcXVlc3Qob3BlcmF0aW9uLCBmb3J3YXJkKSB7XG4gICAgICAgIGlmICghZm9yd2FyZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBpcyBub3QgYSB0ZXJtaW5hbCBsaW5rIVwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcGVyYXRpb25Db250YWluc011bHRpcGFydERpcmVjdGl2ZXMgPSAoMCwgdXRpbGl0aWVzXzEuaGFzRGlyZWN0aXZlcykoW1wiZGVmZXJcIl0sIG9wZXJhdGlvbi5xdWVyeSk7XG4gICAgICAgIGNvbnN0IHVwc3RyZWFtID0gZm9yd2FyZChvcGVyYXRpb24pO1xuICAgICAgICBpZiAoIW9wZXJhdGlvbkNvbnRhaW5zTXVsdGlwYXJ0RGlyZWN0aXZlcylcbiAgICAgICAgICAgIHJldHVybiB1cHN0cmVhbTtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBjb3VsZCBiZSBvdmVyd3JpdHRlbiB3aXRoIGEgYEBBY2N1bXVsYXRlTXVsdGlwYXJ0UmVzcG9uc2VzQ29uZmlnKG1heERlbGF5OiAxMDAwKWAgZGlyZWN0aXZlIG9uIHRoZSBvcGVyYXRpb25cbiAgICAgICAgY29uc3QgbWF4RGVsYXkgPSB0aGlzLm1heERlbGF5O1xuICAgICAgICBsZXQgYWNjdW11bGF0ZWREYXRhLCBtYXhEZWxheVRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBuZXcgdXRpbGl0aWVzXzEuT2JzZXJ2YWJsZSgoc3Vic2NyaWJlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgdXBzdHJlYW1TdWJzY3JpcHRpb24gPSB1cHN0cmVhbS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgIG5leHQ6IChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjY3VtdWxhdGVkRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjY3VtdWxhdGVkRGF0YS5kYXRhICYmIFwiaW5jcmVtZW50YWxcIiBpbiByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRlZERhdGEuZGF0YSA9ICgwLCB1dGlsaXRpZXNfMS5tZXJnZUluY3JlbWVudGFsRGF0YSkoYWNjdW11bGF0ZWREYXRhLmRhdGEsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXN1bHQuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdGVkRGF0YS5kYXRhID0gcmVzdWx0LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdGVkRGF0YS5lcnJvcnMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihhY2N1bXVsYXRlZERhdGEuZXJyb3JzIHx8IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uKHJlc3VsdC5lcnJvcnMgfHwgW10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc3BlYyBpcyBub3QgbWVudGlvbmluZyBvbiBob3cgdG8gbWVyZ2UgdGhlc2UsIHNvIHdlIGp1c3QgZG8gYSBzaGFsbG93IG1lcmdlP1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5leHRlbnNpb25zKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdGVkRGF0YS5leHRlbnNpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhY2N1bXVsYXRlZERhdGEuZXh0ZW5zaW9ucyksIHJlc3VsdC5leHRlbnNpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdGVkRGF0YSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIW1heERlbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbHVzaEFjY3VtdWxhdGVkRGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFtYXhEZWxheVRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heERlbGF5VGltZW91dCA9IHNldFRpbWVvdXQoZmx1c2hBY2N1bXVsYXRlZERhdGEsIG1heERlbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF4RGVsYXlUaW1lb3V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KG1heERlbGF5VGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1heERlbGF5VGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KG1heERlbGF5VGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbHVzaEFjY3VtdWxhdGVkRGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmdW5jdGlvbiBmbHVzaEFjY3VtdWxhdGVkRGF0YSgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYWNjdW11bGF0ZWREYXRhKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgdXBzdHJlYW1TdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBjbGVhblVwKCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChtYXhEZWxheVRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHVwc3RyZWFtU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkFjY3VtdWxhdGVNdWx0aXBhcnRSZXNwb25zZXNMaW5rID0gQWNjdW11bGF0ZU11bHRpcGFydFJlc3BvbnNlc0xpbms7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY2N1bXVsYXRlTXVsdGlwYXJ0UmVzcG9uc2VzTGluay5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/AccumulateMultipartResponsesLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloNextAppProvider.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloNextAppProvider.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\"use client\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApolloNextAppProvider = exports.ApolloClientSingleton = void 0;\nconst React = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/main.cjs\");\nconst RehydrationContext_1 = __webpack_require__(/*! ./RehydrationContext */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RehydrationContext.js\");\nexports.ApolloClientSingleton = Symbol.for(\"ApolloClientSingleton\");\nconst ApolloNextAppProvider = (_a) => {\n    var _b;\n    var { makeClient, children } = _a, hydrationContextOptions = __rest(_a, [\"makeClient\", \"children\"]);\n    const clientRef = React.useRef();\n    if (typeof window !== \"undefined\") {\n        clientRef.current = (_b = window[exports.ApolloClientSingleton]) !== null && _b !== void 0 ? _b : (window[exports.ApolloClientSingleton] = makeClient());\n    }\n    else {\n        if (!clientRef.current) {\n            clientRef.current = makeClient();\n        }\n    }\n    return (React.createElement(client_1.ApolloProvider, { client: clientRef.current },\n        React.createElement(RehydrationContext_1.RehydrationContextProvider, Object.assign({}, hydrationContextOptions), children)));\n};\nexports.ApolloNextAppProvider = ApolloNextAppProvider;\n//# sourceMappingURL=ApolloNextAppProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL0Fwb2xsb05leHRBcHBQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsY0FBYztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QixHQUFHLDZCQUE2QjtBQUM3RCwyQkFBMkIsbUJBQU8sQ0FBQyx3R0FBTztBQUMxQyxpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBZ0I7QUFDekMsNkJBQTZCLG1CQUFPLENBQUMseUhBQXNCO0FBQzNELDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0EsVUFBVSx1QkFBdUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELDJCQUEyQjtBQUN0Riw2RkFBNkY7QUFDN0Y7QUFDQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9henVyby1iZXR0aW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2V4cGVyaW1lbnRhbC1uZXh0anMtYXBwLXN1cHBvcnQvZGlzdC9zc3IvQXBvbGxvTmV4dEFwcFByb3ZpZGVyLmpzPzQ3NzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BcG9sbG9OZXh0QXBwUHJvdmlkZXIgPSBleHBvcnRzLkFwb2xsb0NsaWVudFNpbmdsZXRvbiA9IHZvaWQgMDtcbmNvbnN0IFJlYWN0ID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5jb25zdCBjbGllbnRfMSA9IHJlcXVpcmUoXCJAYXBvbGxvL2NsaWVudFwiKTtcbmNvbnN0IFJlaHlkcmF0aW9uQ29udGV4dF8xID0gcmVxdWlyZShcIi4vUmVoeWRyYXRpb25Db250ZXh0XCIpO1xuZXhwb3J0cy5BcG9sbG9DbGllbnRTaW5nbGV0b24gPSBTeW1ib2wuZm9yKFwiQXBvbGxvQ2xpZW50U2luZ2xldG9uXCIpO1xuY29uc3QgQXBvbGxvTmV4dEFwcFByb3ZpZGVyID0gKF9hKSA9PiB7XG4gICAgdmFyIF9iO1xuICAgIHZhciB7IG1ha2VDbGllbnQsIGNoaWxkcmVuIH0gPSBfYSwgaHlkcmF0aW9uQ29udGV4dE9wdGlvbnMgPSBfX3Jlc3QoX2EsIFtcIm1ha2VDbGllbnRcIiwgXCJjaGlsZHJlblwiXSk7XG4gICAgY29uc3QgY2xpZW50UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgY2xpZW50UmVmLmN1cnJlbnQgPSAoX2IgPSB3aW5kb3dbZXhwb3J0cy5BcG9sbG9DbGllbnRTaW5nbGV0b25dKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAod2luZG93W2V4cG9ydHMuQXBvbGxvQ2xpZW50U2luZ2xldG9uXSA9IG1ha2VDbGllbnQoKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIWNsaWVudFJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICBjbGllbnRSZWYuY3VycmVudCA9IG1ha2VDbGllbnQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoY2xpZW50XzEuQXBvbGxvUHJvdmlkZXIsIHsgY2xpZW50OiBjbGllbnRSZWYuY3VycmVudCB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFJlaHlkcmF0aW9uQ29udGV4dF8xLlJlaHlkcmF0aW9uQ29udGV4dFByb3ZpZGVyLCBPYmplY3QuYXNzaWduKHt9LCBoeWRyYXRpb25Db250ZXh0T3B0aW9ucyksIGNoaWxkcmVuKSkpO1xufTtcbmV4cG9ydHMuQXBvbGxvTmV4dEFwcFByb3ZpZGVyID0gQXBvbGxvTmV4dEFwcFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXBvbGxvTmV4dEFwcFByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloNextAppProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloRehydrateSymbols.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloRehydrateSymbols.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApolloBackgroundQueryTransport = exports.ApolloSSRDataTransport = exports.ApolloResultCache = exports.ApolloRehydrationCache = void 0;\nexports.ApolloRehydrationCache = Symbol.for(\"ApolloRehydrationCache\");\nexports.ApolloResultCache = Symbol.for(\"ApolloResultCache\");\nexports.ApolloSSRDataTransport = Symbol.for(\"ApolloSSRDataTransport\");\nexports.ApolloBackgroundQueryTransport = Symbol.for(\"ApolloBackgroundQueryTransport\");\n//# sourceMappingURL=ApolloRehydrateSymbols.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL0Fwb2xsb1JlaHlkcmF0ZVN5bWJvbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLEdBQUcsOEJBQThCLEdBQUcseUJBQXlCLEdBQUcsOEJBQThCO0FBQ3BJLDhCQUE4QjtBQUM5Qix5QkFBeUI7QUFDekIsOEJBQThCO0FBQzlCLHNDQUFzQztBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2F6dXJvLWJldHRpbmctYXBwLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vZXhwZXJpbWVudGFsLW5leHRqcy1hcHAtc3VwcG9ydC9kaXN0L3Nzci9BcG9sbG9SZWh5ZHJhdGVTeW1ib2xzLmpzPzM3MDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFwb2xsb0JhY2tncm91bmRRdWVyeVRyYW5zcG9ydCA9IGV4cG9ydHMuQXBvbGxvU1NSRGF0YVRyYW5zcG9ydCA9IGV4cG9ydHMuQXBvbGxvUmVzdWx0Q2FjaGUgPSBleHBvcnRzLkFwb2xsb1JlaHlkcmF0aW9uQ2FjaGUgPSB2b2lkIDA7XG5leHBvcnRzLkFwb2xsb1JlaHlkcmF0aW9uQ2FjaGUgPSBTeW1ib2wuZm9yKFwiQXBvbGxvUmVoeWRyYXRpb25DYWNoZVwiKTtcbmV4cG9ydHMuQXBvbGxvUmVzdWx0Q2FjaGUgPSBTeW1ib2wuZm9yKFwiQXBvbGxvUmVzdWx0Q2FjaGVcIik7XG5leHBvcnRzLkFwb2xsb1NTUkRhdGFUcmFuc3BvcnQgPSBTeW1ib2wuZm9yKFwiQXBvbGxvU1NSRGF0YVRyYW5zcG9ydFwiKTtcbmV4cG9ydHMuQXBvbGxvQmFja2dyb3VuZFF1ZXJ5VHJhbnNwb3J0ID0gU3ltYm9sLmZvcihcIkFwb2xsb0JhY2tncm91bmRRdWVyeVRyYW5zcG9ydFwiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFwb2xsb1JlaHlkcmF0ZVN5bWJvbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloRehydrateSymbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRApolloClient.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRApolloClient.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NextSSRApolloClient = void 0;\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/main.cjs\");\nconst utilities_1 = __webpack_require__(/*! @apollo/client/utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs\");\nconst cache_1 = __webpack_require__(/*! @apollo/client/cache */ \"(ssr)/./node_modules/@apollo/client/cache/cache.cjs\");\nconst lateInitializingQueue_1 = __webpack_require__(/*! ./lateInitializingQueue */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/lateInitializingQueue.js\");\nconst ApolloRehydrateSymbols_1 = __webpack_require__(/*! ./ApolloRehydrateSymbols */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloRehydrateSymbols.js\");\nconst ts_invariant_1 = __importDefault(__webpack_require__(/*! ts-invariant */ \"(ssr)/./node_modules/ts-invariant/lib/invariant.cjs\"));\nfunction getQueryManager(client) {\n    return client[\"queryManager\"];\n}\nclass NextSSRApolloClient extends client_1.ApolloClient {\n    constructor(options) {\n        super(options);\n        this.rehydrationContext = {\n            incomingBackgroundQueries: [],\n        };\n        this.simulatedStreamingQueries = new Map();\n        this.registerWindowHook();\n    }\n    identifyUniqueQuery(options) {\n        const transformedDocument = this.documentTransform.transformDocument(options.query);\n        const queryManager = getQueryManager(this);\n        // Calling `transformDocument` will add __typename but won't remove client\n        // directives, so we need to get the `serverQuery`.\n        const { serverQuery } = queryManager.getDocumentInfo(transformedDocument);\n        if (!serverQuery) {\n            throw new Error(\"could not identify unique query\");\n        }\n        const canonicalVariables = (0, cache_1.canonicalStringify)(options.variables || {});\n        const cacheKey = [(0, utilities_1.print)(serverQuery), canonicalVariables].toString();\n        return { query: serverQuery, cacheKey, varJson: canonicalVariables };\n    }\n    registerWindowHook() {\n        if (typeof window !== \"undefined\") {\n            if (Array.isArray(window[ApolloRehydrateSymbols_1.ApolloBackgroundQueryTransport] || [])) {\n                (0, lateInitializingQueue_1.registerLateInitializingQueue)(ApolloRehydrateSymbols_1.ApolloBackgroundQueryTransport, (options) => {\n                    var _a;\n                    // we are not streaming anymore, so we should not simulate \"server-side requests\"\n                    if (document.readyState === \"complete\")\n                        return;\n                    const { query, varJson, cacheKey } = this.identifyUniqueQuery(options);\n                    if (!query)\n                        return;\n                    const printedServerQuery = (0, utilities_1.print)(query);\n                    const queryManager = getQueryManager(this);\n                    if (!((_a = queryManager[\"inFlightLinkObservables\"].peek(printedServerQuery, varJson)) === null || _a === void 0 ? void 0 : _a.observable)) {\n                        let simulatedStreamingQuery, fetchCancelFn;\n                        const cleanup = () => {\n                            if (queryManager[\"fetchCancelFns\"].get(cacheKey) === fetchCancelFn)\n                                queryManager[\"fetchCancelFns\"].delete(cacheKey);\n                            queryManager[\"inFlightLinkObservables\"].remove(printedServerQuery, varJson);\n                            if (this.simulatedStreamingQueries.get(cacheKey) ===\n                                simulatedStreamingQuery)\n                                this.simulatedStreamingQueries.delete(cacheKey);\n                        };\n                        const promise = new Promise((resolve, reject) => {\n                            this.simulatedStreamingQueries.set(cacheKey, (simulatedStreamingQuery = { resolve, reject, options }));\n                        });\n                        promise.finally(cleanup);\n                        const observable = new client_1.Observable((observer) => {\n                            promise\n                                .then((result) => {\n                                observer.next(result);\n                                observer.complete();\n                            })\n                                .catch((err) => {\n                                observer.error(err);\n                            });\n                        });\n                        queryManager[\"inFlightLinkObservables\"].lookup(printedServerQuery, varJson).observable = observable;\n                        queryManager[\"fetchCancelFns\"].set(cacheKey, (fetchCancelFn = (reason) => {\n                            var _a;\n                            const { reject } = (_a = this.simulatedStreamingQueries.get(cacheKey)) !== null && _a !== void 0 ? _a : {};\n                            if (reject) {\n                                reject(reason);\n                            }\n                            cleanup();\n                        }));\n                    }\n                });\n                if (document.readyState !== \"complete\") {\n                    const rerunSimulatedQueries = () => {\n                        const queryManager = getQueryManager(this);\n                        // streaming finished, so we need to refire all \"server-side requests\"\n                        // that are still not resolved on the browser side to make sure we have all the data\n                        for (const [cacheKey, queryInfo] of this\n                            .simulatedStreamingQueries) {\n                            this.simulatedStreamingQueries.delete(cacheKey);\n                            ts_invariant_1.default.debug(\"streaming connection closed before server query could be fully transported, rerunning:\", queryInfo.options);\n                            const queryId = queryManager.generateQueryId();\n                            queryManager\n                                .fetchQuery(queryId, Object.assign(Object.assign({}, queryInfo.options), { context: Object.assign(Object.assign({}, queryInfo.options.context), { queryDeduplication: false }) }))\n                                .finally(() => queryManager.stopQuery(queryId))\n                                .then(queryInfo.resolve, queryInfo.reject);\n                        }\n                    };\n                    // happens simulatenously to `readyState` changing to `\"complete\"`, see\n                    // https://html.spec.whatwg.org/multipage/parsing.html#the-end (step 9.1 and 9.5)\n                    window.addEventListener(\"load\", rerunSimulatedQueries, {\n                        once: true,\n                    });\n                }\n            }\n            if (Array.isArray(window[ApolloRehydrateSymbols_1.ApolloResultCache] || [])) {\n                (0, lateInitializingQueue_1.registerLateInitializingQueue)(ApolloRehydrateSymbols_1.ApolloResultCache, (data) => {\n                    var _a;\n                    const { cacheKey } = this.identifyUniqueQuery(data);\n                    const { resolve } = (_a = this.simulatedStreamingQueries.get(cacheKey)) !== null && _a !== void 0 ? _a : {};\n                    if (resolve) {\n                        resolve({\n                            data: data.result,\n                        });\n                    }\n                    // In order to avoid a scenario where the promise resolves without\n                    // a query subscribing to the promise, we immediately call\n                    // `cache.write` here.\n                    // For more information, see: https://github.com/apollographql/apollo-client-nextjs/pull/38/files/388813a16e2ac5c62408923a1face9ae9417d92a#r1229870523\n                    this.cache.write(data);\n                });\n            }\n        }\n    }\n    watchQuery(options) {\n        if (typeof window == \"undefined\") {\n            if (options.fetchPolicy !== \"cache-only\" &&\n                options.fetchPolicy !== \"standby\") {\n                this.rehydrationContext.incomingBackgroundQueries.push(options);\n            }\n        }\n        const result = super.watchQuery(options);\n        return result;\n    }\n    setRehydrationContext(rehydrationContext) {\n        if (rehydrationContext.incomingBackgroundQueries !==\n            this.rehydrationContext.incomingBackgroundQueries)\n            rehydrationContext.incomingBackgroundQueries.push(...this.rehydrationContext.incomingBackgroundQueries.splice(0));\n        this.rehydrationContext = rehydrationContext;\n    }\n}\nexports.NextSSRApolloClient = NextSSRApolloClient;\n//# sourceMappingURL=NextSSRApolloClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRApolloClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRInMemoryCache.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRInMemoryCache.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NextSSRInMemoryCache = void 0;\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/main.cjs\");\nclass NextSSRInMemoryCache extends client_1.InMemoryCache {\n    constructor(config) {\n        super(config);\n        this.rehydrationContext = {\n            incomingResults: [],\n            uninitialized: true,\n        };\n    }\n    write(options) {\n        if (typeof window == \"undefined\") {\n            this.rehydrationContext.incomingResults.push(options);\n        }\n        return super.write(options);\n    }\n    setRehydrationContext(rehydrationContext) {\n        if (this.rehydrationContext.uninitialized) {\n            rehydrationContext.incomingResults.push(...this.rehydrationContext.incomingResults);\n        }\n        this.rehydrationContext = rehydrationContext;\n        this.rehydrationContext.uninitialized = false;\n    }\n}\nexports.NextSSRInMemoryCache = NextSSRInMemoryCache;\n//# sourceMappingURL=NextSSRInMemoryCache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL05leHRTU1JJbk1lbW9yeUNhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QixpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBZ0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9henVyby1iZXR0aW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2V4cGVyaW1lbnRhbC1uZXh0anMtYXBwLXN1cHBvcnQvZGlzdC9zc3IvTmV4dFNTUkluTWVtb3J5Q2FjaGUuanM/ZjZmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTmV4dFNTUkluTWVtb3J5Q2FjaGUgPSB2b2lkIDA7XG5jb25zdCBjbGllbnRfMSA9IHJlcXVpcmUoXCJAYXBvbGxvL2NsaWVudFwiKTtcbmNsYXNzIE5leHRTU1JJbk1lbW9yeUNhY2hlIGV4dGVuZHMgY2xpZW50XzEuSW5NZW1vcnlDYWNoZSB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgICAgIHRoaXMucmVoeWRyYXRpb25Db250ZXh0ID0ge1xuICAgICAgICAgICAgaW5jb21pbmdSZXN1bHRzOiBbXSxcbiAgICAgICAgICAgIHVuaW5pdGlhbGl6ZWQ6IHRydWUsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHdyaXRlKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5yZWh5ZHJhdGlvbkNvbnRleHQuaW5jb21pbmdSZXN1bHRzLnB1c2gob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLndyaXRlKG9wdGlvbnMpO1xuICAgIH1cbiAgICBzZXRSZWh5ZHJhdGlvbkNvbnRleHQocmVoeWRyYXRpb25Db250ZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLnJlaHlkcmF0aW9uQ29udGV4dC51bmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICByZWh5ZHJhdGlvbkNvbnRleHQuaW5jb21pbmdSZXN1bHRzLnB1c2goLi4udGhpcy5yZWh5ZHJhdGlvbkNvbnRleHQuaW5jb21pbmdSZXN1bHRzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlaHlkcmF0aW9uQ29udGV4dCA9IHJlaHlkcmF0aW9uQ29udGV4dDtcbiAgICAgICAgdGhpcy5yZWh5ZHJhdGlvbkNvbnRleHQudW5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydHMuTmV4dFNTUkluTWVtb3J5Q2FjaGUgPSBOZXh0U1NSSW5NZW1vcnlDYWNoZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5leHRTU1JJbk1lbW9yeUNhY2hlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRInMemoryCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RehydrationContext.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RehydrationContext.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useRehydrationContext = exports.RehydrationContextProvider = void 0;\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/main.cjs\");\nconst react_1 = __importDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst NextSSRInMemoryCache_1 = __webpack_require__(/*! ./NextSSRInMemoryCache */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRInMemoryCache.js\");\nconst navigation_1 = __webpack_require__(/*! next/navigation */ \"(ssr)/./node_modules/next/navigation.js\");\nconst dataTransport_1 = __webpack_require__(/*! ./dataTransport */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/dataTransport.js\");\nconst ts_invariant_1 = __importDefault(__webpack_require__(/*! ts-invariant */ \"(ssr)/./node_modules/ts-invariant/lib/invariant.cjs\"));\nconst NextSSRApolloClient_1 = __webpack_require__(/*! ./NextSSRApolloClient */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRApolloClient.js\");\nconst ApolloRehydrationContext = react_1.default.createContext(undefined);\nconst RehydrationContextProvider = ({ children, extraScriptProps, }) => {\n    const client = (0, client_1.useApolloClient)();\n    const rehydrationContext = react_1.default.useRef();\n    if (typeof window == \"undefined\") {\n        if (!rehydrationContext.current) {\n            rehydrationContext.current = buildApolloRehydrationContext({\n                extraScriptProps,\n            });\n        }\n        if (client instanceof NextSSRApolloClient_1.NextSSRApolloClient) {\n            client.setRehydrationContext(rehydrationContext.current);\n        }\n        else {\n            throw new Error(\"When using Next SSR, you must use the `NextSSRApolloClient`\");\n        }\n        if (client.cache instanceof NextSSRInMemoryCache_1.NextSSRInMemoryCache) {\n            client.cache.setRehydrationContext(rehydrationContext.current);\n        }\n        else {\n            throw new Error(\"When using Next SSR, you must use the `NextSSRInMemoryCache`\");\n        }\n    }\n    else {\n        (0, dataTransport_1.registerDataTransport)();\n    }\n    return (react_1.default.createElement(ApolloRehydrationContext.Provider, { value: rehydrationContext.current }, children));\n};\nexports.RehydrationContextProvider = RehydrationContextProvider;\nfunction useRehydrationContext() {\n    const rehydrationContext = react_1.default.useContext(ApolloRehydrationContext);\n    const insertHtml = react_1.default.useContext(navigation_1.ServerInsertedHTMLContext);\n    // help transpilers to omit this code in bundling\n    if (typeof window !== \"undefined\")\n        return;\n    if (insertHtml &&\n        rehydrationContext &&\n        !rehydrationContext.currentlyInjected) {\n        rehydrationContext.currentlyInjected = true;\n        insertHtml(() => react_1.default.createElement(rehydrationContext.RehydrateOnClient, null));\n    }\n    return rehydrationContext;\n}\nexports.useRehydrationContext = useRehydrationContext;\nfunction buildApolloRehydrationContext({ extraScriptProps, }) {\n    const rehydrationContext = {\n        currentlyInjected: false,\n        transportValueData: {},\n        transportedValues: {},\n        incomingResults: [],\n        incomingBackgroundQueries: [],\n        RehydrateOnClient() {\n            rehydrationContext.currentlyInjected = false;\n            if (!Object.keys(rehydrationContext.transportValueData).length &&\n                !Object.keys(rehydrationContext.incomingResults).length &&\n                !Object.keys(rehydrationContext.incomingBackgroundQueries).length)\n                return react_1.default.createElement(react_1.default.Fragment, null);\n            ts_invariant_1.default.debug(\"transporting data\", rehydrationContext.transportValueData);\n            ts_invariant_1.default.debug(\"transporting results\", rehydrationContext.incomingResults);\n            ts_invariant_1.default.debug(\"transporting incomingBackgroundQueries\", rehydrationContext.incomingBackgroundQueries);\n            const __html = (0, dataTransport_1.transportDataToJS)({\n                rehydrate: Object.fromEntries(Object.entries(rehydrationContext.transportValueData).filter(([key, value]) => rehydrationContext.transportedValues[key] !== value)),\n                results: rehydrationContext.incomingResults,\n                backgroundQueries: rehydrationContext.incomingBackgroundQueries,\n            });\n            Object.assign(rehydrationContext.transportedValues, rehydrationContext.transportValueData);\n            rehydrationContext.transportValueData = {};\n            rehydrationContext.incomingResults = [];\n            rehydrationContext.incomingBackgroundQueries = [];\n            return (react_1.default.createElement(\"script\", Object.assign({}, extraScriptProps, { dangerouslySetInnerHTML: {\n                    __html,\n                } })));\n        },\n    };\n    return rehydrationContext;\n}\n//# sourceMappingURL=RehydrationContext.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL1JlaHlkcmF0aW9uQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QixHQUFHLGtDQUFrQztBQUNsRSxpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBZ0I7QUFDekMsZ0NBQWdDLG1CQUFPLENBQUMsd0dBQU87QUFDL0MsK0JBQStCLG1CQUFPLENBQUMsNkhBQXdCO0FBQy9ELHFCQUFxQixtQkFBTyxDQUFDLGdFQUFpQjtBQUM5Qyx3QkFBd0IsbUJBQU8sQ0FBQywrR0FBaUI7QUFDakQsdUNBQXVDLG1CQUFPLENBQUMseUVBQWM7QUFDN0QsOEJBQThCLG1CQUFPLENBQUMsMkhBQXVCO0FBQzdEO0FBQ0Esc0NBQXNDLDZCQUE2QjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRSxtQ0FBbUM7QUFDbEg7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3Qix5Q0FBeUMsbUJBQW1CO0FBQzVEO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSxzQkFBc0I7QUFDbEc7QUFDQSxtQkFBbUI7QUFDbkIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXp1cm8tYmV0dGluZy1hcHAvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL1JlaHlkcmF0aW9uQ29udGV4dC5qcz85OTJkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VSZWh5ZHJhdGlvbkNvbnRleHQgPSBleHBvcnRzLlJlaHlkcmF0aW9uQ29udGV4dFByb3ZpZGVyID0gdm9pZCAwO1xuY29uc3QgY2xpZW50XzEgPSByZXF1aXJlKFwiQGFwb2xsby9jbGllbnRcIik7XG5jb25zdCByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5jb25zdCBOZXh0U1NSSW5NZW1vcnlDYWNoZV8xID0gcmVxdWlyZShcIi4vTmV4dFNTUkluTWVtb3J5Q2FjaGVcIik7XG5jb25zdCBuYXZpZ2F0aW9uXzEgPSByZXF1aXJlKFwibmV4dC9uYXZpZ2F0aW9uXCIpO1xuY29uc3QgZGF0YVRyYW5zcG9ydF8xID0gcmVxdWlyZShcIi4vZGF0YVRyYW5zcG9ydFwiKTtcbmNvbnN0IHRzX2ludmFyaWFudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJ0cy1pbnZhcmlhbnRcIikpO1xuY29uc3QgTmV4dFNTUkFwb2xsb0NsaWVudF8xID0gcmVxdWlyZShcIi4vTmV4dFNTUkFwb2xsb0NsaWVudFwiKTtcbmNvbnN0IEFwb2xsb1JlaHlkcmF0aW9uQ29udGV4dCA9IHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG5jb25zdCBSZWh5ZHJhdGlvbkNvbnRleHRQcm92aWRlciA9ICh7IGNoaWxkcmVuLCBleHRyYVNjcmlwdFByb3BzLCB9KSA9PiB7XG4gICAgY29uc3QgY2xpZW50ID0gKDAsIGNsaWVudF8xLnVzZUFwb2xsb0NsaWVudCkoKTtcbiAgICBjb25zdCByZWh5ZHJhdGlvbkNvbnRleHQgPSByZWFjdF8xLmRlZmF1bHQudXNlUmVmKCk7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAoIXJlaHlkcmF0aW9uQ29udGV4dC5jdXJyZW50KSB7XG4gICAgICAgICAgICByZWh5ZHJhdGlvbkNvbnRleHQuY3VycmVudCA9IGJ1aWxkQXBvbGxvUmVoeWRyYXRpb25Db250ZXh0KHtcbiAgICAgICAgICAgICAgICBleHRyYVNjcmlwdFByb3BzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsaWVudCBpbnN0YW5jZW9mIE5leHRTU1JBcG9sbG9DbGllbnRfMS5OZXh0U1NSQXBvbGxvQ2xpZW50KSB7XG4gICAgICAgICAgICBjbGllbnQuc2V0UmVoeWRyYXRpb25Db250ZXh0KHJlaHlkcmF0aW9uQ29udGV4dC5jdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldoZW4gdXNpbmcgTmV4dCBTU1IsIHlvdSBtdXN0IHVzZSB0aGUgYE5leHRTU1JBcG9sbG9DbGllbnRgXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGllbnQuY2FjaGUgaW5zdGFuY2VvZiBOZXh0U1NSSW5NZW1vcnlDYWNoZV8xLk5leHRTU1JJbk1lbW9yeUNhY2hlKSB7XG4gICAgICAgICAgICBjbGllbnQuY2FjaGUuc2V0UmVoeWRyYXRpb25Db250ZXh0KHJlaHlkcmF0aW9uQ29udGV4dC5jdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldoZW4gdXNpbmcgTmV4dCBTU1IsIHlvdSBtdXN0IHVzZSB0aGUgYE5leHRTU1JJbk1lbW9yeUNhY2hlYFwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgKDAsIGRhdGFUcmFuc3BvcnRfMS5yZWdpc3RlckRhdGFUcmFuc3BvcnQpKCk7XG4gICAgfVxuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQXBvbGxvUmVoeWRyYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiByZWh5ZHJhdGlvbkNvbnRleHQuY3VycmVudCB9LCBjaGlsZHJlbikpO1xufTtcbmV4cG9ydHMuUmVoeWRyYXRpb25Db250ZXh0UHJvdmlkZXIgPSBSZWh5ZHJhdGlvbkNvbnRleHRQcm92aWRlcjtcbmZ1bmN0aW9uIHVzZVJlaHlkcmF0aW9uQ29udGV4dCgpIHtcbiAgICBjb25zdCByZWh5ZHJhdGlvbkNvbnRleHQgPSByZWFjdF8xLmRlZmF1bHQudXNlQ29udGV4dChBcG9sbG9SZWh5ZHJhdGlvbkNvbnRleHQpO1xuICAgIGNvbnN0IGluc2VydEh0bWwgPSByZWFjdF8xLmRlZmF1bHQudXNlQ29udGV4dChuYXZpZ2F0aW9uXzEuU2VydmVySW5zZXJ0ZWRIVE1MQ29udGV4dCk7XG4gICAgLy8gaGVscCB0cmFuc3BpbGVycyB0byBvbWl0IHRoaXMgY29kZSBpbiBidW5kbGluZ1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKGluc2VydEh0bWwgJiZcbiAgICAgICAgcmVoeWRyYXRpb25Db250ZXh0ICYmXG4gICAgICAgICFyZWh5ZHJhdGlvbkNvbnRleHQuY3VycmVudGx5SW5qZWN0ZWQpIHtcbiAgICAgICAgcmVoeWRyYXRpb25Db250ZXh0LmN1cnJlbnRseUluamVjdGVkID0gdHJ1ZTtcbiAgICAgICAgaW5zZXJ0SHRtbCgoKSA9PiByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChyZWh5ZHJhdGlvbkNvbnRleHQuUmVoeWRyYXRlT25DbGllbnQsIG51bGwpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlaHlkcmF0aW9uQ29udGV4dDtcbn1cbmV4cG9ydHMudXNlUmVoeWRyYXRpb25Db250ZXh0ID0gdXNlUmVoeWRyYXRpb25Db250ZXh0O1xuZnVuY3Rpb24gYnVpbGRBcG9sbG9SZWh5ZHJhdGlvbkNvbnRleHQoeyBleHRyYVNjcmlwdFByb3BzLCB9KSB7XG4gICAgY29uc3QgcmVoeWRyYXRpb25Db250ZXh0ID0ge1xuICAgICAgICBjdXJyZW50bHlJbmplY3RlZDogZmFsc2UsXG4gICAgICAgIHRyYW5zcG9ydFZhbHVlRGF0YToge30sXG4gICAgICAgIHRyYW5zcG9ydGVkVmFsdWVzOiB7fSxcbiAgICAgICAgaW5jb21pbmdSZXN1bHRzOiBbXSxcbiAgICAgICAgaW5jb21pbmdCYWNrZ3JvdW5kUXVlcmllczogW10sXG4gICAgICAgIFJlaHlkcmF0ZU9uQ2xpZW50KCkge1xuICAgICAgICAgICAgcmVoeWRyYXRpb25Db250ZXh0LmN1cnJlbnRseUluamVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKHJlaHlkcmF0aW9uQ29udGV4dC50cmFuc3BvcnRWYWx1ZURhdGEpLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICFPYmplY3Qua2V5cyhyZWh5ZHJhdGlvbkNvbnRleHQuaW5jb21pbmdSZXN1bHRzKS5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAhT2JqZWN0LmtleXMocmVoeWRyYXRpb25Db250ZXh0LmluY29taW5nQmFja2dyb3VuZFF1ZXJpZXMpLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQocmVhY3RfMS5kZWZhdWx0LkZyYWdtZW50LCBudWxsKTtcbiAgICAgICAgICAgIHRzX2ludmFyaWFudF8xLmRlZmF1bHQuZGVidWcoXCJ0cmFuc3BvcnRpbmcgZGF0YVwiLCByZWh5ZHJhdGlvbkNvbnRleHQudHJhbnNwb3J0VmFsdWVEYXRhKTtcbiAgICAgICAgICAgIHRzX2ludmFyaWFudF8xLmRlZmF1bHQuZGVidWcoXCJ0cmFuc3BvcnRpbmcgcmVzdWx0c1wiLCByZWh5ZHJhdGlvbkNvbnRleHQuaW5jb21pbmdSZXN1bHRzKTtcbiAgICAgICAgICAgIHRzX2ludmFyaWFudF8xLmRlZmF1bHQuZGVidWcoXCJ0cmFuc3BvcnRpbmcgaW5jb21pbmdCYWNrZ3JvdW5kUXVlcmllc1wiLCByZWh5ZHJhdGlvbkNvbnRleHQuaW5jb21pbmdCYWNrZ3JvdW5kUXVlcmllcyk7XG4gICAgICAgICAgICBjb25zdCBfX2h0bWwgPSAoMCwgZGF0YVRyYW5zcG9ydF8xLnRyYW5zcG9ydERhdGFUb0pTKSh7XG4gICAgICAgICAgICAgICAgcmVoeWRyYXRlOiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMocmVoeWRyYXRpb25Db250ZXh0LnRyYW5zcG9ydFZhbHVlRGF0YSkuZmlsdGVyKChba2V5LCB2YWx1ZV0pID0+IHJlaHlkcmF0aW9uQ29udGV4dC50cmFuc3BvcnRlZFZhbHVlc1trZXldICE9PSB2YWx1ZSkpLFxuICAgICAgICAgICAgICAgIHJlc3VsdHM6IHJlaHlkcmF0aW9uQ29udGV4dC5pbmNvbWluZ1Jlc3VsdHMsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFF1ZXJpZXM6IHJlaHlkcmF0aW9uQ29udGV4dC5pbmNvbWluZ0JhY2tncm91bmRRdWVyaWVzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlaHlkcmF0aW9uQ29udGV4dC50cmFuc3BvcnRlZFZhbHVlcywgcmVoeWRyYXRpb25Db250ZXh0LnRyYW5zcG9ydFZhbHVlRGF0YSk7XG4gICAgICAgICAgICByZWh5ZHJhdGlvbkNvbnRleHQudHJhbnNwb3J0VmFsdWVEYXRhID0ge307XG4gICAgICAgICAgICByZWh5ZHJhdGlvbkNvbnRleHQuaW5jb21pbmdSZXN1bHRzID0gW107XG4gICAgICAgICAgICByZWh5ZHJhdGlvbkNvbnRleHQuaW5jb21pbmdCYWNrZ3JvdW5kUXVlcmllcyA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiLCBPYmplY3QuYXNzaWduKHt9LCBleHRyYVNjcmlwdFByb3BzLCB7IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICAgICAgICAgICAgICAgIF9faHRtbCxcbiAgICAgICAgICAgICAgICB9IH0pKSk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gcmVoeWRyYXRpb25Db250ZXh0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVoeWRyYXRpb25Db250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RehydrationContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RemoveMultipartDirectivesLink.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RemoveMultipartDirectivesLink.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RemoveMultipartDirectivesLink = void 0;\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/main.cjs\");\nconst utilities_1 = __webpack_require__(/*! @apollo/client/utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs\");\nfunction getDirectiveArgumentValue(directive, argument) {\n    var _a, _b;\n    return (_b = (_a = directive.arguments) === null || _a === void 0 ? void 0 : _a.find((arg) => arg.name.value === argument)) === null || _b === void 0 ? void 0 : _b.value;\n}\n/**\n * This link is used to strip directives from the query before it is sent to the server.\n * This is used to prevent the server from doing additional work in SSR scenarios where multipart responses cannot be handled anyways.\n * This stripping behaviour can be configured per-directive.\n * It be overridden by adding a label to the directive.\n * In the case this link is configured to strip a directive, but the directive has a label starting with \"SsrDontStrip\", the directive will not be stripped.\n * In the case this link is configured to not strip a directive, but the directive has a label starting with \"SsrStrip\", the directive will be stripped.\n * The \"starting with\" is important, because labels have to be unique per operation. So if you have multiple directives where you want to override the default stipping behaviour,\n * you can do this by annotating them like\n * ```gql\n * query myQuery {\n *   fastField\n *   ... @defer(label: \"SsrDontStrip1\") {\n *     slowField1\n *   }\n *   ... @defer(label: \"SsrDontStrip2\") {\n *     slowField2\n *   }\n * }\n * ```\n *\n */\nclass RemoveMultipartDirectivesLink extends client_1.ApolloLink {\n    constructor(config) {\n        super();\n        this.stripDirectives = [];\n        if (config.stripDefer !== false)\n            this.stripDirectives.push(\"defer\");\n    }\n    request(operation, forward) {\n        if (!forward) {\n            throw new Error(\"This is not a terminal link!\");\n        }\n        const { query } = operation;\n        let modifiedQuery = query;\n        modifiedQuery = (0, utilities_1.removeDirectivesFromDocument)(this.stripDirectives\n            .map((directive) => ({\n            test(node) {\n                let shouldStrip = node.kind === \"Directive\" && node.name.value === directive;\n                const label = getDirectiveArgumentValue(node, \"label\");\n                if ((label === null || label === void 0 ? void 0 : label.kind) === \"StringValue\" &&\n                    label.value.startsWith(\"SsrDontStrip\")) {\n                    shouldStrip = false;\n                }\n                return shouldStrip;\n            },\n            remove: true,\n        }))\n            .concat({\n            test(node) {\n                if (node.kind !== \"Directive\")\n                    return false;\n                const label = getDirectiveArgumentValue(node, \"label\");\n                return ((label === null || label === void 0 ? void 0 : label.kind) === \"StringValue\" &&\n                    label.value.startsWith(\"SsrStrip\"));\n            },\n            remove: true,\n        }), modifiedQuery);\n        if (modifiedQuery === null) {\n            return utilities_1.Observable.of({});\n        }\n        operation.query = modifiedQuery;\n        return forward(operation);\n    }\n}\nexports.RemoveMultipartDirectivesLink = RemoveMultipartDirectivesLink;\n//# sourceMappingURL=RemoveMultipartDirectivesLink.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL1JlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFDQUFxQztBQUNyQyxpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBZ0I7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsNkZBQTBCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXp1cm8tYmV0dGluZy1hcHAvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL1JlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rLmpzPzZlNWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rID0gdm9pZCAwO1xuY29uc3QgY2xpZW50XzEgPSByZXF1aXJlKFwiQGFwb2xsby9jbGllbnRcIik7XG5jb25zdCB1dGlsaXRpZXNfMSA9IHJlcXVpcmUoXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXNcIik7XG5mdW5jdGlvbiBnZXREaXJlY3RpdmVBcmd1bWVudFZhbHVlKGRpcmVjdGl2ZSwgYXJndW1lbnQpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHJldHVybiAoX2IgPSAoX2EgPSBkaXJlY3RpdmUuYXJndW1lbnRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmluZCgoYXJnKSA9PiBhcmcubmFtZS52YWx1ZSA9PT0gYXJndW1lbnQpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudmFsdWU7XG59XG4vKipcbiAqIFRoaXMgbGluayBpcyB1c2VkIHRvIHN0cmlwIGRpcmVjdGl2ZXMgZnJvbSB0aGUgcXVlcnkgYmVmb3JlIGl0IGlzIHNlbnQgdG8gdGhlIHNlcnZlci5cbiAqIFRoaXMgaXMgdXNlZCB0byBwcmV2ZW50IHRoZSBzZXJ2ZXIgZnJvbSBkb2luZyBhZGRpdGlvbmFsIHdvcmsgaW4gU1NSIHNjZW5hcmlvcyB3aGVyZSBtdWx0aXBhcnQgcmVzcG9uc2VzIGNhbm5vdCBiZSBoYW5kbGVkIGFueXdheXMuXG4gKiBUaGlzIHN0cmlwcGluZyBiZWhhdmlvdXIgY2FuIGJlIGNvbmZpZ3VyZWQgcGVyLWRpcmVjdGl2ZS5cbiAqIEl0IGJlIG92ZXJyaWRkZW4gYnkgYWRkaW5nIGEgbGFiZWwgdG8gdGhlIGRpcmVjdGl2ZS5cbiAqIEluIHRoZSBjYXNlIHRoaXMgbGluayBpcyBjb25maWd1cmVkIHRvIHN0cmlwIGEgZGlyZWN0aXZlLCBidXQgdGhlIGRpcmVjdGl2ZSBoYXMgYSBsYWJlbCBzdGFydGluZyB3aXRoIFwiU3NyRG9udFN0cmlwXCIsIHRoZSBkaXJlY3RpdmUgd2lsbCBub3QgYmUgc3RyaXBwZWQuXG4gKiBJbiB0aGUgY2FzZSB0aGlzIGxpbmsgaXMgY29uZmlndXJlZCB0byBub3Qgc3RyaXAgYSBkaXJlY3RpdmUsIGJ1dCB0aGUgZGlyZWN0aXZlIGhhcyBhIGxhYmVsIHN0YXJ0aW5nIHdpdGggXCJTc3JTdHJpcFwiLCB0aGUgZGlyZWN0aXZlIHdpbGwgYmUgc3RyaXBwZWQuXG4gKiBUaGUgXCJzdGFydGluZyB3aXRoXCIgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGxhYmVscyBoYXZlIHRvIGJlIHVuaXF1ZSBwZXIgb3BlcmF0aW9uLiBTbyBpZiB5b3UgaGF2ZSBtdWx0aXBsZSBkaXJlY3RpdmVzIHdoZXJlIHlvdSB3YW50IHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IHN0aXBwaW5nIGJlaGF2aW91cixcbiAqIHlvdSBjYW4gZG8gdGhpcyBieSBhbm5vdGF0aW5nIHRoZW0gbGlrZVxuICogYGBgZ3FsXG4gKiBxdWVyeSBteVF1ZXJ5IHtcbiAqICAgZmFzdEZpZWxkXG4gKiAgIC4uLiBAZGVmZXIobGFiZWw6IFwiU3NyRG9udFN0cmlwMVwiKSB7XG4gKiAgICAgc2xvd0ZpZWxkMVxuICogICB9XG4gKiAgIC4uLiBAZGVmZXIobGFiZWw6IFwiU3NyRG9udFN0cmlwMlwiKSB7XG4gKiAgICAgc2xvd0ZpZWxkMlxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKi9cbmNsYXNzIFJlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rIGV4dGVuZHMgY2xpZW50XzEuQXBvbGxvTGluayB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RyaXBEaXJlY3RpdmVzID0gW107XG4gICAgICAgIGlmIChjb25maWcuc3RyaXBEZWZlciAhPT0gZmFsc2UpXG4gICAgICAgICAgICB0aGlzLnN0cmlwRGlyZWN0aXZlcy5wdXNoKFwiZGVmZXJcIik7XG4gICAgfVxuICAgIHJlcXVlc3Qob3BlcmF0aW9uLCBmb3J3YXJkKSB7XG4gICAgICAgIGlmICghZm9yd2FyZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBpcyBub3QgYSB0ZXJtaW5hbCBsaW5rIVwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHF1ZXJ5IH0gPSBvcGVyYXRpb247XG4gICAgICAgIGxldCBtb2RpZmllZFF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgIG1vZGlmaWVkUXVlcnkgPSAoMCwgdXRpbGl0aWVzXzEucmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudCkodGhpcy5zdHJpcERpcmVjdGl2ZXNcbiAgICAgICAgICAgIC5tYXAoKGRpcmVjdGl2ZSkgPT4gKHtcbiAgICAgICAgICAgIHRlc3Qobm9kZSkge1xuICAgICAgICAgICAgICAgIGxldCBzaG91bGRTdHJpcCA9IG5vZGUua2luZCA9PT0gXCJEaXJlY3RpdmVcIiAmJiBub2RlLm5hbWUudmFsdWUgPT09IGRpcmVjdGl2ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9IGdldERpcmVjdGl2ZUFyZ3VtZW50VmFsdWUobm9kZSwgXCJsYWJlbFwiKTtcbiAgICAgICAgICAgICAgICBpZiAoKGxhYmVsID09PSBudWxsIHx8IGxhYmVsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsYWJlbC5raW5kKSA9PT0gXCJTdHJpbmdWYWx1ZVwiICYmXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLnZhbHVlLnN0YXJ0c1dpdGgoXCJTc3JEb250U3RyaXBcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkU3RyaXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNob3VsZFN0cmlwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbW92ZTogdHJ1ZSxcbiAgICAgICAgfSkpXG4gICAgICAgICAgICAuY29uY2F0KHtcbiAgICAgICAgICAgIHRlc3Qobm9kZSkge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmtpbmQgIT09IFwiRGlyZWN0aXZlXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9IGdldERpcmVjdGl2ZUFyZ3VtZW50VmFsdWUobm9kZSwgXCJsYWJlbFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKChsYWJlbCA9PT0gbnVsbCB8fCBsYWJlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGFiZWwua2luZCkgPT09IFwiU3RyaW5nVmFsdWVcIiAmJlxuICAgICAgICAgICAgICAgICAgICBsYWJlbC52YWx1ZS5zdGFydHNXaXRoKFwiU3NyU3RyaXBcIikpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbW92ZTogdHJ1ZSxcbiAgICAgICAgfSksIG1vZGlmaWVkUXVlcnkpO1xuICAgICAgICBpZiAobW9kaWZpZWRRdWVyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHV0aWxpdGllc18xLk9ic2VydmFibGUub2Yoe30pO1xuICAgICAgICB9XG4gICAgICAgIG9wZXJhdGlvbi5xdWVyeSA9IG1vZGlmaWVkUXVlcnk7XG4gICAgICAgIHJldHVybiBmb3J3YXJkKG9wZXJhdGlvbik7XG4gICAgfVxufVxuZXhwb3J0cy5SZW1vdmVNdWx0aXBhcnREaXJlY3RpdmVzTGluayA9IFJlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVtb3ZlTXVsdGlwYXJ0RGlyZWN0aXZlc0xpbmsuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RemoveMultipartDirectivesLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/SSRMultipartLink.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/SSRMultipartLink.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SSRMultipartLink = void 0;\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/main.cjs\");\nconst RemoveMultipartDirectivesLink_1 = __webpack_require__(/*! ./RemoveMultipartDirectivesLink */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RemoveMultipartDirectivesLink.js\");\nconst AccumulateMultipartResponsesLink_1 = __webpack_require__(/*! ./AccumulateMultipartResponsesLink */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/AccumulateMultipartResponsesLink.js\");\nclass SSRMultipartLink extends client_1.ApolloLink {\n    constructor(config = {}) {\n        const combined = client_1.ApolloLink.from([\n            new RemoveMultipartDirectivesLink_1.RemoveMultipartDirectivesLink({\n                stripDefer: config.stripDefer,\n            }),\n            new AccumulateMultipartResponsesLink_1.AccumulateMultipartResponsesLink({\n                cutoffDelay: config.cutoffDelay || 0,\n            }),\n        ]);\n        super(combined.request);\n    }\n}\nexports.SSRMultipartLink = SSRMultipartLink;\n//# sourceMappingURL=SSRMultipartLink.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL1NTUk11bHRpcGFydExpbmsuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLGlCQUFpQixtQkFBTyxDQUFDLG9FQUFnQjtBQUN6Qyx3Q0FBd0MsbUJBQU8sQ0FBQywrSUFBaUM7QUFDakYsMkNBQTJDLG1CQUFPLENBQUMscUpBQW9DO0FBQ3ZGO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXp1cm8tYmV0dGluZy1hcHAvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL1NTUk11bHRpcGFydExpbmsuanM/MTJhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU1NSTXVsdGlwYXJ0TGluayA9IHZvaWQgMDtcbmNvbnN0IGNsaWVudF8xID0gcmVxdWlyZShcIkBhcG9sbG8vY2xpZW50XCIpO1xuY29uc3QgUmVtb3ZlTXVsdGlwYXJ0RGlyZWN0aXZlc0xpbmtfMSA9IHJlcXVpcmUoXCIuL1JlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rXCIpO1xuY29uc3QgQWNjdW11bGF0ZU11bHRpcGFydFJlc3BvbnNlc0xpbmtfMSA9IHJlcXVpcmUoXCIuL0FjY3VtdWxhdGVNdWx0aXBhcnRSZXNwb25zZXNMaW5rXCIpO1xuY2xhc3MgU1NSTXVsdGlwYXJ0TGluayBleHRlbmRzIGNsaWVudF8xLkFwb2xsb0xpbmsge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGNvbWJpbmVkID0gY2xpZW50XzEuQXBvbGxvTGluay5mcm9tKFtcbiAgICAgICAgICAgIG5ldyBSZW1vdmVNdWx0aXBhcnREaXJlY3RpdmVzTGlua18xLlJlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rKHtcbiAgICAgICAgICAgICAgICBzdHJpcERlZmVyOiBjb25maWcuc3RyaXBEZWZlcixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IEFjY3VtdWxhdGVNdWx0aXBhcnRSZXNwb25zZXNMaW5rXzEuQWNjdW11bGF0ZU11bHRpcGFydFJlc3BvbnNlc0xpbmsoe1xuICAgICAgICAgICAgICAgIGN1dG9mZkRlbGF5OiBjb25maWcuY3V0b2ZmRGVsYXkgfHwgMCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdKTtcbiAgICAgICAgc3VwZXIoY29tYmluZWQucmVxdWVzdCk7XG4gICAgfVxufVxuZXhwb3J0cy5TU1JNdWx0aXBhcnRMaW5rID0gU1NSTXVsdGlwYXJ0TGluaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNTUk11bHRpcGFydExpbmsuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/SSRMultipartLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/dataTransport.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/dataTransport.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.registerDataTransport = exports.transportDataToJS = void 0;\nconst superjson_1 = __importDefault(__webpack_require__(/*! superjson */ \"(ssr)/./node_modules/superjson/dist/index.js\"));\nconst ApolloRehydrateSymbols_1 = __webpack_require__(/*! ./ApolloRehydrateSymbols */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloRehydrateSymbols.js\");\nconst lateInitializingQueue_1 = __webpack_require__(/*! ./lateInitializingQueue */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/lateInitializingQueue.js\");\nconst ts_invariant_1 = __importDefault(__webpack_require__(/*! ts-invariant */ \"(ssr)/./node_modules/ts-invariant/lib/invariant.cjs\"));\nconst htmlescape_1 = __webpack_require__(/*! ../util/htmlescape */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/util/htmlescape.js\");\n/**\n * Returns a string of JavaScript that can be used to transport data to the client.\n */\nfunction transportDataToJS(data) {\n    const key = Symbol.keyFor(ApolloRehydrateSymbols_1.ApolloSSRDataTransport);\n    return `(window[Symbol.for(\"${key}\")] ??= []).push(${(0, htmlescape_1.htmlEscapeJsonString)(superjson_1.default.stringify(data))})`;\n}\nexports.transportDataToJS = transportDataToJS;\n/**\n * Registers a lazy queue that will be filled with data by `transportDataToJS`.\n * All incoming data will be added either to the rehydration cache or the result cache.\n */\nfunction registerDataTransport() {\n    (0, lateInitializingQueue_1.registerLateInitializingQueue)(ApolloRehydrateSymbols_1.ApolloSSRDataTransport, (data) => {\n        var _a, _b, _c;\n        const parsed = superjson_1.default.deserialize(data);\n        ts_invariant_1.default.debug(`received data from the server:`, parsed);\n        Object.assign(((_a = window[ApolloRehydrateSymbols_1.ApolloRehydrationCache]) !== null && _a !== void 0 ? _a : (window[ApolloRehydrateSymbols_1.ApolloRehydrationCache] = {})), parsed.rehydrate);\n        ((_b = window[ApolloRehydrateSymbols_1.ApolloBackgroundQueryTransport]) !== null && _b !== void 0 ? _b : (window[ApolloRehydrateSymbols_1.ApolloBackgroundQueryTransport] = [])).push(...parsed.backgroundQueries);\n        ((_c = window[ApolloRehydrateSymbols_1.ApolloResultCache]) !== null && _c !== void 0 ? _c : (window[ApolloRehydrateSymbols_1.ApolloResultCache] = [])).push(...parsed.results);\n    });\n}\nexports.registerDataTransport = registerDataTransport;\n//# sourceMappingURL=dataTransport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL2RhdGFUcmFuc3BvcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRyx5QkFBeUI7QUFDekQsb0NBQW9DLG1CQUFPLENBQUMsK0RBQVc7QUFDdkQsaUNBQWlDLG1CQUFPLENBQUMsaUlBQTBCO0FBQ25FLGdDQUFnQyxtQkFBTyxDQUFDLCtIQUF5QjtBQUNqRSx1Q0FBdUMsbUJBQU8sQ0FBQyx5RUFBYztBQUM3RCxxQkFBcUIsbUJBQU8sQ0FBQyxnSEFBb0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxJQUFJLG1CQUFtQiw0RUFBNEU7QUFDckk7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0xBQW9MO0FBQ3BMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9henVyby1iZXR0aW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2V4cGVyaW1lbnRhbC1uZXh0anMtYXBwLXN1cHBvcnQvZGlzdC9zc3IvZGF0YVRyYW5zcG9ydC5qcz9jODA2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWdpc3RlckRhdGFUcmFuc3BvcnQgPSBleHBvcnRzLnRyYW5zcG9ydERhdGFUb0pTID0gdm9pZCAwO1xuY29uc3Qgc3VwZXJqc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInN1cGVyanNvblwiKSk7XG5jb25zdCBBcG9sbG9SZWh5ZHJhdGVTeW1ib2xzXzEgPSByZXF1aXJlKFwiLi9BcG9sbG9SZWh5ZHJhdGVTeW1ib2xzXCIpO1xuY29uc3QgbGF0ZUluaXRpYWxpemluZ1F1ZXVlXzEgPSByZXF1aXJlKFwiLi9sYXRlSW5pdGlhbGl6aW5nUXVldWVcIik7XG5jb25zdCB0c19pbnZhcmlhbnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwidHMtaW52YXJpYW50XCIpKTtcbmNvbnN0IGh0bWxlc2NhcGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2h0bWxlc2NhcGVcIik7XG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgb2YgSmF2YVNjcmlwdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHRyYW5zcG9ydCBkYXRhIHRvIHRoZSBjbGllbnQuXG4gKi9cbmZ1bmN0aW9uIHRyYW5zcG9ydERhdGFUb0pTKGRhdGEpIHtcbiAgICBjb25zdCBrZXkgPSBTeW1ib2wua2V5Rm9yKEFwb2xsb1JlaHlkcmF0ZVN5bWJvbHNfMS5BcG9sbG9TU1JEYXRhVHJhbnNwb3J0KTtcbiAgICByZXR1cm4gYCh3aW5kb3dbU3ltYm9sLmZvcihcIiR7a2V5fVwiKV0gPz89IFtdKS5wdXNoKCR7KDAsIGh0bWxlc2NhcGVfMS5odG1sRXNjYXBlSnNvblN0cmluZykoc3VwZXJqc29uXzEuZGVmYXVsdC5zdHJpbmdpZnkoZGF0YSkpfSlgO1xufVxuZXhwb3J0cy50cmFuc3BvcnREYXRhVG9KUyA9IHRyYW5zcG9ydERhdGFUb0pTO1xuLyoqXG4gKiBSZWdpc3RlcnMgYSBsYXp5IHF1ZXVlIHRoYXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkYXRhIGJ5IGB0cmFuc3BvcnREYXRhVG9KU2AuXG4gKiBBbGwgaW5jb21pbmcgZGF0YSB3aWxsIGJlIGFkZGVkIGVpdGhlciB0byB0aGUgcmVoeWRyYXRpb24gY2FjaGUgb3IgdGhlIHJlc3VsdCBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gcmVnaXN0ZXJEYXRhVHJhbnNwb3J0KCkge1xuICAgICgwLCBsYXRlSW5pdGlhbGl6aW5nUXVldWVfMS5yZWdpc3RlckxhdGVJbml0aWFsaXppbmdRdWV1ZSkoQXBvbGxvUmVoeWRyYXRlU3ltYm9sc18xLkFwb2xsb1NTUkRhdGFUcmFuc3BvcnQsIChkYXRhKSA9PiB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBzdXBlcmpzb25fMS5kZWZhdWx0LmRlc2VyaWFsaXplKGRhdGEpO1xuICAgICAgICB0c19pbnZhcmlhbnRfMS5kZWZhdWx0LmRlYnVnKGByZWNlaXZlZCBkYXRhIGZyb20gdGhlIHNlcnZlcjpgLCBwYXJzZWQpO1xuICAgICAgICBPYmplY3QuYXNzaWduKCgoX2EgPSB3aW5kb3dbQXBvbGxvUmVoeWRyYXRlU3ltYm9sc18xLkFwb2xsb1JlaHlkcmF0aW9uQ2FjaGVdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAod2luZG93W0Fwb2xsb1JlaHlkcmF0ZVN5bWJvbHNfMS5BcG9sbG9SZWh5ZHJhdGlvbkNhY2hlXSA9IHt9KSksIHBhcnNlZC5yZWh5ZHJhdGUpO1xuICAgICAgICAoKF9iID0gd2luZG93W0Fwb2xsb1JlaHlkcmF0ZVN5bWJvbHNfMS5BcG9sbG9CYWNrZ3JvdW5kUXVlcnlUcmFuc3BvcnRdKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAod2luZG93W0Fwb2xsb1JlaHlkcmF0ZVN5bWJvbHNfMS5BcG9sbG9CYWNrZ3JvdW5kUXVlcnlUcmFuc3BvcnRdID0gW10pKS5wdXNoKC4uLnBhcnNlZC5iYWNrZ3JvdW5kUXVlcmllcyk7XG4gICAgICAgICgoX2MgPSB3aW5kb3dbQXBvbGxvUmVoeWRyYXRlU3ltYm9sc18xLkFwb2xsb1Jlc3VsdENhY2hlXSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogKHdpbmRvd1tBcG9sbG9SZWh5ZHJhdGVTeW1ib2xzXzEuQXBvbGxvUmVzdWx0Q2FjaGVdID0gW10pKS5wdXNoKC4uLnBhcnNlZC5yZXN1bHRzKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMucmVnaXN0ZXJEYXRhVHJhbnNwb3J0ID0gcmVnaXN0ZXJEYXRhVHJhbnNwb3J0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YVRyYW5zcG9ydC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/dataTransport.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/hooks.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/hooks.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\"use client\";\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useBackgroundQuery = exports.useReadQuery = exports.useSuspenseQuery = exports.useQuery = exports.useFragment = void 0;\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/main.cjs\");\nconst useTransportValue_1 = __webpack_require__(/*! ./useTransportValue */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/useTransportValue.js\");\nconst RehydrationContext_1 = __webpack_require__(/*! ./RehydrationContext */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RehydrationContext.js\");\nexports.useFragment = wrap(client_1.useFragment, [\n    \"data\",\n    \"complete\",\n    \"missing\",\n]);\nexports.useQuery = wrap(typeof window === \"undefined\"\n    ? (query, options) => (0, client_1.useQuery)(query, Object.assign(Object.assign({}, options), { fetchPolicy: \"cache-only\" }))\n    : client_1.useQuery, [\"data\", \"loading\", \"networkStatus\", \"called\"]);\nexports.useSuspenseQuery = wrap(client_1.useSuspenseQuery, [\n    \"data\",\n    \"networkStatus\",\n]);\nexports.useReadQuery = wrap(client_1.useReadQuery, [\"data\", \"networkStatus\"]);\nconst useBackgroundQuery = (...args) => {\n    (0, RehydrationContext_1.useRehydrationContext)();\n    return (0, client_1.useBackgroundQuery)(...args);\n};\nexports.useBackgroundQuery = useBackgroundQuery;\nfunction wrap(useFn, transportKeys) {\n    return ((...args) => {\n        const result = useFn(...args);\n        const transported = {};\n        for (const key of transportKeys) {\n            transported[key] = result[key];\n        }\n        return Object.assign(Object.assign({}, result), (0, useTransportValue_1.useTransportValue)(transported));\n    });\n}\n//# sourceMappingURL=hooks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL2hvb2tzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLEdBQUcsb0JBQW9CLEdBQUcsd0JBQXdCLEdBQUcsZ0JBQWdCLEdBQUcsbUJBQW1CO0FBQ3JILGlCQUFpQixtQkFBTyxDQUFDLG9FQUFnQjtBQUN6Qyw0QkFBNEIsbUJBQU8sQ0FBQyx1SEFBcUI7QUFDekQsNkJBQTZCLG1CQUFPLENBQUMseUhBQXNCO0FBQzNELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixzRkFBc0YsY0FBYywyQkFBMkI7QUFDL0g7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXp1cm8tYmV0dGluZy1hcHAvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL2hvb2tzLmpzP2NlOTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlQmFja2dyb3VuZFF1ZXJ5ID0gZXhwb3J0cy51c2VSZWFkUXVlcnkgPSBleHBvcnRzLnVzZVN1c3BlbnNlUXVlcnkgPSBleHBvcnRzLnVzZVF1ZXJ5ID0gZXhwb3J0cy51c2VGcmFnbWVudCA9IHZvaWQgMDtcbmNvbnN0IGNsaWVudF8xID0gcmVxdWlyZShcIkBhcG9sbG8vY2xpZW50XCIpO1xuY29uc3QgdXNlVHJhbnNwb3J0VmFsdWVfMSA9IHJlcXVpcmUoXCIuL3VzZVRyYW5zcG9ydFZhbHVlXCIpO1xuY29uc3QgUmVoeWRyYXRpb25Db250ZXh0XzEgPSByZXF1aXJlKFwiLi9SZWh5ZHJhdGlvbkNvbnRleHRcIik7XG5leHBvcnRzLnVzZUZyYWdtZW50ID0gd3JhcChjbGllbnRfMS51c2VGcmFnbWVudCwgW1xuICAgIFwiZGF0YVwiLFxuICAgIFwiY29tcGxldGVcIixcbiAgICBcIm1pc3NpbmdcIixcbl0pO1xuZXhwb3J0cy51c2VRdWVyeSA9IHdyYXAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIlxuICAgID8gKHF1ZXJ5LCBvcHRpb25zKSA9PiAoMCwgY2xpZW50XzEudXNlUXVlcnkpKHF1ZXJ5LCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGZldGNoUG9saWN5OiBcImNhY2hlLW9ubHlcIiB9KSlcbiAgICA6IGNsaWVudF8xLnVzZVF1ZXJ5LCBbXCJkYXRhXCIsIFwibG9hZGluZ1wiLCBcIm5ldHdvcmtTdGF0dXNcIiwgXCJjYWxsZWRcIl0pO1xuZXhwb3J0cy51c2VTdXNwZW5zZVF1ZXJ5ID0gd3JhcChjbGllbnRfMS51c2VTdXNwZW5zZVF1ZXJ5LCBbXG4gICAgXCJkYXRhXCIsXG4gICAgXCJuZXR3b3JrU3RhdHVzXCIsXG5dKTtcbmV4cG9ydHMudXNlUmVhZFF1ZXJ5ID0gd3JhcChjbGllbnRfMS51c2VSZWFkUXVlcnksIFtcImRhdGFcIiwgXCJuZXR3b3JrU3RhdHVzXCJdKTtcbmNvbnN0IHVzZUJhY2tncm91bmRRdWVyeSA9ICguLi5hcmdzKSA9PiB7XG4gICAgKDAsIFJlaHlkcmF0aW9uQ29udGV4dF8xLnVzZVJlaHlkcmF0aW9uQ29udGV4dCkoKTtcbiAgICByZXR1cm4gKDAsIGNsaWVudF8xLnVzZUJhY2tncm91bmRRdWVyeSkoLi4uYXJncyk7XG59O1xuZXhwb3J0cy51c2VCYWNrZ3JvdW5kUXVlcnkgPSB1c2VCYWNrZ3JvdW5kUXVlcnk7XG5mdW5jdGlvbiB3cmFwKHVzZUZuLCB0cmFuc3BvcnRLZXlzKSB7XG4gICAgcmV0dXJuICgoLi4uYXJncykgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB1c2VGbiguLi5hcmdzKTtcbiAgICAgICAgY29uc3QgdHJhbnNwb3J0ZWQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdHJhbnNwb3J0S2V5cykge1xuICAgICAgICAgICAgdHJhbnNwb3J0ZWRba2V5XSA9IHJlc3VsdFtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3VsdCksICgwLCB1c2VUcmFuc3BvcnRWYWx1ZV8xLnVzZVRyYW5zcG9ydFZhbHVlKSh0cmFuc3BvcnRlZCkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG9va3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/hooks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resetNextSSRApolloSingletons = exports.RemoveMultipartDirectivesLink = exports.DebounceMultipartResponsesLink = exports.SSRMultipartLink = exports.useBackgroundQuery = exports.useReadQuery = exports.useSuspenseQuery = exports.useQuery = exports.useFragment = exports.NextSSRApolloClient = exports.NextSSRInMemoryCache = exports.ApolloNextAppProvider = void 0;\nvar ApolloNextAppProvider_1 = __webpack_require__(/*! ./ApolloNextAppProvider */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloNextAppProvider.js\");\nObject.defineProperty(exports, \"ApolloNextAppProvider\", ({ enumerable: true, get: function () { return ApolloNextAppProvider_1.ApolloNextAppProvider; } }));\nvar NextSSRInMemoryCache_1 = __webpack_require__(/*! ./NextSSRInMemoryCache */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRInMemoryCache.js\");\nObject.defineProperty(exports, \"NextSSRInMemoryCache\", ({ enumerable: true, get: function () { return NextSSRInMemoryCache_1.NextSSRInMemoryCache; } }));\nvar NextSSRApolloClient_1 = __webpack_require__(/*! ./NextSSRApolloClient */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRApolloClient.js\");\nObject.defineProperty(exports, \"NextSSRApolloClient\", ({ enumerable: true, get: function () { return NextSSRApolloClient_1.NextSSRApolloClient; } }));\nvar hooks_1 = __webpack_require__(/*! ./hooks */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/hooks.js\");\nObject.defineProperty(exports, \"useFragment\", ({ enumerable: true, get: function () { return hooks_1.useFragment; } }));\nObject.defineProperty(exports, \"useQuery\", ({ enumerable: true, get: function () { return hooks_1.useQuery; } }));\nObject.defineProperty(exports, \"useSuspenseQuery\", ({ enumerable: true, get: function () { return hooks_1.useSuspenseQuery; } }));\nObject.defineProperty(exports, \"useReadQuery\", ({ enumerable: true, get: function () { return hooks_1.useReadQuery; } }));\nObject.defineProperty(exports, \"useBackgroundQuery\", ({ enumerable: true, get: function () { return hooks_1.useBackgroundQuery; } }));\nvar SSRMultipartLink_1 = __webpack_require__(/*! ./SSRMultipartLink */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/SSRMultipartLink.js\");\nObject.defineProperty(exports, \"SSRMultipartLink\", ({ enumerable: true, get: function () { return SSRMultipartLink_1.SSRMultipartLink; } }));\nvar AccumulateMultipartResponsesLink_1 = __webpack_require__(/*! ./AccumulateMultipartResponsesLink */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/AccumulateMultipartResponsesLink.js\");\nObject.defineProperty(exports, \"DebounceMultipartResponsesLink\", ({ enumerable: true, get: function () { return AccumulateMultipartResponsesLink_1.AccumulateMultipartResponsesLink; } }));\nvar RemoveMultipartDirectivesLink_1 = __webpack_require__(/*! ./RemoveMultipartDirectivesLink */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RemoveMultipartDirectivesLink.js\");\nObject.defineProperty(exports, \"RemoveMultipartDirectivesLink\", ({ enumerable: true, get: function () { return RemoveMultipartDirectivesLink_1.RemoveMultipartDirectivesLink; } }));\nvar testHelpers_1 = __webpack_require__(/*! ./testHelpers */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/testHelpers.js\");\nObject.defineProperty(exports, \"resetNextSSRApolloSingletons\", ({ enumerable: true, get: function () { return testHelpers_1.resetNextSSRApolloSingletons; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9DQUFvQyxHQUFHLHFDQUFxQyxHQUFHLHNDQUFzQyxHQUFHLHdCQUF3QixHQUFHLDBCQUEwQixHQUFHLG9CQUFvQixHQUFHLHdCQUF3QixHQUFHLGdCQUFnQixHQUFHLG1CQUFtQixHQUFHLDJCQUEyQixHQUFHLDRCQUE0QixHQUFHLDZCQUE2QjtBQUNyVyw4QkFBOEIsbUJBQU8sQ0FBQywrSEFBeUI7QUFDL0QseURBQXdELEVBQUUscUNBQXFDLHlEQUF5RCxFQUFDO0FBQ3pKLDZCQUE2QixtQkFBTyxDQUFDLDZIQUF3QjtBQUM3RCx3REFBdUQsRUFBRSxxQ0FBcUMsdURBQXVELEVBQUM7QUFDdEosNEJBQTRCLG1CQUFPLENBQUMsMkhBQXVCO0FBQzNELHVEQUFzRCxFQUFFLHFDQUFxQyxxREFBcUQsRUFBQztBQUNuSixjQUFjLG1CQUFPLENBQUMsK0ZBQVM7QUFDL0IsK0NBQThDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ3JILDRDQUEyQyxFQUFFLHFDQUFxQyw0QkFBNEIsRUFBQztBQUMvRyxvREFBbUQsRUFBRSxxQ0FBcUMsb0NBQW9DLEVBQUM7QUFDL0gsZ0RBQStDLEVBQUUscUNBQXFDLGdDQUFnQyxFQUFDO0FBQ3ZILHNEQUFxRCxFQUFFLHFDQUFxQyxzQ0FBc0MsRUFBQztBQUNuSSx5QkFBeUIsbUJBQU8sQ0FBQyxxSEFBb0I7QUFDckQsb0RBQW1ELEVBQUUscUNBQXFDLCtDQUErQyxFQUFDO0FBQzFJLHlDQUF5QyxtQkFBTyxDQUFDLHFKQUFvQztBQUNyRixrRUFBaUUsRUFBRSxxQ0FBcUMsK0VBQStFLEVBQUM7QUFDeEwsc0NBQXNDLG1CQUFPLENBQUMsK0lBQWlDO0FBQy9FLGlFQUFnRSxFQUFFLHFDQUFxQyx5RUFBeUUsRUFBQztBQUNqTCxvQkFBb0IsbUJBQU8sQ0FBQywyR0FBZTtBQUMzQyxnRUFBK0QsRUFBRSxxQ0FBcUMsc0RBQXNELEVBQUM7QUFDN0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9henVyby1iZXR0aW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2V4cGVyaW1lbnRhbC1uZXh0anMtYXBwLXN1cHBvcnQvZGlzdC9zc3IvaW5kZXguanM/ZjI4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVzZXROZXh0U1NSQXBvbGxvU2luZ2xldG9ucyA9IGV4cG9ydHMuUmVtb3ZlTXVsdGlwYXJ0RGlyZWN0aXZlc0xpbmsgPSBleHBvcnRzLkRlYm91bmNlTXVsdGlwYXJ0UmVzcG9uc2VzTGluayA9IGV4cG9ydHMuU1NSTXVsdGlwYXJ0TGluayA9IGV4cG9ydHMudXNlQmFja2dyb3VuZFF1ZXJ5ID0gZXhwb3J0cy51c2VSZWFkUXVlcnkgPSBleHBvcnRzLnVzZVN1c3BlbnNlUXVlcnkgPSBleHBvcnRzLnVzZVF1ZXJ5ID0gZXhwb3J0cy51c2VGcmFnbWVudCA9IGV4cG9ydHMuTmV4dFNTUkFwb2xsb0NsaWVudCA9IGV4cG9ydHMuTmV4dFNTUkluTWVtb3J5Q2FjaGUgPSBleHBvcnRzLkFwb2xsb05leHRBcHBQcm92aWRlciA9IHZvaWQgMDtcbnZhciBBcG9sbG9OZXh0QXBwUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL0Fwb2xsb05leHRBcHBQcm92aWRlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFwb2xsb05leHRBcHBQcm92aWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXBvbGxvTmV4dEFwcFByb3ZpZGVyXzEuQXBvbGxvTmV4dEFwcFByb3ZpZGVyOyB9IH0pO1xudmFyIE5leHRTU1JJbk1lbW9yeUNhY2hlXzEgPSByZXF1aXJlKFwiLi9OZXh0U1NSSW5NZW1vcnlDYWNoZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5leHRTU1JJbk1lbW9yeUNhY2hlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOZXh0U1NSSW5NZW1vcnlDYWNoZV8xLk5leHRTU1JJbk1lbW9yeUNhY2hlOyB9IH0pO1xudmFyIE5leHRTU1JBcG9sbG9DbGllbnRfMSA9IHJlcXVpcmUoXCIuL05leHRTU1JBcG9sbG9DbGllbnRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOZXh0U1NSQXBvbGxvQ2xpZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOZXh0U1NSQXBvbGxvQ2xpZW50XzEuTmV4dFNTUkFwb2xsb0NsaWVudDsgfSB9KTtcbnZhciBob29rc18xID0gcmVxdWlyZShcIi4vaG9va3NcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1c2VGcmFnbWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaG9va3NfMS51c2VGcmFnbWVudDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZVF1ZXJ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBob29rc18xLnVzZVF1ZXJ5OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNlU3VzcGVuc2VRdWVyeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaG9va3NfMS51c2VTdXNwZW5zZVF1ZXJ5OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNlUmVhZFF1ZXJ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBob29rc18xLnVzZVJlYWRRdWVyeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZUJhY2tncm91bmRRdWVyeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaG9va3NfMS51c2VCYWNrZ3JvdW5kUXVlcnk7IH0gfSk7XG52YXIgU1NSTXVsdGlwYXJ0TGlua18xID0gcmVxdWlyZShcIi4vU1NSTXVsdGlwYXJ0TGlua1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNTUk11bHRpcGFydExpbmtcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFNTUk11bHRpcGFydExpbmtfMS5TU1JNdWx0aXBhcnRMaW5rOyB9IH0pO1xudmFyIEFjY3VtdWxhdGVNdWx0aXBhcnRSZXNwb25zZXNMaW5rXzEgPSByZXF1aXJlKFwiLi9BY2N1bXVsYXRlTXVsdGlwYXJ0UmVzcG9uc2VzTGlua1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRlYm91bmNlTXVsdGlwYXJ0UmVzcG9uc2VzTGlua1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQWNjdW11bGF0ZU11bHRpcGFydFJlc3BvbnNlc0xpbmtfMS5BY2N1bXVsYXRlTXVsdGlwYXJ0UmVzcG9uc2VzTGluazsgfSB9KTtcbnZhciBSZW1vdmVNdWx0aXBhcnREaXJlY3RpdmVzTGlua18xID0gcmVxdWlyZShcIi4vUmVtb3ZlTXVsdGlwYXJ0RGlyZWN0aXZlc0xpbmtcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZW1vdmVNdWx0aXBhcnREaXJlY3RpdmVzTGlua1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUmVtb3ZlTXVsdGlwYXJ0RGlyZWN0aXZlc0xpbmtfMS5SZW1vdmVNdWx0aXBhcnREaXJlY3RpdmVzTGluazsgfSB9KTtcbnZhciB0ZXN0SGVscGVyc18xID0gcmVxdWlyZShcIi4vdGVzdEhlbHBlcnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXNldE5leHRTU1JBcG9sbG9TaW5nbGV0b25zXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0ZXN0SGVscGVyc18xLnJlc2V0TmV4dFNTUkFwb2xsb1NpbmdsZXRvbnM7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/lateInitializingQueue.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/lateInitializingQueue.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.registerLateInitializingQueue = void 0;\n/**\n * Registers a queue that can be filled with data before it has actually been initialized with this function.\n * Before calling this function, `window[key]` can just be handled as an array of data.\n * When calling this funcation, all accumulated data will be passed to the callback.\n * After calling this function, `window[key]` will be an object with a `push` method that will call the callback with the data.\n */\nfunction registerLateInitializingQueue(key, callback) {\n    if (typeof window !== \"undefined\") {\n        const previousData = window[key] || [];\n        if (Array.isArray(previousData)) {\n            window[key] = {\n                push: (...data) => {\n                    for (const value of data) {\n                        callback(value);\n                    }\n                },\n            };\n            window[key].push(...previousData);\n        }\n    }\n}\nexports.registerLateInitializingQueue = registerLateInitializingQueue;\n//# sourceMappingURL=lateInitializingQueue.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL2xhdGVJbml0aWFsaXppbmdRdWV1ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9henVyby1iZXR0aW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2V4cGVyaW1lbnRhbC1uZXh0anMtYXBwLXN1cHBvcnQvZGlzdC9zc3IvbGF0ZUluaXRpYWxpemluZ1F1ZXVlLmpzP2IxNTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlZ2lzdGVyTGF0ZUluaXRpYWxpemluZ1F1ZXVlID0gdm9pZCAwO1xuLyoqXG4gKiBSZWdpc3RlcnMgYSBxdWV1ZSB0aGF0IGNhbiBiZSBmaWxsZWQgd2l0aCBkYXRhIGJlZm9yZSBpdCBoYXMgYWN0dWFsbHkgYmVlbiBpbml0aWFsaXplZCB3aXRoIHRoaXMgZnVuY3Rpb24uXG4gKiBCZWZvcmUgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLCBgd2luZG93W2tleV1gIGNhbiBqdXN0IGJlIGhhbmRsZWQgYXMgYW4gYXJyYXkgb2YgZGF0YS5cbiAqIFdoZW4gY2FsbGluZyB0aGlzIGZ1bmNhdGlvbiwgYWxsIGFjY3VtdWxhdGVkIGRhdGEgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrLlxuICogQWZ0ZXIgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLCBgd2luZG93W2tleV1gIHdpbGwgYmUgYW4gb2JqZWN0IHdpdGggYSBgcHVzaGAgbWV0aG9kIHRoYXQgd2lsbCBjYWxsIHRoZSBjYWxsYmFjayB3aXRoIHRoZSBkYXRhLlxuICovXG5mdW5jdGlvbiByZWdpc3RlckxhdGVJbml0aWFsaXppbmdRdWV1ZShrZXksIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNEYXRhID0gd2luZG93W2tleV0gfHwgW107XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHByZXZpb3VzRGF0YSkpIHtcbiAgICAgICAgICAgIHdpbmRvd1trZXldID0ge1xuICAgICAgICAgICAgICAgIHB1c2g6ICguLi5kYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3dba2V5XS5wdXNoKC4uLnByZXZpb3VzRGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLnJlZ2lzdGVyTGF0ZUluaXRpYWxpemluZ1F1ZXVlID0gcmVnaXN0ZXJMYXRlSW5pdGlhbGl6aW5nUXVldWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYXRlSW5pdGlhbGl6aW5nUXVldWUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/lateInitializingQueue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/testHelpers.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/testHelpers.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resetNextSSRApolloSingletons = void 0;\nconst ApolloNextAppProvider_1 = __webpack_require__(/*! ./ApolloNextAppProvider */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloNextAppProvider.js\");\nconst ApolloRehydrateSymbols_1 = __webpack_require__(/*! ./ApolloRehydrateSymbols */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloRehydrateSymbols.js\");\n/**\n * Resets the singleton instances created for the Apollo SSR data transport and caches.\n *\n * To be used in testing only, like\n * ```ts\n * afterEach(resetNextSSRApolloSingletons);\n * ```\n */\nfunction resetNextSSRApolloSingletons() {\n    delete window[ApolloRehydrateSymbols_1.ApolloRehydrationCache];\n    delete window[ApolloRehydrateSymbols_1.ApolloResultCache];\n    delete window[ApolloRehydrateSymbols_1.ApolloSSRDataTransport];\n    delete window[ApolloRehydrateSymbols_1.ApolloBackgroundQueryTransport];\n    delete window[ApolloNextAppProvider_1.ApolloClientSingleton];\n}\nexports.resetNextSSRApolloSingletons = resetNextSSRApolloSingletons;\n//# sourceMappingURL=testHelpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL3Rlc3RIZWxwZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9DQUFvQztBQUNwQyxnQ0FBZ0MsbUJBQU8sQ0FBQywrSEFBeUI7QUFDakUsaUNBQWlDLG1CQUFPLENBQUMsaUlBQTBCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F6dXJvLWJldHRpbmctYXBwLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vZXhwZXJpbWVudGFsLW5leHRqcy1hcHAtc3VwcG9ydC9kaXN0L3Nzci90ZXN0SGVscGVycy5qcz8xZDZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNldE5leHRTU1JBcG9sbG9TaW5nbGV0b25zID0gdm9pZCAwO1xuY29uc3QgQXBvbGxvTmV4dEFwcFByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9BcG9sbG9OZXh0QXBwUHJvdmlkZXJcIik7XG5jb25zdCBBcG9sbG9SZWh5ZHJhdGVTeW1ib2xzXzEgPSByZXF1aXJlKFwiLi9BcG9sbG9SZWh5ZHJhdGVTeW1ib2xzXCIpO1xuLyoqXG4gKiBSZXNldHMgdGhlIHNpbmdsZXRvbiBpbnN0YW5jZXMgY3JlYXRlZCBmb3IgdGhlIEFwb2xsbyBTU1IgZGF0YSB0cmFuc3BvcnQgYW5kIGNhY2hlcy5cbiAqXG4gKiBUbyBiZSB1c2VkIGluIHRlc3Rpbmcgb25seSwgbGlrZVxuICogYGBgdHNcbiAqIGFmdGVyRWFjaChyZXNldE5leHRTU1JBcG9sbG9TaW5nbGV0b25zKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiByZXNldE5leHRTU1JBcG9sbG9TaW5nbGV0b25zKCkge1xuICAgIGRlbGV0ZSB3aW5kb3dbQXBvbGxvUmVoeWRyYXRlU3ltYm9sc18xLkFwb2xsb1JlaHlkcmF0aW9uQ2FjaGVdO1xuICAgIGRlbGV0ZSB3aW5kb3dbQXBvbGxvUmVoeWRyYXRlU3ltYm9sc18xLkFwb2xsb1Jlc3VsdENhY2hlXTtcbiAgICBkZWxldGUgd2luZG93W0Fwb2xsb1JlaHlkcmF0ZVN5bWJvbHNfMS5BcG9sbG9TU1JEYXRhVHJhbnNwb3J0XTtcbiAgICBkZWxldGUgd2luZG93W0Fwb2xsb1JlaHlkcmF0ZVN5bWJvbHNfMS5BcG9sbG9CYWNrZ3JvdW5kUXVlcnlUcmFuc3BvcnRdO1xuICAgIGRlbGV0ZSB3aW5kb3dbQXBvbGxvTmV4dEFwcFByb3ZpZGVyXzEuQXBvbGxvQ2xpZW50U2luZ2xldG9uXTtcbn1cbmV4cG9ydHMucmVzZXROZXh0U1NSQXBvbGxvU2luZ2xldG9ucyA9IHJlc2V0TmV4dFNTUkFwb2xsb1NpbmdsZXRvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXN0SGVscGVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/testHelpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/useTransportValue.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/useTransportValue.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\"use client\";\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useTransportValue = void 0;\nconst react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst ApolloRehydrateSymbols_1 = __webpack_require__(/*! ./ApolloRehydrateSymbols */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloRehydrateSymbols.js\");\nconst RehydrationContext_1 = __webpack_require__(/*! ./RehydrationContext */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RehydrationContext.js\");\n/**\n * A hook that mostly acts as an identity function.\n * It will only behave differently during\n * the first render on the client, in which case it will\n * try to return the last value it was called with by\n * the same component during SSR. If that is successful,\n * it will schedule another rerender, to after hydration\n * the component can change to client-side values instead.\n */\nfunction useTransportValue(value) {\n    const id = (0, react_1.useId)();\n    const [isClient, setIsClient] = (0, react_1.useState)(false);\n    (0, react_1.useEffect)(() => setIsClient(true), []);\n    const rehydrationContext = (0, RehydrationContext_1.useRehydrationContext)();\n    if (typeof window == \"undefined\") {\n        if (rehydrationContext) {\n            rehydrationContext.transportValueData[id] = value;\n        }\n    }\n    else {\n        const store = window[ApolloRehydrateSymbols_1.ApolloRehydrationCache];\n        if (store) {\n            if (isClient) {\n                delete store[id];\n            }\n            if (id in store)\n                value = store[id];\n        }\n    }\n    return value;\n}\nexports.useTransportValue = useTransportValue;\n//# sourceMappingURL=useTransportValue.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL3VzZVRyYW5zcG9ydFZhbHVlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLGdCQUFnQixtQkFBTyxDQUFDLHdHQUFPO0FBQy9CLGlDQUFpQyxtQkFBTyxDQUFDLGlJQUEwQjtBQUNuRSw2QkFBNkIsbUJBQU8sQ0FBQyx5SEFBc0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9henVyby1iZXR0aW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2V4cGVyaW1lbnRhbC1uZXh0anMtYXBwLXN1cHBvcnQvZGlzdC9zc3IvdXNlVHJhbnNwb3J0VmFsdWUuanM/NWFjYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblwidXNlIGNsaWVudFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VUcmFuc3BvcnRWYWx1ZSA9IHZvaWQgMDtcbmNvbnN0IHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCBBcG9sbG9SZWh5ZHJhdGVTeW1ib2xzXzEgPSByZXF1aXJlKFwiLi9BcG9sbG9SZWh5ZHJhdGVTeW1ib2xzXCIpO1xuY29uc3QgUmVoeWRyYXRpb25Db250ZXh0XzEgPSByZXF1aXJlKFwiLi9SZWh5ZHJhdGlvbkNvbnRleHRcIik7XG4vKipcbiAqIEEgaG9vayB0aGF0IG1vc3RseSBhY3RzIGFzIGFuIGlkZW50aXR5IGZ1bmN0aW9uLlxuICogSXQgd2lsbCBvbmx5IGJlaGF2ZSBkaWZmZXJlbnRseSBkdXJpbmdcbiAqIHRoZSBmaXJzdCByZW5kZXIgb24gdGhlIGNsaWVudCwgaW4gd2hpY2ggY2FzZSBpdCB3aWxsXG4gKiB0cnkgdG8gcmV0dXJuIHRoZSBsYXN0IHZhbHVlIGl0IHdhcyBjYWxsZWQgd2l0aCBieVxuICogdGhlIHNhbWUgY29tcG9uZW50IGR1cmluZyBTU1IuIElmIHRoYXQgaXMgc3VjY2Vzc2Z1bCxcbiAqIGl0IHdpbGwgc2NoZWR1bGUgYW5vdGhlciByZXJlbmRlciwgdG8gYWZ0ZXIgaHlkcmF0aW9uXG4gKiB0aGUgY29tcG9uZW50IGNhbiBjaGFuZ2UgdG8gY2xpZW50LXNpZGUgdmFsdWVzIGluc3RlYWQuXG4gKi9cbmZ1bmN0aW9uIHVzZVRyYW5zcG9ydFZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgaWQgPSAoMCwgcmVhY3RfMS51c2VJZCkoKTtcbiAgICBjb25zdCBbaXNDbGllbnQsIHNldElzQ2xpZW50XSA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKShmYWxzZSk7XG4gICAgKDAsIHJlYWN0XzEudXNlRWZmZWN0KSgoKSA9PiBzZXRJc0NsaWVudCh0cnVlKSwgW10pO1xuICAgIGNvbnN0IHJlaHlkcmF0aW9uQ29udGV4dCA9ICgwLCBSZWh5ZHJhdGlvbkNvbnRleHRfMS51c2VSZWh5ZHJhdGlvbkNvbnRleHQpKCk7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAocmVoeWRyYXRpb25Db250ZXh0KSB7XG4gICAgICAgICAgICByZWh5ZHJhdGlvbkNvbnRleHQudHJhbnNwb3J0VmFsdWVEYXRhW2lkXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBzdG9yZSA9IHdpbmRvd1tBcG9sbG9SZWh5ZHJhdGVTeW1ib2xzXzEuQXBvbGxvUmVoeWRyYXRpb25DYWNoZV07XG4gICAgICAgIGlmIChzdG9yZSkge1xuICAgICAgICAgICAgaWYgKGlzQ2xpZW50KSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0b3JlW2lkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpZCBpbiBzdG9yZSlcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHN0b3JlW2lkXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5leHBvcnRzLnVzZVRyYW5zcG9ydFZhbHVlID0gdXNlVHJhbnNwb3J0VmFsdWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VUcmFuc3BvcnRWYWx1ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/useTransportValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/util/htmlescape.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/util/htmlescape.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// --------------------------------------------------------------------------------\n//\n// copied from\n// https://github.com/vercel/next.js/blob/6bc07792a4462a4bf921a72ab30dc4ab2c4e1bda/packages/next/src/server/htmlescape.ts\n// License: https://github.com/vercel/next.js/blob/6bc07792a4462a4bf921a72ab30dc4ab2c4e1bda/packages/next/license.md\n//\n// --------------------------------------------------------------------------------\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.htmlEscapeJsonString = exports.ESCAPE_REGEX = void 0;\n// This utility is based on https://github.com/zertosh/htmlescape\n// License: https://github.com/zertosh/htmlescape/blob/0527ca7156a524d256101bb310a9f970f63078ad/LICENSE\nconst ESCAPE_LOOKUP = {\n    \"&\": \"\\\\u0026\",\n    \">\": \"\\\\u003e\",\n    \"<\": \"\\\\u003c\",\n    \"\\u2028\": \"\\\\u2028\",\n    \"\\u2029\": \"\\\\u2029\",\n};\nexports.ESCAPE_REGEX = /[&><\\u2028\\u2029]/g;\nfunction htmlEscapeJsonString(str) {\n    return str.replace(exports.ESCAPE_REGEX, (match) => ESCAPE_LOOKUP[match]);\n}\nexports.htmlEscapeJsonString = htmlEscapeJsonString;\n//# sourceMappingURL=htmlescape.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3QvdXRpbC9odG1sZXNjYXBlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsb0JBQW9CO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9henVyby1iZXR0aW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2V4cGVyaW1lbnRhbC1uZXh0anMtYXBwLXN1cHBvcnQvZGlzdC91dGlsL2h0bWxlc2NhcGUuanM/ZGI1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gY29waWVkIGZyb21cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS92ZXJjZWwvbmV4dC5qcy9ibG9iLzZiYzA3NzkyYTQ0NjJhNGJmOTIxYTcyYWIzMGRjNGFiMmM0ZTFiZGEvcGFja2FnZXMvbmV4dC9zcmMvc2VydmVyL2h0bWxlc2NhcGUudHNcbi8vIExpY2Vuc2U6IGh0dHBzOi8vZ2l0aHViLmNvbS92ZXJjZWwvbmV4dC5qcy9ibG9iLzZiYzA3NzkyYTQ0NjJhNGJmOTIxYTcyYWIzMGRjNGFiMmM0ZTFiZGEvcGFja2FnZXMvbmV4dC9saWNlbnNlLm1kXG4vL1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaHRtbEVzY2FwZUpzb25TdHJpbmcgPSBleHBvcnRzLkVTQ0FQRV9SRUdFWCA9IHZvaWQgMDtcbi8vIFRoaXMgdXRpbGl0eSBpcyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9odG1sZXNjYXBlXG4vLyBMaWNlbnNlOiBodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9odG1sZXNjYXBlL2Jsb2IvMDUyN2NhNzE1NmE1MjRkMjU2MTAxYmIzMTBhOWY5NzBmNjMwNzhhZC9MSUNFTlNFXG5jb25zdCBFU0NBUEVfTE9PS1VQID0ge1xuICAgIFwiJlwiOiBcIlxcXFx1MDAyNlwiLFxuICAgIFwiPlwiOiBcIlxcXFx1MDAzZVwiLFxuICAgIFwiPFwiOiBcIlxcXFx1MDAzY1wiLFxuICAgIFwiXFx1MjAyOFwiOiBcIlxcXFx1MjAyOFwiLFxuICAgIFwiXFx1MjAyOVwiOiBcIlxcXFx1MjAyOVwiLFxufTtcbmV4cG9ydHMuRVNDQVBFX1JFR0VYID0gL1smPjxcXHUyMDI4XFx1MjAyOV0vZztcbmZ1bmN0aW9uIGh0bWxFc2NhcGVKc29uU3RyaW5nKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShleHBvcnRzLkVTQ0FQRV9SRUdFWCwgKG1hdGNoKSA9PiBFU0NBUEVfTE9PS1VQW21hdGNoXSk7XG59XG5leHBvcnRzLmh0bWxFc2NhcGVKc29uU3RyaW5nID0gaHRtbEVzY2FwZUpzb25TdHJpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odG1sZXNjYXBlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/util/htmlescape.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/cache.cjs":
/*!*****************************************************!*\
  !*** ./node_modules/@apollo/client/cache/cache.cjs ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar globals = __webpack_require__(/*! ../utilities/globals */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/globals.cjs\");\nvar tslib = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nvar optimism = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/bundle.cjs\");\nvar utilities = __webpack_require__(/*! ../utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs\");\nvar caches = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/bundle.cjs\");\nvar equality = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/bundle.cjs\");\nvar trie = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/bundle.cjs\");\nvar graphql = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/index.js\");\n\nvar getInMemoryCacheMemoryInternals = globalThis.__DEV__ !== false ?\n    _getInMemoryCacheMemoryInternals\n    : undefined;\nvar getApolloCacheMemoryInternals = globalThis.__DEV__ !== false ?\n    _getApolloCacheMemoryInternals\n    : undefined;\nfunction _getApolloCacheMemoryInternals() {\n    return {\n        cache: {\n            fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"]),\n        },\n    };\n}\nfunction _getInMemoryCacheMemoryInternals() {\n    var fragments = this.config.fragments;\n    return tslib.__assign(tslib.__assign({}, _getApolloCacheMemoryInternals.apply(this)), { addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]), inMemoryCache: {\n            executeSelectionSet: getWrapperInformation(this[\"storeReader\"][\"executeSelectionSet\"]),\n            executeSubSelectedArray: getWrapperInformation(this[\"storeReader\"][\"executeSubSelectedArray\"]),\n            maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"]),\n        }, fragmentRegistry: {\n            findFragmentSpreads: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.findFragmentSpreads),\n            lookup: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.lookup),\n            transform: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.transform),\n        } });\n}\nfunction isWrapper(f) {\n    return !!f && \"dirtyKey\" in f;\n}\nfunction getWrapperInformation(f) {\n    return isWrapper(f) ? f.size : undefined;\n}\nfunction isDefined(value) {\n    return value != null;\n}\nfunction transformInfo(transform) {\n    return recurseTransformInfo(transform).map(function (cache) { return ({ cache: cache }); });\n}\nfunction recurseTransformInfo(transform) {\n    return transform ?\n        tslib.__spreadArray(tslib.__spreadArray([\n            getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform[\"performWork\"])\n        ], recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"left\"]), true), recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"right\"]), true).filter(isDefined)\n        : [];\n}\n\nvar ApolloCache =  (function () {\n    function ApolloCache() {\n        this.assumeImmutableResults = false;\n        this.getFragmentDoc = optimism.wrap(utilities.getFragmentQueryDocument, {\n            max: utilities.cacheSizes[\"cache.fragmentQueryDocuments\"] ||\n                1000 ,\n            cache: caches.WeakCache,\n        });\n    }\n    ApolloCache.prototype.batch = function (options) {\n        var _this = this;\n        var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic\n            : options.optimistic === false ? null\n                : void 0;\n        var updateResult;\n        this.performTransaction(function () { return (updateResult = options.update(_this)); }, optimisticId);\n        return updateResult;\n    };\n    ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    };\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function (object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function () {\n        return [];\n    };\n    ApolloCache.prototype.modify = function (options) {\n        return false;\n    };\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(tslib.__assign(tslib.__assign({}, options), { rootId: options.id || \"ROOT_QUERY\", optimistic: optimistic }));\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(tslib.__assign(tslib.__assign({}, options), { query: this.getFragmentDoc(options.fragment, options.fragmentName), rootId: options.id, optimistic: optimistic }));\n    };\n    ApolloCache.prototype.writeQuery = function (_a) {\n        var id = _a.id, data = _a.data, options = tslib.__rest(_a, [\"id\", \"data\"]);\n        return this.write(Object.assign(options, {\n            dataId: id || \"ROOT_QUERY\",\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.writeFragment = function (_a) {\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = tslib.__rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.updateQuery = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readQuery(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeQuery(tslib.__assign(tslib.__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    ApolloCache.prototype.updateFragment = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readFragment(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeFragment(tslib.__assign(tslib.__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    return ApolloCache;\n}());\nif (globalThis.__DEV__ !== false) {\n    ApolloCache.prototype.getMemoryInternals = getApolloCacheMemoryInternals;\n}\n\nexports.Cache = void 0;\n(function (Cache) {\n})(exports.Cache || (exports.Cache = {}));\n\nvar MissingFieldError =  (function (_super) {\n    tslib.__extends(MissingFieldError, _super);\n    function MissingFieldError(message, path, query, variables) {\n        var _a;\n        var _this = _super.call(this, message) || this;\n        _this.message = message;\n        _this.path = path;\n        _this.query = query;\n        _this.variables = variables;\n        if (Array.isArray(_this.path)) {\n            _this.missing = _this.message;\n            for (var i = _this.path.length - 1; i >= 0; --i) {\n                _this.missing = (_a = {}, _a[_this.path[i]] = _this.missing, _a);\n            }\n        }\n        else {\n            _this.missing = _this.path;\n        }\n        _this.__proto__ = MissingFieldError.prototype;\n        return _this;\n    }\n    return MissingFieldError;\n}(Error));\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction isNullish(value) {\n    return value === null || value === void 0;\n}\nfunction defaultDataIdFromObject(_a, context) {\n    var __typename = _a.__typename, id = _a.id, _id = _a._id;\n    if (typeof __typename === \"string\") {\n        if (context) {\n            context.keyObject =\n                !isNullish(id) ? { id: id }\n                    : !isNullish(_id) ? { _id: _id }\n                        : void 0;\n        }\n        if (isNullish(id) && !isNullish(_id)) {\n            id = _id;\n        }\n        if (!isNullish(id)) {\n            return \"\".concat(__typename, \":\").concat(typeof id === \"number\" || typeof id === \"string\" ?\n                id\n                : JSON.stringify(id));\n        }\n    }\n}\nvar defaultConfig = {\n    dataIdFromObject: defaultDataIdFromObject,\n    addTypename: true,\n    resultCaching: true,\n    canonizeResults: false,\n};\nfunction normalizeConfig(config) {\n    return utilities.compact(defaultConfig, config);\n}\nfunction shouldCanonizeResults(config) {\n    var value = config.canonizeResults;\n    return value === void 0 ? defaultConfig.canonizeResults : value;\n}\nfunction getTypenameFromStoreObject(store, objectOrReference) {\n    return utilities.isReference(objectOrReference) ?\n        store.get(objectOrReference.__ref, \"__typename\")\n        : objectOrReference && objectOrReference.__typename;\n}\nvar TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nfunction fieldNameFromStoreName(storeFieldName) {\n    var match = storeFieldName.match(TypeOrFieldNameRegExp);\n    return match ? match[0] : storeFieldName;\n}\nfunction selectionSetMatchesResult(selectionSet, result, variables) {\n    if (utilities.isNonNullObject(result)) {\n        return utilities.isArray(result) ?\n            result.every(function (item) {\n                return selectionSetMatchesResult(selectionSet, item, variables);\n            })\n            : selectionSet.selections.every(function (field) {\n                if (utilities.isField(field) && utilities.shouldInclude(field, variables)) {\n                    var key = utilities.resultKeyNameFromField(field);\n                    return (hasOwn.call(result, key) &&\n                        (!field.selectionSet ||\n                            selectionSetMatchesResult(field.selectionSet, result[key], variables)));\n                }\n                return true;\n            });\n    }\n    return false;\n}\nfunction storeValueIsStoreObject(value) {\n    return utilities.isNonNullObject(value) && !utilities.isReference(value) && !utilities.isArray(value);\n}\nfunction makeProcessedFieldsMerger() {\n    return new utilities.DeepMerger();\n}\nfunction extractFragmentContext(document, fragments) {\n    var fragmentMap = utilities.createFragmentMap(utilities.getFragmentDefinitions(document));\n    return {\n        fragmentMap: fragmentMap,\n        lookupFragment: function (name) {\n            var def = fragmentMap[name];\n            if (!def && fragments) {\n                def = fragments.lookup(name);\n            }\n            return def || null;\n        },\n    };\n}\n\nvar DELETE = Object.create(null);\nvar delModifier = function () { return DELETE; };\nvar INVALIDATE = Object.create(null);\nexports.EntityStore =  (function () {\n    function EntityStore(policies, group) {\n        var _this = this;\n        this.policies = policies;\n        this.group = group;\n        this.data = Object.create(null);\n        this.rootIds = Object.create(null);\n        this.refs = Object.create(null);\n        this.getFieldValue = function (objectOrReference, storeFieldName) {\n            return utilities.maybeDeepFreeze(utilities.isReference(objectOrReference) ?\n                _this.get(objectOrReference.__ref, storeFieldName)\n                : objectOrReference && objectOrReference[storeFieldName]);\n        };\n        this.canRead = function (objOrRef) {\n            return utilities.isReference(objOrRef) ?\n                _this.has(objOrRef.__ref)\n                : typeof objOrRef === \"object\";\n        };\n        this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n            if (typeof objOrIdOrRef === \"string\") {\n                return utilities.makeReference(objOrIdOrRef);\n            }\n            if (utilities.isReference(objOrIdOrRef)) {\n                return objOrIdOrRef;\n            }\n            var id = _this.policies.identify(objOrIdOrRef)[0];\n            if (id) {\n                var ref = utilities.makeReference(id);\n                if (mergeIntoStore) {\n                    _this.merge(id, objOrIdOrRef);\n                }\n                return ref;\n            }\n        };\n    }\n    EntityStore.prototype.toObject = function () {\n        return tslib.__assign({}, this.data);\n    };\n    EntityStore.prototype.has = function (dataId) {\n        return this.lookup(dataId, true) !== void 0;\n    };\n    EntityStore.prototype.get = function (dataId, fieldName) {\n        this.group.depend(dataId, fieldName);\n        if (hasOwn.call(this.data, dataId)) {\n            var storeObject = this.data[dataId];\n            if (storeObject && hasOwn.call(storeObject, fieldName)) {\n                return storeObject[fieldName];\n            }\n        }\n        if (fieldName === \"__typename\" &&\n            hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n            return this.policies.rootTypenamesById[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.get(dataId, fieldName);\n        }\n    };\n    EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n        if (dependOnExistence)\n            this.group.depend(dataId, \"__exists\");\n        if (hasOwn.call(this.data, dataId)) {\n            return this.data[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.lookup(dataId, dependOnExistence);\n        }\n        if (this.policies.rootTypenamesById[dataId]) {\n            return Object.create(null);\n        }\n    };\n    EntityStore.prototype.merge = function (older, newer) {\n        var _this = this;\n        var dataId;\n        if (utilities.isReference(older))\n            older = older.__ref;\n        if (utilities.isReference(newer))\n            newer = newer.__ref;\n        var existing = typeof older === \"string\" ? this.lookup((dataId = older)) : older;\n        var incoming = typeof newer === \"string\" ? this.lookup((dataId = newer)) : newer;\n        if (!incoming)\n            return;\n        globals.invariant(typeof dataId === \"string\", 1);\n        var merged = new utilities.DeepMerger(storeObjectReconciler).merge(existing, incoming);\n        this.data[dataId] = merged;\n        if (merged !== existing) {\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                var fieldsToDirty_1 = Object.create(null);\n                if (!existing)\n                    fieldsToDirty_1.__exists = 1;\n                Object.keys(incoming).forEach(function (storeFieldName) {\n                    if (!existing ||\n                        existing[storeFieldName] !== merged[storeFieldName]) {\n                        fieldsToDirty_1[storeFieldName] = 1;\n                        var fieldName = fieldNameFromStoreName(storeFieldName);\n                        if (fieldName !== storeFieldName &&\n                            !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n                            fieldsToDirty_1[fieldName] = 1;\n                        }\n                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n                            delete merged[storeFieldName];\n                        }\n                    }\n                });\n                if (fieldsToDirty_1.__typename &&\n                    !(existing && existing.__typename) &&\n                    this.policies.rootTypenamesById[dataId] === merged.__typename) {\n                    delete fieldsToDirty_1.__typename;\n                }\n                Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n                    return _this.group.dirty(dataId, fieldName);\n                });\n            }\n        }\n    };\n    EntityStore.prototype.modify = function (dataId, fields) {\n        var _this = this;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var changedFields_1 = Object.create(null);\n            var needToMerge_1 = false;\n            var allDeleted_1 = true;\n            var sharedDetails_1 = {\n                DELETE: DELETE,\n                INVALIDATE: INVALIDATE,\n                isReference: utilities.isReference,\n                toReference: this.toReference,\n                canRead: this.canRead,\n                readField: function (fieldNameOrOptions, from) {\n                    return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ?\n                        {\n                            fieldName: fieldNameOrOptions,\n                            from: from || utilities.makeReference(dataId),\n                        }\n                        : fieldNameOrOptions, { store: _this });\n                },\n            };\n            Object.keys(storeObject).forEach(function (storeFieldName) {\n                var fieldName = fieldNameFromStoreName(storeFieldName);\n                var fieldValue = storeObject[storeFieldName];\n                if (fieldValue === void 0)\n                    return;\n                var modify = typeof fields === \"function\" ? fields : (fields[storeFieldName] || fields[fieldName]);\n                if (modify) {\n                    var newValue = modify === delModifier ? DELETE : (modify(utilities.maybeDeepFreeze(fieldValue), tslib.__assign(tslib.__assign({}, sharedDetails_1), { fieldName: fieldName, storeFieldName: storeFieldName, storage: _this.getStorage(dataId, storeFieldName) })));\n                    if (newValue === INVALIDATE) {\n                        _this.group.dirty(dataId, storeFieldName);\n                    }\n                    else {\n                        if (newValue === DELETE)\n                            newValue = void 0;\n                        if (newValue !== fieldValue) {\n                            changedFields_1[storeFieldName] = newValue;\n                            needToMerge_1 = true;\n                            fieldValue = newValue;\n                            if (globalThis.__DEV__ !== false) {\n                                var checkReference = function (ref) {\n                                    if (_this.lookup(ref.__ref) === undefined) {\n                                        globalThis.__DEV__ !== false && globals.invariant.warn(2, ref);\n                                        return true;\n                                    }\n                                };\n                                if (utilities.isReference(newValue)) {\n                                    checkReference(newValue);\n                                }\n                                else if (Array.isArray(newValue)) {\n                                    var seenReference = false;\n                                    var someNonReference = void 0;\n                                    for (var _i = 0, newValue_1 = newValue; _i < newValue_1.length; _i++) {\n                                        var value = newValue_1[_i];\n                                        if (utilities.isReference(value)) {\n                                            seenReference = true;\n                                            if (checkReference(value))\n                                                break;\n                                        }\n                                        else {\n                                            if (typeof value === \"object\" && !!value) {\n                                                var id = _this.policies.identify(value)[0];\n                                                if (id) {\n                                                    someNonReference = value;\n                                                }\n                                            }\n                                        }\n                                        if (seenReference && someNonReference !== undefined) {\n                                            globalThis.__DEV__ !== false && globals.invariant.warn(3, someNonReference);\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (fieldValue !== void 0) {\n                    allDeleted_1 = false;\n                }\n            });\n            if (needToMerge_1) {\n                this.merge(dataId, changedFields_1);\n                if (allDeleted_1) {\n                    if (this instanceof Layer) {\n                        this.data[dataId] = void 0;\n                    }\n                    else {\n                        delete this.data[dataId];\n                    }\n                    this.group.dirty(dataId, \"__exists\");\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    EntityStore.prototype.delete = function (dataId, fieldName, args) {\n        var _a;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var typename = this.getFieldValue(storeObject, \"__typename\");\n            var storeFieldName = fieldName && args ?\n                this.policies.getStoreFieldName({ typename: typename, fieldName: fieldName, args: args })\n                : fieldName;\n            return this.modify(dataId, storeFieldName ? (_a = {},\n                _a[storeFieldName] = delModifier,\n                _a) : delModifier);\n        }\n        return false;\n    };\n    EntityStore.prototype.evict = function (options, limit) {\n        var evicted = false;\n        if (options.id) {\n            if (hasOwn.call(this.data, options.id)) {\n                evicted = this.delete(options.id, options.fieldName, options.args);\n            }\n            if (this instanceof Layer && this !== limit) {\n                evicted = this.parent.evict(options, limit) || evicted;\n            }\n            if (options.fieldName || evicted) {\n                this.group.dirty(options.id, options.fieldName || \"__exists\");\n            }\n        }\n        return evicted;\n    };\n    EntityStore.prototype.clear = function () {\n        this.replace(null);\n    };\n    EntityStore.prototype.extract = function () {\n        var _this = this;\n        var obj = this.toObject();\n        var extraRootIds = [];\n        this.getRootIdSet().forEach(function (id) {\n            if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n                extraRootIds.push(id);\n            }\n        });\n        if (extraRootIds.length) {\n            obj.__META = { extraRootIds: extraRootIds.sort() };\n        }\n        return obj;\n    };\n    EntityStore.prototype.replace = function (newData) {\n        var _this = this;\n        Object.keys(this.data).forEach(function (dataId) {\n            if (!(newData && hasOwn.call(newData, dataId))) {\n                _this.delete(dataId);\n            }\n        });\n        if (newData) {\n            var __META = newData.__META, rest_1 = tslib.__rest(newData, [\"__META\"]);\n            Object.keys(rest_1).forEach(function (dataId) {\n                _this.merge(dataId, rest_1[dataId]);\n            });\n            if (__META) {\n                __META.extraRootIds.forEach(this.retain, this);\n            }\n        }\n    };\n    EntityStore.prototype.retain = function (rootId) {\n        return (this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1);\n    };\n    EntityStore.prototype.release = function (rootId) {\n        if (this.rootIds[rootId] > 0) {\n            var count = --this.rootIds[rootId];\n            if (!count)\n                delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    };\n    EntityStore.prototype.getRootIdSet = function (ids) {\n        if (ids === void 0) { ids = new Set(); }\n        Object.keys(this.rootIds).forEach(ids.add, ids);\n        if (this instanceof Layer) {\n            this.parent.getRootIdSet(ids);\n        }\n        else {\n            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n        }\n        return ids;\n    };\n    EntityStore.prototype.gc = function () {\n        var _this = this;\n        var ids = this.getRootIdSet();\n        var snapshot = this.toObject();\n        ids.forEach(function (id) {\n            if (hasOwn.call(snapshot, id)) {\n                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n                delete snapshot[id];\n            }\n        });\n        var idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            var root_1 = this;\n            while (root_1 instanceof Layer)\n                root_1 = root_1.parent;\n            idsToRemove.forEach(function (id) { return root_1.delete(id); });\n        }\n        return idsToRemove;\n    };\n    EntityStore.prototype.findChildRefIds = function (dataId) {\n        if (!hasOwn.call(this.refs, dataId)) {\n            var found_1 = (this.refs[dataId] = Object.create(null));\n            var root = this.data[dataId];\n            if (!root)\n                return found_1;\n            var workSet_1 = new Set([root]);\n            workSet_1.forEach(function (obj) {\n                if (utilities.isReference(obj)) {\n                    found_1[obj.__ref] = true;\n                }\n                if (utilities.isNonNullObject(obj)) {\n                    Object.keys(obj).forEach(function (key) {\n                        var child = obj[key];\n                        if (utilities.isNonNullObject(child)) {\n                            workSet_1.add(child);\n                        }\n                    });\n                }\n            });\n        }\n        return this.refs[dataId];\n    };\n    EntityStore.prototype.makeCacheKey = function () {\n        return this.group.keyMaker.lookupArray(arguments);\n    };\n    return EntityStore;\n}());\nvar CacheGroup =  (function () {\n    function CacheGroup(caching, parent) {\n        if (parent === void 0) { parent = null; }\n        this.caching = caching;\n        this.parent = parent;\n        this.d = null;\n        this.resetCaching();\n    }\n    CacheGroup.prototype.resetCaching = function () {\n        this.d = this.caching ? optimism.dep() : null;\n        this.keyMaker = new trie.Trie(utilities.canUseWeakMap);\n    };\n    CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName) {\n                this.d(makeDepKey(dataId, fieldName));\n            }\n            if (this.parent) {\n                this.parent.depend(dataId, storeFieldName);\n            }\n        }\n    };\n    CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(makeDepKey(dataId, storeFieldName),\n            storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n        }\n    };\n    return CacheGroup;\n}());\nfunction makeDepKey(dataId, storeFieldName) {\n    return storeFieldName + \"#\" + dataId;\n}\nfunction maybeDependOnExistenceOfEntity(store, entityId) {\n    if (supportsResultCaching(store)) {\n        store.group.depend(entityId, \"__exists\");\n    }\n}\n(function (EntityStore) {\n    var Root =  (function (_super) {\n        tslib.__extends(Root, _super);\n        function Root(_a) {\n            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;\n            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n            _this.stump = new Stump(_this);\n            _this.storageTrie = new trie.Trie(utilities.canUseWeakMap);\n            if (seed)\n                _this.replace(seed);\n            return _this;\n        }\n        Root.prototype.addLayer = function (layerId, replay) {\n            return this.stump.addLayer(layerId, replay);\n        };\n        Root.prototype.removeLayer = function () {\n            return this;\n        };\n        Root.prototype.getStorage = function () {\n            return this.storageTrie.lookupArray(arguments);\n        };\n        return Root;\n    }(EntityStore));\n    EntityStore.Root = Root;\n})(exports.EntityStore || (exports.EntityStore = {}));\nvar Layer =  (function (_super) {\n    tslib.__extends(Layer, _super);\n    function Layer(id, parent, replay, group) {\n        var _this = _super.call(this, parent.policies, group) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.replay = replay;\n        _this.group = group;\n        replay(_this);\n        return _this;\n    }\n    Layer.prototype.addLayer = function (layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    };\n    Layer.prototype.removeLayer = function (layerId) {\n        var _this = this;\n        var parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                Object.keys(this.data).forEach(function (dataId) {\n                    var ownStoreObject = _this.data[dataId];\n                    var parentStoreObject = parent[\"lookup\"](dataId);\n                    if (!parentStoreObject) {\n                        _this.delete(dataId);\n                    }\n                    else if (!ownStoreObject) {\n                        _this.group.dirty(dataId, \"__exists\");\n                        Object.keys(parentStoreObject).forEach(function (storeFieldName) {\n                            _this.group.dirty(dataId, storeFieldName);\n                        });\n                    }\n                    else if (ownStoreObject !== parentStoreObject) {\n                        Object.keys(ownStoreObject).forEach(function (storeFieldName) {\n                            if (!equality.equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                                _this.group.dirty(dataId, storeFieldName);\n                            }\n                        });\n                    }\n                });\n            }\n            return parent;\n        }\n        if (parent === this.parent)\n            return this;\n        return parent.addLayer(this.id, this.replay);\n    };\n    Layer.prototype.toObject = function () {\n        return tslib.__assign(tslib.__assign({}, this.parent.toObject()), this.data);\n    };\n    Layer.prototype.findChildRefIds = function (dataId) {\n        var fromParent = this.parent.findChildRefIds(dataId);\n        return hasOwn.call(this.data, dataId) ? tslib.__assign(tslib.__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n    };\n    Layer.prototype.getStorage = function () {\n        var p = this.parent;\n        while (p.parent)\n            p = p.parent;\n        return p.getStorage.apply(p,\n        arguments);\n    };\n    return Layer;\n}(exports.EntityStore));\nvar Stump =  (function (_super) {\n    tslib.__extends(Stump, _super);\n    function Stump(root) {\n        return _super.call(this, \"EntityStore.Stump\", root, function () { }, new CacheGroup(root.group.caching, root.group)) || this;\n    }\n    Stump.prototype.removeLayer = function () {\n        return this;\n    };\n    Stump.prototype.merge = function (older, newer) {\n        return this.parent.merge(older, newer);\n    };\n    return Stump;\n}(Layer));\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n    var existingValue = existingObject[property];\n    var incomingValue = incomingObject[property];\n    return equality.equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nfunction supportsResultCaching(store) {\n    return !!(store instanceof exports.EntityStore && store.group.caching);\n}\n\nfunction shallowCopy(value) {\n    if (utilities.isNonNullObject(value)) {\n        return utilities.isArray(value) ?\n            value.slice(0)\n            : tslib.__assign({ __proto__: Object.getPrototypeOf(value) }, value);\n    }\n    return value;\n}\nvar ObjectCanon =  (function () {\n    function ObjectCanon() {\n        this.known = new (utilities.canUseWeakSet ? WeakSet : Set)();\n        this.pool = new trie.Trie(utilities.canUseWeakMap);\n        this.passes = new WeakMap();\n        this.keysByJSON = new Map();\n        this.empty = this.admit({});\n    }\n    ObjectCanon.prototype.isKnown = function (value) {\n        return utilities.isNonNullObject(value) && this.known.has(value);\n    };\n    ObjectCanon.prototype.pass = function (value) {\n        if (utilities.isNonNullObject(value)) {\n            var copy = shallowCopy(value);\n            this.passes.set(copy, value);\n            return copy;\n        }\n        return value;\n    };\n    ObjectCanon.prototype.admit = function (value) {\n        var _this = this;\n        if (utilities.isNonNullObject(value)) {\n            var original = this.passes.get(value);\n            if (original)\n                return original;\n            var proto = Object.getPrototypeOf(value);\n            switch (proto) {\n                case Array.prototype: {\n                    if (this.known.has(value))\n                        return value;\n                    var array = value.map(this.admit, this);\n                    var node = this.pool.lookupArray(array);\n                    if (!node.array) {\n                        this.known.add((node.array = array));\n                        if (globalThis.__DEV__ !== false) {\n                            Object.freeze(array);\n                        }\n                    }\n                    return node.array;\n                }\n                case null:\n                case Object.prototype: {\n                    if (this.known.has(value))\n                        return value;\n                    var proto_1 = Object.getPrototypeOf(value);\n                    var array_1 = [proto_1];\n                    var keys = this.sortedKeys(value);\n                    array_1.push(keys.json);\n                    var firstValueIndex_1 = array_1.length;\n                    keys.sorted.forEach(function (key) {\n                        array_1.push(_this.admit(value[key]));\n                    });\n                    var node = this.pool.lookupArray(array_1);\n                    if (!node.object) {\n                        var obj_1 = (node.object = Object.create(proto_1));\n                        this.known.add(obj_1);\n                        keys.sorted.forEach(function (key, i) {\n                            obj_1[key] = array_1[firstValueIndex_1 + i];\n                        });\n                        if (globalThis.__DEV__ !== false) {\n                            Object.freeze(obj_1);\n                        }\n                    }\n                    return node.object;\n                }\n            }\n        }\n        return value;\n    };\n    ObjectCanon.prototype.sortedKeys = function (obj) {\n        var keys = Object.keys(obj);\n        var node = this.pool.lookupArray(keys);\n        if (!node.keys) {\n            keys.sort();\n            var json = JSON.stringify(keys);\n            if (!(node.keys = this.keysByJSON.get(json))) {\n                this.keysByJSON.set(json, (node.keys = { sorted: keys, json: json }));\n            }\n        }\n        return node.keys;\n    };\n    return ObjectCanon;\n}());\n\nfunction execSelectionSetKeyArgs(options) {\n    return [\n        options.selectionSet,\n        options.objectOrReference,\n        options.context,\n        options.context.canonizeResults,\n    ];\n}\nvar StoreReader =  (function () {\n    function StoreReader(config) {\n        var _this = this;\n        this.knownResults = new (utilities.canUseWeakMap ? WeakMap : Map)();\n        this.config = utilities.compact(config, {\n            addTypename: config.addTypename !== false,\n            canonizeResults: shouldCanonizeResults(config),\n        });\n        this.canon = config.canon || new ObjectCanon();\n        this.executeSelectionSet = optimism.wrap(function (options) {\n            var _a;\n            var canonizeResults = options.context.canonizeResults;\n            var peekArgs = execSelectionSetKeyArgs(options);\n            peekArgs[3] = !canonizeResults;\n            var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n            if (other) {\n                if (canonizeResults) {\n                    return tslib.__assign(tslib.__assign({}, other), {\n                        result: _this.canon.admit(other.result) });\n                }\n                return other;\n            }\n            maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n            return _this.execSelectionSetImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize ||\n                utilities.cacheSizes[\"inMemoryCache.executeSelectionSet\"] ||\n                50000 ,\n            keyArgs: execSelectionSetKeyArgs,\n            makeCacheKey: function (selectionSet, parent, context, canonizeResults) {\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(selectionSet, utilities.isReference(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n                }\n            },\n        });\n        this.executeSubSelectedArray = optimism.wrap(function (options) {\n            maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n            return _this.execSubSelectedArrayImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize ||\n                utilities.cacheSizes[\"inMemoryCache.executeSubSelectedArray\"] ||\n                10000 ,\n            makeCacheKey: function (_a) {\n                var field = _a.field, array = _a.array, context = _a.context;\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(field, array, context.varString);\n                }\n            },\n        });\n    }\n    StoreReader.prototype.resetCanon = function () {\n        this.canon = new ObjectCanon();\n    };\n    StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? \"ROOT_QUERY\" : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c, _d = _a.canonizeResults, canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n        var policies = this.config.cache.policies;\n        variables = tslib.__assign(tslib.__assign({}, utilities.getDefaultValues(utilities.getQueryDefinition(query))), variables);\n        var rootRef = utilities.makeReference(rootId);\n        var execResult = this.executeSelectionSet({\n            selectionSet: utilities.getMainDefinition(query).selectionSet,\n            objectOrReference: rootRef,\n            enclosingRef: rootRef,\n            context: tslib.__assign({ store: store, query: query, policies: policies, variables: variables, varString: utilities.canonicalStringify(variables), canonizeResults: canonizeResults }, extractFragmentContext(query, this.config.fragments)),\n        });\n        var missing;\n        if (execResult.missing) {\n            missing = [\n                new MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables),\n            ];\n            if (!returnPartialData) {\n                throw missing[0];\n            }\n        }\n        return {\n            result: execResult.result,\n            complete: !missing,\n            missing: missing,\n        };\n    };\n    StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {\n        if (supportsResultCaching(context.store) &&\n            this.knownResults.get(result) === selectionSet) {\n            var latest = this.executeSelectionSet.peek(selectionSet, parent, context,\n            this.canon.isKnown(result));\n            if (latest && result === latest.result) {\n                return true;\n            }\n        }\n        return false;\n    };\n    StoreReader.prototype.execSelectionSetImpl = function (_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, enclosingRef = _a.enclosingRef, context = _a.context;\n        if (utilities.isReference(objectOrReference) &&\n            !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n            !context.store.has(objectOrReference.__ref)) {\n            return {\n                result: this.canon.empty,\n                missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\"),\n            };\n        }\n        var variables = context.variables, policies = context.policies, store = context.store;\n        var typename = store.getFieldValue(objectOrReference, \"__typename\");\n        var objectsToMerge = [];\n        var missing;\n        var missingMerger = new utilities.DeepMerger();\n        if (this.config.addTypename &&\n            typeof typename === \"string\" &&\n            !policies.rootIdsByTypename[typename]) {\n            objectsToMerge.push({ __typename: typename });\n        }\n        function handleMissing(result, resultName) {\n            var _a;\n            if (result.missing) {\n                missing = missingMerger.merge(missing, (_a = {},\n                    _a[resultName] = result.missing,\n                    _a));\n            }\n            return result.result;\n        }\n        var workSet = new Set(selectionSet.selections);\n        workSet.forEach(function (selection) {\n            var _a, _b;\n            if (!utilities.shouldInclude(selection, variables))\n                return;\n            if (utilities.isField(selection)) {\n                var fieldValue = policies.readField({\n                    fieldName: selection.name.value,\n                    field: selection,\n                    variables: context.variables,\n                    from: objectOrReference,\n                }, context);\n                var resultName = utilities.resultKeyNameFromField(selection);\n                if (fieldValue === void 0) {\n                    if (!utilities.addTypenameToDocument.added(selection)) {\n                        missing = missingMerger.merge(missing, (_a = {},\n                            _a[resultName] = \"Can't find field '\".concat(selection.name.value, \"' on \").concat(utilities.isReference(objectOrReference) ?\n                                objectOrReference.__ref + \" object\"\n                                : \"object \" + JSON.stringify(objectOrReference, null, 2)),\n                            _a));\n                    }\n                }\n                else if (utilities.isArray(fieldValue)) {\n                    fieldValue = handleMissing(_this.executeSubSelectedArray({\n                        field: selection,\n                        array: fieldValue,\n                        enclosingRef: enclosingRef,\n                        context: context,\n                    }), resultName);\n                }\n                else if (!selection.selectionSet) {\n                    if (context.canonizeResults) {\n                        fieldValue = _this.canon.pass(fieldValue);\n                    }\n                }\n                else if (fieldValue != null) {\n                    fieldValue = handleMissing(_this.executeSelectionSet({\n                        selectionSet: selection.selectionSet,\n                        objectOrReference: fieldValue,\n                        enclosingRef: utilities.isReference(fieldValue) ? fieldValue : enclosingRef,\n                        context: context,\n                    }), resultName);\n                }\n                if (fieldValue !== void 0) {\n                    objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));\n                }\n            }\n            else {\n                var fragment = utilities.getFragmentFromSelection(selection, context.lookupFragment);\n                if (!fragment && selection.kind === graphql.Kind.FRAGMENT_SPREAD) {\n                    throw globals.newInvariantError(9, selection.name.value);\n                }\n                if (fragment && policies.fragmentMatches(fragment, typename)) {\n                    fragment.selectionSet.selections.forEach(workSet.add, workSet);\n                }\n            }\n        });\n        var result = utilities.mergeDeepArray(objectsToMerge);\n        var finalResult = { result: result, missing: missing };\n        var frozen = context.canonizeResults ?\n            this.canon.admit(finalResult)\n            : utilities.maybeDeepFreeze(finalResult);\n        if (frozen.result) {\n            this.knownResults.set(frozen.result, selectionSet);\n        }\n        return frozen;\n    };\n    StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, enclosingRef = _a.enclosingRef, context = _a.context;\n        var missing;\n        var missingMerger = new utilities.DeepMerger();\n        function handleMissing(childResult, i) {\n            var _a;\n            if (childResult.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));\n            }\n            return childResult.result;\n        }\n        if (field.selectionSet) {\n            array = array.filter(context.store.canRead);\n        }\n        array = array.map(function (item, i) {\n            if (item === null) {\n                return null;\n            }\n            if (utilities.isArray(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    enclosingRef: enclosingRef,\n                    context: context,\n                }), i);\n            }\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    objectOrReference: item,\n                    enclosingRef: utilities.isReference(item) ? item : enclosingRef,\n                    context: context,\n                }), i);\n            }\n            if (globalThis.__DEV__ !== false) {\n                assertSelectionSetForIdValue(context.store, field, item);\n            }\n            return item;\n        });\n        return {\n            result: context.canonizeResults ? this.canon.admit(array) : array,\n            missing: missing,\n        };\n    };\n    return StoreReader;\n}());\nfunction firstMissing(tree) {\n    try {\n        JSON.stringify(tree, function (_, value) {\n            if (typeof value === \"string\")\n                throw value;\n            return value;\n        });\n    }\n    catch (result) {\n        return result;\n    }\n}\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n    if (!field.selectionSet) {\n        var workSet_1 = new Set([fieldValue]);\n        workSet_1.forEach(function (value) {\n            if (utilities.isNonNullObject(value)) {\n                globals.invariant(\n                    !utilities.isReference(value),\n                    10,\n                    getTypenameFromStoreObject(store, value),\n                    field.name.value\n                );\n                Object.values(value).forEach(workSet_1.add, workSet_1);\n            }\n        });\n    }\n}\n\nvar cacheSlot = new optimism.Slot();\nvar cacheInfoMap = new WeakMap();\nfunction getCacheInfo(cache) {\n    var info = cacheInfoMap.get(cache);\n    if (!info) {\n        cacheInfoMap.set(cache, (info = {\n            vars: new Set(),\n            dep: optimism.dep(),\n        }));\n    }\n    return info;\n}\nfunction forgetCache(cache) {\n    getCacheInfo(cache).vars.forEach(function (rv) { return rv.forgetCache(cache); });\n}\nfunction recallCache(cache) {\n    getCacheInfo(cache).vars.forEach(function (rv) { return rv.attachCache(cache); });\n}\nfunction makeVar(value) {\n    var caches = new Set();\n    var listeners = new Set();\n    var rv = function (newValue) {\n        if (arguments.length > 0) {\n            if (value !== newValue) {\n                value = newValue;\n                caches.forEach(function (cache) {\n                    getCacheInfo(cache).dep.dirty(rv);\n                    broadcast(cache);\n                });\n                var oldListeners = Array.from(listeners);\n                listeners.clear();\n                oldListeners.forEach(function (listener) { return listener(value); });\n            }\n        }\n        else {\n            var cache = cacheSlot.getValue();\n            if (cache) {\n                attach(cache);\n                getCacheInfo(cache).dep(rv);\n            }\n        }\n        return value;\n    };\n    rv.onNextChange = function (listener) {\n        listeners.add(listener);\n        return function () {\n            listeners.delete(listener);\n        };\n    };\n    var attach = (rv.attachCache = function (cache) {\n        caches.add(cache);\n        getCacheInfo(cache).vars.add(rv);\n        return rv;\n    });\n    rv.forgetCache = function (cache) { return caches.delete(cache); };\n    return rv;\n}\nfunction broadcast(cache) {\n    if (cache.broadcastWatches) {\n        cache.broadcastWatches();\n    }\n}\n\nvar specifierInfoCache = Object.create(null);\nfunction lookupSpecifierInfo(spec) {\n    var cacheKey = JSON.stringify(spec);\n    return (specifierInfoCache[cacheKey] ||\n        (specifierInfoCache[cacheKey] = Object.create(null)));\n}\nfunction keyFieldsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return (info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {\n            var extract = function (from, key) {\n                return context.readField(key, from);\n            };\n            var keyObject = (context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {\n                var extracted = extractKeyPath(context.storeObject, schemaKeyPath,\n                extract);\n                if (extracted === void 0 &&\n                    object !== context.storeObject &&\n                    hasOwn.call(object, schemaKeyPath[0])) {\n                    extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n                }\n                globals.invariant(extracted !== void 0, 4, schemaKeyPath.join(\".\"), object);\n                return extracted;\n            }));\n            return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n        }));\n}\nfunction keyArgsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return (info.keyArgsFn ||\n        (info.keyArgsFn = function (args, _a) {\n            var field = _a.field, variables = _a.variables, fieldName = _a.fieldName;\n            var collected = collectSpecifierPaths(specifier, function (keyPath) {\n                var firstKey = keyPath[0];\n                var firstChar = firstKey.charAt(0);\n                if (firstChar === \"@\") {\n                    if (field && utilities.isNonEmptyArray(field.directives)) {\n                        var directiveName_1 = firstKey.slice(1);\n                        var d = field.directives.find(function (d) { return d.name.value === directiveName_1; });\n                        var directiveArgs = d && utilities.argumentsObjectFromField(d, variables);\n                        return (directiveArgs &&\n                            extractKeyPath(directiveArgs,\n                            keyPath.slice(1)));\n                    }\n                    return;\n                }\n                if (firstChar === \"$\") {\n                    var variableName = firstKey.slice(1);\n                    if (variables && hasOwn.call(variables, variableName)) {\n                        var varKeyPath = keyPath.slice(0);\n                        varKeyPath[0] = variableName;\n                        return extractKeyPath(variables, varKeyPath);\n                    }\n                    return;\n                }\n                if (args) {\n                    return extractKeyPath(args, keyPath);\n                }\n            });\n            var suffix = JSON.stringify(collected);\n            if (args || suffix !== \"{}\") {\n                fieldName += \":\" + suffix;\n            }\n            return fieldName;\n        }));\n}\nfunction collectSpecifierPaths(specifier, extractor) {\n    var merger = new utilities.DeepMerger();\n    return getSpecifierPaths(specifier).reduce(function (collected, path) {\n        var _a;\n        var toMerge = extractor(path);\n        if (toMerge !== void 0) {\n            for (var i = path.length - 1; i >= 0; --i) {\n                toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n            }\n            collected = merger.merge(collected, toMerge);\n        }\n        return collected;\n    }, Object.create(null));\n}\nfunction getSpecifierPaths(spec) {\n    var info = lookupSpecifierInfo(spec);\n    if (!info.paths) {\n        var paths_1 = (info.paths = []);\n        var currentPath_1 = [];\n        spec.forEach(function (s, i) {\n            if (utilities.isArray(s)) {\n                getSpecifierPaths(s).forEach(function (p) { return paths_1.push(currentPath_1.concat(p)); });\n                currentPath_1.length = 0;\n            }\n            else {\n                currentPath_1.push(s);\n                if (!utilities.isArray(spec[i + 1])) {\n                    paths_1.push(currentPath_1.slice(0));\n                    currentPath_1.length = 0;\n                }\n            }\n        });\n    }\n    return info.paths;\n}\nfunction extractKey(object, key) {\n    return object[key];\n}\nfunction extractKeyPath(object, path, extract) {\n    extract = extract || extractKey;\n    return normalize(path.reduce(function reducer(obj, key) {\n        return utilities.isArray(obj) ?\n            obj.map(function (child) { return reducer(child, key); })\n            : obj && extract(obj, key);\n    }, object));\n}\nfunction normalize(value) {\n    if (utilities.isNonNullObject(value)) {\n        if (utilities.isArray(value)) {\n            return value.map(normalize);\n        }\n        return collectSpecifierPaths(Object.keys(value).sort(), function (path) {\n            return extractKeyPath(value, path);\n        });\n    }\n    return value;\n}\n\nfunction argsFromFieldSpecifier(spec) {\n    return (spec.args !== void 0 ? spec.args\n        : spec.field ? utilities.argumentsObjectFromField(spec.field, spec.variables)\n            : null);\n}\nvar nullKeyFieldsFn = function () { return void 0; };\nvar simpleKeyArgsFn = function (_args, context) { return context.fieldName; };\nvar mergeTrueFn = function (existing, incoming, _a) {\n    var mergeObjects = _a.mergeObjects;\n    return mergeObjects(existing, incoming);\n};\nvar mergeFalseFn = function (_, incoming) { return incoming; };\nvar Policies =  (function () {\n    function Policies(config) {\n        this.config = config;\n        this.typePolicies = Object.create(null);\n        this.toBeAdded = Object.create(null);\n        this.supertypeMap = new Map();\n        this.fuzzySubtypes = new Map();\n        this.rootIdsByTypename = Object.create(null);\n        this.rootTypenamesById = Object.create(null);\n        this.usingPossibleTypes = false;\n        this.config = tslib.__assign({ dataIdFromObject: defaultDataIdFromObject }, config);\n        this.cache = this.config.cache;\n        this.setRootTypename(\"Query\");\n        this.setRootTypename(\"Mutation\");\n        this.setRootTypename(\"Subscription\");\n        if (config.possibleTypes) {\n            this.addPossibleTypes(config.possibleTypes);\n        }\n        if (config.typePolicies) {\n            this.addTypePolicies(config.typePolicies);\n        }\n    }\n    Policies.prototype.identify = function (object, partialContext) {\n        var _a;\n        var policies = this;\n        var typename = (partialContext &&\n            (partialContext.typename || ((_a = partialContext.storeObject) === null || _a === void 0 ? void 0 : _a.__typename))) ||\n            object.__typename;\n        if (typename === this.rootTypenamesById.ROOT_QUERY) {\n            return [\"ROOT_QUERY\"];\n        }\n        var storeObject = (partialContext && partialContext.storeObject) || object;\n        var context = tslib.__assign(tslib.__assign({}, partialContext), { typename: typename, storeObject: storeObject, readField: (partialContext && partialContext.readField) ||\n                function () {\n                    var options = normalizeReadFieldOptions(arguments, storeObject);\n                    return policies.readField(options, {\n                        store: policies.cache[\"data\"],\n                        variables: options.variables,\n                    });\n                } });\n        var id;\n        var policy = typename && this.getTypePolicy(typename);\n        var keyFn = (policy && policy.keyFn) || this.config.dataIdFromObject;\n        while (keyFn) {\n            var specifierOrId = keyFn(tslib.__assign(tslib.__assign({}, object), storeObject), context);\n            if (utilities.isArray(specifierOrId)) {\n                keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n            }\n            else {\n                id = specifierOrId;\n                break;\n            }\n        }\n        id = id ? String(id) : void 0;\n        return context.keyObject ? [id, context.keyObject] : [id];\n    };\n    Policies.prototype.addTypePolicies = function (typePolicies) {\n        var _this = this;\n        Object.keys(typePolicies).forEach(function (typename) {\n            var _a = typePolicies[typename], queryType = _a.queryType, mutationType = _a.mutationType, subscriptionType = _a.subscriptionType, incoming = tslib.__rest(_a, [\"queryType\", \"mutationType\", \"subscriptionType\"]);\n            if (queryType)\n                _this.setRootTypename(\"Query\", typename);\n            if (mutationType)\n                _this.setRootTypename(\"Mutation\", typename);\n            if (subscriptionType)\n                _this.setRootTypename(\"Subscription\", typename);\n            if (hasOwn.call(_this.toBeAdded, typename)) {\n                _this.toBeAdded[typename].push(incoming);\n            }\n            else {\n                _this.toBeAdded[typename] = [incoming];\n            }\n        });\n    };\n    Policies.prototype.updateTypePolicy = function (typename, incoming) {\n        var _this = this;\n        var existing = this.getTypePolicy(typename);\n        var keyFields = incoming.keyFields, fields = incoming.fields;\n        function setMerge(existing, merge) {\n            existing.merge =\n                typeof merge === \"function\" ? merge\n                    : merge === true ? mergeTrueFn\n                        : merge === false ? mergeFalseFn\n                            : existing.merge;\n        }\n        setMerge(existing, incoming.merge);\n        existing.keyFn =\n            keyFields === false ? nullKeyFieldsFn\n                : utilities.isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields)\n                    : typeof keyFields === \"function\" ? keyFields\n                        : existing.keyFn;\n        if (fields) {\n            Object.keys(fields).forEach(function (fieldName) {\n                var existing = _this.getFieldPolicy(typename, fieldName, true);\n                var incoming = fields[fieldName];\n                if (typeof incoming === \"function\") {\n                    existing.read = incoming;\n                }\n                else {\n                    var keyArgs = incoming.keyArgs, read = incoming.read, merge = incoming.merge;\n                    existing.keyFn =\n                        keyArgs === false ? simpleKeyArgsFn\n                            : utilities.isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs)\n                                : typeof keyArgs === \"function\" ? keyArgs\n                                    : existing.keyFn;\n                    if (typeof read === \"function\") {\n                        existing.read = read;\n                    }\n                    setMerge(existing, merge);\n                }\n                if (existing.read && existing.merge) {\n                    existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n                }\n            });\n        }\n    };\n    Policies.prototype.setRootTypename = function (which, typename) {\n        if (typename === void 0) { typename = which; }\n        var rootId = \"ROOT_\" + which.toUpperCase();\n        var old = this.rootTypenamesById[rootId];\n        if (typename !== old) {\n            globals.invariant(!old || old === which, 5, which);\n            if (old)\n                delete this.rootIdsByTypename[old];\n            this.rootIdsByTypename[typename] = rootId;\n            this.rootTypenamesById[rootId] = typename;\n        }\n    };\n    Policies.prototype.addPossibleTypes = function (possibleTypes) {\n        var _this = this;\n        this.usingPossibleTypes = true;\n        Object.keys(possibleTypes).forEach(function (supertype) {\n            _this.getSupertypeSet(supertype, true);\n            possibleTypes[supertype].forEach(function (subtype) {\n                _this.getSupertypeSet(subtype, true).add(supertype);\n                var match = subtype.match(TypeOrFieldNameRegExp);\n                if (!match || match[0] !== subtype) {\n                    _this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n                }\n            });\n        });\n    };\n    Policies.prototype.getTypePolicy = function (typename) {\n        var _this = this;\n        if (!hasOwn.call(this.typePolicies, typename)) {\n            var policy_1 = (this.typePolicies[typename] = Object.create(null));\n            policy_1.fields = Object.create(null);\n            var supertypes_1 = this.supertypeMap.get(typename);\n            if (!supertypes_1 && this.fuzzySubtypes.size) {\n                supertypes_1 = this.getSupertypeSet(typename, true);\n                this.fuzzySubtypes.forEach(function (regExp, fuzzy) {\n                    if (regExp.test(typename)) {\n                        var fuzzySupertypes = _this.supertypeMap.get(fuzzy);\n                        if (fuzzySupertypes) {\n                            fuzzySupertypes.forEach(function (supertype) {\n                                return supertypes_1.add(supertype);\n                            });\n                        }\n                    }\n                });\n            }\n            if (supertypes_1 && supertypes_1.size) {\n                supertypes_1.forEach(function (supertype) {\n                    var _a = _this.getTypePolicy(supertype), fields = _a.fields, rest = tslib.__rest(_a, [\"fields\"]);\n                    Object.assign(policy_1, rest);\n                    Object.assign(policy_1.fields, fields);\n                });\n            }\n        }\n        var inbox = this.toBeAdded[typename];\n        if (inbox && inbox.length) {\n            inbox.splice(0).forEach(function (policy) {\n                _this.updateTypePolicy(typename, policy);\n            });\n        }\n        return this.typePolicies[typename];\n    };\n    Policies.prototype.getFieldPolicy = function (typename, fieldName, createIfMissing) {\n        if (typename) {\n            var fieldPolicies = this.getTypePolicy(typename).fields;\n            return (fieldPolicies[fieldName] ||\n                (createIfMissing && (fieldPolicies[fieldName] = Object.create(null))));\n        }\n    };\n    Policies.prototype.getSupertypeSet = function (subtype, createIfMissing) {\n        var supertypeSet = this.supertypeMap.get(subtype);\n        if (!supertypeSet && createIfMissing) {\n            this.supertypeMap.set(subtype, (supertypeSet = new Set()));\n        }\n        return supertypeSet;\n    };\n    Policies.prototype.fragmentMatches = function (fragment, typename, result, variables) {\n        var _this = this;\n        if (!fragment.typeCondition)\n            return true;\n        if (!typename)\n            return false;\n        var supertype = fragment.typeCondition.name.value;\n        if (typename === supertype)\n            return true;\n        if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n            var typenameSupertypeSet = this.getSupertypeSet(typename, true);\n            var workQueue_1 = [typenameSupertypeSet];\n            var maybeEnqueue_1 = function (subtype) {\n                var supertypeSet = _this.getSupertypeSet(subtype, false);\n                if (supertypeSet &&\n                    supertypeSet.size &&\n                    workQueue_1.indexOf(supertypeSet) < 0) {\n                    workQueue_1.push(supertypeSet);\n                }\n            };\n            var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n            var checkingFuzzySubtypes = false;\n            for (var i = 0; i < workQueue_1.length; ++i) {\n                var supertypeSet = workQueue_1[i];\n                if (supertypeSet.has(supertype)) {\n                    if (!typenameSupertypeSet.has(supertype)) {\n                        if (checkingFuzzySubtypes) {\n                            globalThis.__DEV__ !== false && globals.invariant.warn(6, typename, supertype);\n                        }\n                        typenameSupertypeSet.add(supertype);\n                    }\n                    return true;\n                }\n                supertypeSet.forEach(maybeEnqueue_1);\n                if (needToCheckFuzzySubtypes &&\n                    i === workQueue_1.length - 1 &&\n                    selectionSetMatchesResult(fragment.selectionSet, result, variables)) {\n                    needToCheckFuzzySubtypes = false;\n                    checkingFuzzySubtypes = true;\n                    this.fuzzySubtypes.forEach(function (regExp, fuzzyString) {\n                        var match = typename.match(regExp);\n                        if (match && match[0] === typename) {\n                            maybeEnqueue_1(fuzzyString);\n                        }\n                    });\n                }\n            }\n        }\n        return false;\n    };\n    Policies.prototype.hasKeyArgs = function (typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        return !!(policy && policy.keyFn);\n    };\n    Policies.prototype.getStoreFieldName = function (fieldSpec) {\n        var typename = fieldSpec.typename, fieldName = fieldSpec.fieldName;\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        var storeFieldName;\n        var keyFn = policy && policy.keyFn;\n        if (keyFn && typename) {\n            var context = {\n                typename: typename,\n                fieldName: fieldName,\n                field: fieldSpec.field || null,\n                variables: fieldSpec.variables,\n            };\n            var args = argsFromFieldSpecifier(fieldSpec);\n            while (keyFn) {\n                var specifierOrString = keyFn(args, context);\n                if (utilities.isArray(specifierOrString)) {\n                    keyFn = keyArgsFnFromSpecifier(specifierOrString);\n                }\n                else {\n                    storeFieldName = specifierOrString || fieldName;\n                    break;\n                }\n            }\n        }\n        if (storeFieldName === void 0) {\n            storeFieldName =\n                fieldSpec.field ?\n                    utilities.storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)\n                    : utilities.getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n        }\n        if (storeFieldName === false) {\n            return fieldName;\n        }\n        return fieldName === fieldNameFromStoreName(storeFieldName) ? storeFieldName\n            : fieldName + \":\" + storeFieldName;\n    };\n    Policies.prototype.readField = function (options, context) {\n        var objectOrReference = options.from;\n        if (!objectOrReference)\n            return;\n        var nameOrField = options.field || options.fieldName;\n        if (!nameOrField)\n            return;\n        if (options.typename === void 0) {\n            var typename = context.store.getFieldValue(objectOrReference, \"__typename\");\n            if (typename)\n                options.typename = typename;\n        }\n        var storeFieldName = this.getStoreFieldName(options);\n        var fieldName = fieldNameFromStoreName(storeFieldName);\n        var existing = context.store.getFieldValue(objectOrReference, storeFieldName);\n        var policy = this.getFieldPolicy(options.typename, fieldName, false);\n        var read = policy && policy.read;\n        if (read) {\n            var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage(utilities.isReference(objectOrReference) ?\n                objectOrReference.__ref\n                : objectOrReference, storeFieldName));\n            return cacheSlot.withValue(this.cache, read, [\n                existing,\n                readOptions,\n            ]);\n        }\n        return existing;\n    };\n    Policies.prototype.getReadFunction = function (typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        return policy && policy.read;\n    };\n    Policies.prototype.getMergeFunction = function (parentTypename, fieldName, childTypename) {\n        var policy = this.getFieldPolicy(parentTypename, fieldName, false);\n        var merge = policy && policy.merge;\n        if (!merge && childTypename) {\n            policy = this.getTypePolicy(childTypename);\n            merge = policy && policy.merge;\n        }\n        return merge;\n    };\n    Policies.prototype.runMergeFunction = function (existing, incoming, _a, context, storage) {\n        var field = _a.field, typename = _a.typename, merge = _a.merge;\n        if (merge === mergeTrueFn) {\n            return makeMergeObjectsFunction(context.store)(existing, incoming);\n        }\n        if (merge === mergeFalseFn) {\n            return incoming;\n        }\n        if (context.overwrite) {\n            existing = void 0;\n        }\n        return merge(existing, incoming, makeFieldFunctionOptions(this,\n        void 0, {\n            typename: typename,\n            fieldName: field.name.value,\n            field: field,\n            variables: context.variables,\n        }, context, storage || Object.create(null)));\n    };\n    return Policies;\n}());\nfunction makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {\n    var storeFieldName = policies.getStoreFieldName(fieldSpec);\n    var fieldName = fieldNameFromStoreName(storeFieldName);\n    var variables = fieldSpec.variables || context.variables;\n    var _a = context.store, toReference = _a.toReference, canRead = _a.canRead;\n    return {\n        args: argsFromFieldSpecifier(fieldSpec),\n        field: fieldSpec.field || null,\n        fieldName: fieldName,\n        storeFieldName: storeFieldName,\n        variables: variables,\n        isReference: utilities.isReference,\n        toReference: toReference,\n        storage: storage,\n        cache: policies.cache,\n        canRead: canRead,\n        readField: function () {\n            return policies.readField(normalizeReadFieldOptions(arguments, objectOrReference, variables), context);\n        },\n        mergeObjects: makeMergeObjectsFunction(context.store),\n    };\n}\nfunction normalizeReadFieldOptions(readFieldArgs, objectOrReference, variables) {\n    var fieldNameOrOptions = readFieldArgs[0], from = readFieldArgs[1], argc = readFieldArgs.length;\n    var options;\n    if (typeof fieldNameOrOptions === \"string\") {\n        options = {\n            fieldName: fieldNameOrOptions,\n            from: argc > 1 ? from : objectOrReference,\n        };\n    }\n    else {\n        options = tslib.__assign({}, fieldNameOrOptions);\n        if (!hasOwn.call(options, \"from\")) {\n            options.from = objectOrReference;\n        }\n    }\n    if (globalThis.__DEV__ !== false && options.from === void 0) {\n        globalThis.__DEV__ !== false && globals.invariant.warn(7, utilities.stringifyForDisplay(Array.from(readFieldArgs)));\n    }\n    if (void 0 === options.variables) {\n        options.variables = variables;\n    }\n    return options;\n}\nfunction makeMergeObjectsFunction(store) {\n    return function mergeObjects(existing, incoming) {\n        if (utilities.isArray(existing) || utilities.isArray(incoming)) {\n            throw globals.newInvariantError(8);\n        }\n        if (utilities.isNonNullObject(existing) && utilities.isNonNullObject(incoming)) {\n            var eType = store.getFieldValue(existing, \"__typename\");\n            var iType = store.getFieldValue(incoming, \"__typename\");\n            var typesDiffer = eType && iType && eType !== iType;\n            if (typesDiffer) {\n                return incoming;\n            }\n            if (utilities.isReference(existing) && storeValueIsStoreObject(incoming)) {\n                store.merge(existing.__ref, incoming);\n                return existing;\n            }\n            if (storeValueIsStoreObject(existing) && utilities.isReference(incoming)) {\n                store.merge(existing, incoming.__ref);\n                return incoming;\n            }\n            if (storeValueIsStoreObject(existing) &&\n                storeValueIsStoreObject(incoming)) {\n                return tslib.__assign(tslib.__assign({}, existing), incoming);\n            }\n        }\n        return incoming;\n    };\n}\n\nfunction getContextFlavor(context, clientOnly, deferred) {\n    var key = \"\".concat(clientOnly).concat(deferred);\n    var flavored = context.flavors.get(key);\n    if (!flavored) {\n        context.flavors.set(key, (flavored =\n            context.clientOnly === clientOnly && context.deferred === deferred ?\n                context\n                : tslib.__assign(tslib.__assign({}, context), { clientOnly: clientOnly, deferred: deferred })));\n    }\n    return flavored;\n}\nvar StoreWriter =  (function () {\n    function StoreWriter(cache, reader, fragments) {\n        this.cache = cache;\n        this.reader = reader;\n        this.fragments = fragments;\n    }\n    StoreWriter.prototype.writeToStore = function (store, _a) {\n        var _this = this;\n        var query = _a.query, result = _a.result, dataId = _a.dataId, variables = _a.variables, overwrite = _a.overwrite;\n        var operationDefinition = utilities.getOperationDefinition(query);\n        var merger = makeProcessedFieldsMerger();\n        variables = tslib.__assign(tslib.__assign({}, utilities.getDefaultValues(operationDefinition)), variables);\n        var context = tslib.__assign(tslib.__assign({ store: store, written: Object.create(null), merge: function (existing, incoming) {\n                return merger.merge(existing, incoming);\n            }, variables: variables, varString: utilities.canonicalStringify(variables) }, extractFragmentContext(query, this.fragments)), { overwrite: !!overwrite, incomingById: new Map(), clientOnly: false, deferred: false, flavors: new Map() });\n        var ref = this.processSelectionSet({\n            result: result || Object.create(null),\n            dataId: dataId,\n            selectionSet: operationDefinition.selectionSet,\n            mergeTree: { map: new Map() },\n            context: context,\n        });\n        if (!utilities.isReference(ref)) {\n            throw globals.newInvariantError(11, result);\n        }\n        context.incomingById.forEach(function (_a, dataId) {\n            var storeObject = _a.storeObject, mergeTree = _a.mergeTree, fieldNodeSet = _a.fieldNodeSet;\n            var entityRef = utilities.makeReference(dataId);\n            if (mergeTree && mergeTree.map.size) {\n                var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);\n                if (utilities.isReference(applied)) {\n                    return;\n                }\n                storeObject = applied;\n            }\n            if (globalThis.__DEV__ !== false && !context.overwrite) {\n                var fieldsWithSelectionSets_1 = Object.create(null);\n                fieldNodeSet.forEach(function (field) {\n                    if (field.selectionSet) {\n                        fieldsWithSelectionSets_1[field.name.value] = true;\n                    }\n                });\n                var hasSelectionSet_1 = function (storeFieldName) {\n                    return fieldsWithSelectionSets_1[fieldNameFromStoreName(storeFieldName)] ===\n                        true;\n                };\n                var hasMergeFunction_1 = function (storeFieldName) {\n                    var childTree = mergeTree && mergeTree.map.get(storeFieldName);\n                    return Boolean(childTree && childTree.info && childTree.info.merge);\n                };\n                Object.keys(storeObject).forEach(function (storeFieldName) {\n                    if (hasSelectionSet_1(storeFieldName) &&\n                        !hasMergeFunction_1(storeFieldName)) {\n                        warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);\n                    }\n                });\n            }\n            store.merge(dataId, storeObject);\n        });\n        store.retain(ref.__ref);\n        return ref;\n    };\n    StoreWriter.prototype.processSelectionSet = function (_a) {\n        var _this = this;\n        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context,\n        mergeTree = _a.mergeTree;\n        var policies = this.cache.policies;\n        var incoming = Object.create(null);\n        var typename = (dataId && policies.rootTypenamesById[dataId]) ||\n            utilities.getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n            (dataId && context.store.get(dataId, \"__typename\"));\n        if (\"string\" === typeof typename) {\n            incoming.__typename = typename;\n        }\n        var readField = function () {\n            var options = normalizeReadFieldOptions(arguments, incoming, context.variables);\n            if (utilities.isReference(options.from)) {\n                var info = context.incomingById.get(options.from.__ref);\n                if (info) {\n                    var result_1 = policies.readField(tslib.__assign(tslib.__assign({}, options), { from: info.storeObject }), context);\n                    if (result_1 !== void 0) {\n                        return result_1;\n                    }\n                }\n            }\n            return policies.readField(options, context);\n        };\n        var fieldNodeSet = new Set();\n        this.flattenFields(selectionSet, result,\n        context, typename).forEach(function (context, field) {\n            var _a;\n            var resultFieldKey = utilities.resultKeyNameFromField(field);\n            var value = result[resultFieldKey];\n            fieldNodeSet.add(field);\n            if (value !== void 0) {\n                var storeFieldName = policies.getStoreFieldName({\n                    typename: typename,\n                    fieldName: field.name.value,\n                    field: field,\n                    variables: context.variables,\n                });\n                var childTree = getChildMergeTree(mergeTree, storeFieldName);\n                var incomingValue = _this.processFieldValue(value, field,\n                field.selectionSet ?\n                    getContextFlavor(context, false, false)\n                    : context, childTree);\n                var childTypename = void 0;\n                if (field.selectionSet &&\n                    (utilities.isReference(incomingValue) || storeValueIsStoreObject(incomingValue))) {\n                    childTypename = readField(\"__typename\", incomingValue);\n                }\n                var merge = policies.getMergeFunction(typename, field.name.value, childTypename);\n                if (merge) {\n                    childTree.info = {\n                        field: field,\n                        typename: typename,\n                        merge: merge,\n                    };\n                }\n                else {\n                    maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n                }\n                incoming = context.merge(incoming, (_a = {},\n                    _a[storeFieldName] = incomingValue,\n                    _a));\n            }\n            else if (globalThis.__DEV__ !== false &&\n                !context.clientOnly &&\n                !context.deferred &&\n                !utilities.addTypenameToDocument.added(field) &&\n                !policies.getReadFunction(typename, field.name.value)) {\n                globalThis.__DEV__ !== false && globals.invariant.error(12, utilities.resultKeyNameFromField(field), result);\n            }\n        });\n        try {\n            var _b = policies.identify(result, {\n                typename: typename,\n                selectionSet: selectionSet,\n                fragmentMap: context.fragmentMap,\n                storeObject: incoming,\n                readField: readField,\n            }), id = _b[0], keyObject = _b[1];\n            dataId = dataId || id;\n            if (keyObject) {\n                incoming = context.merge(incoming, keyObject);\n            }\n        }\n        catch (e) {\n            if (!dataId)\n                throw e;\n        }\n        if (\"string\" === typeof dataId) {\n            var dataRef = utilities.makeReference(dataId);\n            var sets = context.written[dataId] || (context.written[dataId] = []);\n            if (sets.indexOf(selectionSet) >= 0)\n                return dataRef;\n            sets.push(selectionSet);\n            if (this.reader &&\n                this.reader.isFresh(result, dataRef, selectionSet, context)) {\n                return dataRef;\n            }\n            var previous_1 = context.incomingById.get(dataId);\n            if (previous_1) {\n                previous_1.storeObject = context.merge(previous_1.storeObject, incoming);\n                previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);\n                fieldNodeSet.forEach(function (field) { return previous_1.fieldNodeSet.add(field); });\n            }\n            else {\n                context.incomingById.set(dataId, {\n                    storeObject: incoming,\n                    mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n                    fieldNodeSet: fieldNodeSet,\n                });\n            }\n            return dataRef;\n        }\n        return incoming;\n    };\n    StoreWriter.prototype.processFieldValue = function (value, field, context, mergeTree) {\n        var _this = this;\n        if (!field.selectionSet || value === null) {\n            return globalThis.__DEV__ !== false ? utilities.cloneDeep(value) : value;\n        }\n        if (utilities.isArray(value)) {\n            return value.map(function (item, i) {\n                var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n                maybeRecycleChildMergeTree(mergeTree, i);\n                return value;\n            });\n        }\n        return this.processSelectionSet({\n            result: value,\n            selectionSet: field.selectionSet,\n            context: context,\n            mergeTree: mergeTree,\n        });\n    };\n    StoreWriter.prototype.flattenFields = function (selectionSet, result, context, typename) {\n        if (typename === void 0) { typename = utilities.getTypenameFromResult(result, selectionSet, context.fragmentMap); }\n        var fieldMap = new Map();\n        var policies = this.cache.policies;\n        var limitingTrie = new trie.Trie(false);\n        (function flatten(selectionSet, inheritedContext) {\n            var visitedNode = limitingTrie.lookup(selectionSet,\n            inheritedContext.clientOnly, inheritedContext.deferred);\n            if (visitedNode.visited)\n                return;\n            visitedNode.visited = true;\n            selectionSet.selections.forEach(function (selection) {\n                if (!utilities.shouldInclude(selection, context.variables))\n                    return;\n                var clientOnly = inheritedContext.clientOnly, deferred = inheritedContext.deferred;\n                if (\n                !(clientOnly && deferred) &&\n                    utilities.isNonEmptyArray(selection.directives)) {\n                    selection.directives.forEach(function (dir) {\n                        var name = dir.name.value;\n                        if (name === \"client\")\n                            clientOnly = true;\n                        if (name === \"defer\") {\n                            var args = utilities.argumentsObjectFromField(dir, context.variables);\n                            if (!args || args.if !== false) {\n                                deferred = true;\n                            }\n                        }\n                    });\n                }\n                if (utilities.isField(selection)) {\n                    var existing = fieldMap.get(selection);\n                    if (existing) {\n                        clientOnly = clientOnly && existing.clientOnly;\n                        deferred = deferred && existing.deferred;\n                    }\n                    fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));\n                }\n                else {\n                    var fragment = utilities.getFragmentFromSelection(selection, context.lookupFragment);\n                    if (!fragment && selection.kind === graphql.Kind.FRAGMENT_SPREAD) {\n                        throw globals.newInvariantError(13, selection.name.value);\n                    }\n                    if (fragment &&\n                        policies.fragmentMatches(fragment, typename, result, context.variables)) {\n                        flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));\n                    }\n                }\n            });\n        })(selectionSet, context);\n        return fieldMap;\n    };\n    StoreWriter.prototype.applyMerges = function (mergeTree, existing, incoming, context, getStorageArgs) {\n        var _a;\n        var _this = this;\n        if (mergeTree.map.size && !utilities.isReference(incoming)) {\n            var e_1 =\n            (!utilities.isArray(incoming) &&\n                (utilities.isReference(existing) || storeValueIsStoreObject(existing))) ?\n                existing\n                : void 0;\n            var i_1 = incoming;\n            if (e_1 && !getStorageArgs) {\n                getStorageArgs = [utilities.isReference(e_1) ? e_1.__ref : e_1];\n            }\n            var changedFields_1;\n            var getValue_1 = function (from, name) {\n                return (utilities.isArray(from) ?\n                    typeof name === \"number\" ?\n                        from[name]\n                        : void 0\n                    : context.store.getFieldValue(from, String(name)));\n            };\n            mergeTree.map.forEach(function (childTree, storeFieldName) {\n                var eVal = getValue_1(e_1, storeFieldName);\n                var iVal = getValue_1(i_1, storeFieldName);\n                if (void 0 === iVal)\n                    return;\n                if (getStorageArgs) {\n                    getStorageArgs.push(storeFieldName);\n                }\n                var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n                if (aVal !== iVal) {\n                    changedFields_1 = changedFields_1 || new Map();\n                    changedFields_1.set(storeFieldName, aVal);\n                }\n                if (getStorageArgs) {\n                    globals.invariant(getStorageArgs.pop() === storeFieldName);\n                }\n            });\n            if (changedFields_1) {\n                incoming = (utilities.isArray(i_1) ? i_1.slice(0) : tslib.__assign({}, i_1));\n                changedFields_1.forEach(function (value, name) {\n                    incoming[name] = value;\n                });\n            }\n        }\n        if (mergeTree.info) {\n            return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));\n        }\n        return incoming;\n    };\n    return StoreWriter;\n}());\nvar emptyMergeTreePool = [];\nfunction getChildMergeTree(_a, name) {\n    var map = _a.map;\n    if (!map.has(name)) {\n        map.set(name, emptyMergeTreePool.pop() || { map: new Map() });\n    }\n    return map.get(name);\n}\nfunction mergeMergeTrees(left, right) {\n    if (left === right || !right || mergeTreeIsEmpty(right))\n        return left;\n    if (!left || mergeTreeIsEmpty(left))\n        return right;\n    var info = left.info && right.info ? tslib.__assign(tslib.__assign({}, left.info), right.info) : left.info || right.info;\n    var needToMergeMaps = left.map.size && right.map.size;\n    var map = needToMergeMaps ? new Map()\n        : left.map.size ? left.map\n            : right.map;\n    var merged = { info: info, map: map };\n    if (needToMergeMaps) {\n        var remainingRightKeys_1 = new Set(right.map.keys());\n        left.map.forEach(function (leftTree, key) {\n            merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n            remainingRightKeys_1.delete(key);\n        });\n        remainingRightKeys_1.forEach(function (key) {\n            merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n        });\n    }\n    return merged;\n}\nfunction mergeTreeIsEmpty(tree) {\n    return !tree || !(tree.info || tree.map.size);\n}\nfunction maybeRecycleChildMergeTree(_a, name) {\n    var map = _a.map;\n    var childTree = map.get(name);\n    if (childTree && mergeTreeIsEmpty(childTree)) {\n        emptyMergeTreePool.push(childTree);\n        map.delete(name);\n    }\n}\nvar warnings = new Set();\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n    var getChild = function (objOrRef) {\n        var child = store.getFieldValue(objOrRef, storeFieldName);\n        return typeof child === \"object\" && child;\n    };\n    var existing = getChild(existingRef);\n    if (!existing)\n        return;\n    var incoming = getChild(incomingObj);\n    if (!incoming)\n        return;\n    if (utilities.isReference(existing))\n        return;\n    if (equality.equal(existing, incoming))\n        return;\n    if (Object.keys(existing).every(function (key) { return store.getFieldValue(incoming, key) !== void 0; })) {\n        return;\n    }\n    var parentType = store.getFieldValue(existingRef, \"__typename\") ||\n        store.getFieldValue(incomingObj, \"__typename\");\n    var fieldName = fieldNameFromStoreName(storeFieldName);\n    var typeDotName = \"\".concat(parentType, \".\").concat(fieldName);\n    if (warnings.has(typeDotName))\n        return;\n    warnings.add(typeDotName);\n    var childTypenames = [];\n    if (!utilities.isArray(existing) && !utilities.isArray(incoming)) {\n        [existing, incoming].forEach(function (child) {\n            var typename = store.getFieldValue(child, \"__typename\");\n            if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n                childTypenames.push(typename);\n            }\n        });\n    }\n    globalThis.__DEV__ !== false && globals.invariant.warn(14, fieldName, parentType, childTypenames.length ?\n        \"either ensure all objects of type \" +\n            childTypenames.join(\" and \") +\n            \" have an ID or a custom merge function, or \"\n        : \"\", typeDotName, existing, incoming);\n}\n\nvar InMemoryCache =  (function (_super) {\n    tslib.__extends(InMemoryCache, _super);\n    function InMemoryCache(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this) || this;\n        _this.watches = new Set();\n        _this.addTypenameTransform = new utilities.DocumentTransform(utilities.addTypenameToDocument);\n        _this.assumeImmutableResults = true;\n        _this.makeVar = makeVar;\n        _this.txCount = 0;\n        _this.config = normalizeConfig(config);\n        _this.addTypename = !!_this.config.addTypename;\n        _this.policies = new Policies({\n            cache: _this,\n            dataIdFromObject: _this.config.dataIdFromObject,\n            possibleTypes: _this.config.possibleTypes,\n            typePolicies: _this.config.typePolicies,\n        });\n        _this.init();\n        return _this;\n    }\n    InMemoryCache.prototype.init = function () {\n        var rootStore = (this.data = new exports.EntityStore.Root({\n            policies: this.policies,\n            resultCaching: this.config.resultCaching,\n        }));\n        this.optimisticData = rootStore.stump;\n        this.resetResultCache();\n    };\n    InMemoryCache.prototype.resetResultCache = function (resetResultIdentities) {\n        var _this = this;\n        var previousReader = this.storeReader;\n        var fragments = this.config.fragments;\n        this.storeWriter = new StoreWriter(this, (this.storeReader = new StoreReader({\n            cache: this,\n            addTypename: this.addTypename,\n            resultCacheMaxSize: this.config.resultCacheMaxSize,\n            canonizeResults: shouldCanonizeResults(this.config),\n            canon: resetResultIdentities ? void 0 : (previousReader && previousReader.canon),\n            fragments: fragments,\n        })), fragments);\n        this.maybeBroadcastWatch = optimism.wrap(function (c, options) {\n            return _this.broadcastWatch(c, options);\n        }, {\n            max: this.config.resultCacheMaxSize ||\n                utilities.cacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] ||\n                5000 ,\n            makeCacheKey: function (c) {\n                var store = c.optimistic ? _this.optimisticData : _this.data;\n                if (supportsResultCaching(store)) {\n                    var optimistic = c.optimistic, id = c.id, variables = c.variables;\n                    return store.makeCacheKey(c.query,\n                    c.callback, utilities.canonicalStringify({ optimistic: optimistic, id: id, variables: variables }));\n                }\n            },\n        });\n        new Set([this.data.group, this.optimisticData.group]).forEach(function (group) {\n            return group.resetCaching();\n        });\n    };\n    InMemoryCache.prototype.restore = function (data) {\n        this.init();\n        if (data)\n            this.data.replace(data);\n        return this;\n    };\n    InMemoryCache.prototype.extract = function (optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return (optimistic ? this.optimisticData : this.data).extract();\n    };\n    InMemoryCache.prototype.read = function (options) {\n        var\n        _a = options.returnPartialData,\n        returnPartialData = _a === void 0 ? false : _a;\n        try {\n            return (this.storeReader.diffQueryAgainstStore(tslib.__assign(tslib.__assign({}, options), { store: options.optimistic ? this.optimisticData : this.data, config: this.config, returnPartialData: returnPartialData })).result || null);\n        }\n        catch (e) {\n            if (e instanceof MissingFieldError) {\n                return null;\n            }\n            throw e;\n        }\n    };\n    InMemoryCache.prototype.write = function (options) {\n        try {\n            ++this.txCount;\n            return this.storeWriter.writeToStore(this.data, options);\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.modify = function (options) {\n        if (hasOwn.call(options, \"id\") && !options.id) {\n            return false;\n        }\n        var store = ((options.optimistic)\n        ) ?\n            this.optimisticData\n            : this.data;\n        try {\n            ++this.txCount;\n            return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.diff = function (options) {\n        return this.storeReader.diffQueryAgainstStore(tslib.__assign(tslib.__assign({}, options), { store: options.optimistic ? this.optimisticData : this.data, rootId: options.id || \"ROOT_QUERY\", config: this.config }));\n    };\n    InMemoryCache.prototype.watch = function (watch) {\n        var _this = this;\n        if (!this.watches.size) {\n            recallCache(this);\n        }\n        this.watches.add(watch);\n        if (watch.immediate) {\n            this.maybeBroadcastWatch(watch);\n        }\n        return function () {\n            if (_this.watches.delete(watch) && !_this.watches.size) {\n                forgetCache(_this);\n            }\n            _this.maybeBroadcastWatch.forget(watch);\n        };\n    };\n    InMemoryCache.prototype.gc = function (options) {\n        var _a;\n        utilities.canonicalStringify.reset();\n        utilities.print.reset();\n        this.addTypenameTransform.resetCache();\n        (_a = this.config.fragments) === null || _a === void 0 ? void 0 : _a.resetCaches();\n        var ids = this.optimisticData.gc();\n        if (options && !this.txCount) {\n            if (options.resetResultCache) {\n                this.resetResultCache(options.resetResultIdentities);\n            }\n            else if (options.resetResultIdentities) {\n                this.storeReader.resetCanon();\n            }\n        }\n        return ids;\n    };\n    InMemoryCache.prototype.retain = function (rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).retain(rootId);\n    };\n    InMemoryCache.prototype.release = function (rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).release(rootId);\n    };\n    InMemoryCache.prototype.identify = function (object) {\n        if (utilities.isReference(object))\n            return object.__ref;\n        try {\n            return this.policies.identify(object)[0];\n        }\n        catch (e) {\n            globalThis.__DEV__ !== false && globals.invariant.warn(e);\n        }\n    };\n    InMemoryCache.prototype.evict = function (options) {\n        if (!options.id) {\n            if (hasOwn.call(options, \"id\")) {\n                return false;\n            }\n            options = tslib.__assign(tslib.__assign({}, options), { id: \"ROOT_QUERY\" });\n        }\n        try {\n            ++this.txCount;\n            return this.optimisticData.evict(options, this.data);\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.reset = function (options) {\n        var _this = this;\n        this.init();\n        utilities.canonicalStringify.reset();\n        if (options && options.discardWatches) {\n            this.watches.forEach(function (watch) { return _this.maybeBroadcastWatch.forget(watch); });\n            this.watches.clear();\n            forgetCache(this);\n        }\n        else {\n            this.broadcastWatches();\n        }\n        return Promise.resolve();\n    };\n    InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n        if (newOptimisticData !== this.optimisticData) {\n            this.optimisticData = newOptimisticData;\n            this.broadcastWatches();\n        }\n    };\n    InMemoryCache.prototype.batch = function (options) {\n        var _this = this;\n        var update = options.update, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, removeOptimistic = options.removeOptimistic, onWatchUpdated = options.onWatchUpdated;\n        var updateResult;\n        var perform = function (layer) {\n            var _a = _this, data = _a.data, optimisticData = _a.optimisticData;\n            ++_this.txCount;\n            if (layer) {\n                _this.data = _this.optimisticData = layer;\n            }\n            try {\n                return (updateResult = update(_this));\n            }\n            finally {\n                --_this.txCount;\n                _this.data = data;\n                _this.optimisticData = optimisticData;\n            }\n        };\n        var alreadyDirty = new Set();\n        if (onWatchUpdated && !this.txCount) {\n            this.broadcastWatches(tslib.__assign(tslib.__assign({}, options), { onWatchUpdated: function (watch) {\n                    alreadyDirty.add(watch);\n                    return false;\n                } }));\n        }\n        if (typeof optimistic === \"string\") {\n            this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n        }\n        else if (optimistic === false) {\n            perform(this.data);\n        }\n        else {\n            perform();\n        }\n        if (typeof removeOptimistic === \"string\") {\n            this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n        }\n        if (onWatchUpdated && alreadyDirty.size) {\n            this.broadcastWatches(tslib.__assign(tslib.__assign({}, options), { onWatchUpdated: function (watch, diff) {\n                    var result = onWatchUpdated.call(this, watch, diff);\n                    if (result !== false) {\n                        alreadyDirty.delete(watch);\n                    }\n                    return result;\n                } }));\n            if (alreadyDirty.size) {\n                alreadyDirty.forEach(function (watch) { return _this.maybeBroadcastWatch.dirty(watch); });\n            }\n        }\n        else {\n            this.broadcastWatches(options);\n        }\n        return updateResult;\n    };\n    InMemoryCache.prototype.performTransaction = function (update, optimisticId) {\n        return this.batch({\n            update: update,\n            optimistic: optimisticId || optimisticId !== null,\n        });\n    };\n    InMemoryCache.prototype.transformDocument = function (document) {\n        return this.addTypenameToDocument(this.addFragmentsToDocument(document));\n    };\n    InMemoryCache.prototype.broadcastWatches = function (options) {\n        var _this = this;\n        if (!this.txCount) {\n            this.watches.forEach(function (c) { return _this.maybeBroadcastWatch(c, options); });\n        }\n    };\n    InMemoryCache.prototype.addFragmentsToDocument = function (document) {\n        var fragments = this.config.fragments;\n        return fragments ? fragments.transform(document) : document;\n    };\n    InMemoryCache.prototype.addTypenameToDocument = function (document) {\n        if (this.addTypename) {\n            return this.addTypenameTransform.transformDocument(document);\n        }\n        return document;\n    };\n    InMemoryCache.prototype.broadcastWatch = function (c, options) {\n        var lastDiff = c.lastDiff;\n        var diff = this.diff(c);\n        if (options) {\n            if (c.optimistic && typeof options.optimistic === \"string\") {\n                diff.fromOptimisticTransaction = true;\n            }\n            if (options.onWatchUpdated &&\n                options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n                return;\n            }\n        }\n        if (!lastDiff || !equality.equal(lastDiff.result, diff.result)) {\n            c.callback((c.lastDiff = diff), lastDiff);\n        }\n    };\n    return InMemoryCache;\n}(ApolloCache));\nif (globalThis.__DEV__ !== false) {\n    InMemoryCache.prototype.getMemoryInternals = getInMemoryCacheMemoryInternals;\n}\n\nfunction createFragmentRegistry() {\n    var fragments = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fragments[_i] = arguments[_i];\n    }\n    return new (FragmentRegistry.bind.apply(FragmentRegistry, tslib.__spreadArray([void 0], fragments, false)))();\n}\nvar FragmentRegistry =  (function () {\n    function FragmentRegistry() {\n        var fragments = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fragments[_i] = arguments[_i];\n        }\n        this.registry = Object.create(null);\n        this.resetCaches();\n        if (fragments.length) {\n            this.register.apply(this, fragments);\n        }\n    }\n    FragmentRegistry.prototype.register = function () {\n        var _this = this;\n        var fragments = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fragments[_i] = arguments[_i];\n        }\n        var definitions = new Map();\n        fragments.forEach(function (doc) {\n            utilities.getFragmentDefinitions(doc).forEach(function (node) {\n                definitions.set(node.name.value, node);\n            });\n        });\n        definitions.forEach(function (node, name) {\n            if (node !== _this.registry[name]) {\n                _this.registry[name] = node;\n                _this.invalidate(name);\n            }\n        });\n        return this;\n    };\n    FragmentRegistry.prototype.invalidate = function (name) { };\n    FragmentRegistry.prototype.resetCaches = function () {\n        var proto = FragmentRegistry.prototype;\n        this.invalidate = (this.lookup = optimism.wrap(proto.lookup.bind(this), {\n            makeCacheKey: function (arg) { return arg; },\n            max: utilities.cacheSizes[\"fragmentRegistry.lookup\"] ||\n                1000 ,\n        })).dirty;\n        this.transform = optimism.wrap(proto.transform.bind(this), {\n            cache: caches.WeakCache,\n            max: utilities.cacheSizes[\"fragmentRegistry.transform\"] ||\n                2000 ,\n        });\n        this.findFragmentSpreads = optimism.wrap(proto.findFragmentSpreads.bind(this), {\n            cache: caches.WeakCache,\n            max: utilities.cacheSizes[\"fragmentRegistry.findFragmentSpreads\"] ||\n                4000 ,\n        });\n    };\n    FragmentRegistry.prototype.lookup = function (fragmentName) {\n        return this.registry[fragmentName] || null;\n    };\n    FragmentRegistry.prototype.transform = function (document) {\n        var _this = this;\n        var defined = new Map();\n        utilities.getFragmentDefinitions(document).forEach(function (def) {\n            defined.set(def.name.value, def);\n        });\n        var unbound = new Set();\n        var enqueue = function (spreadName) {\n            if (!defined.has(spreadName)) {\n                unbound.add(spreadName);\n            }\n        };\n        var enqueueChildSpreads = function (node) {\n            return Object.keys(_this.findFragmentSpreads(node)).forEach(enqueue);\n        };\n        enqueueChildSpreads(document);\n        var missing = [];\n        var map = Object.create(null);\n        unbound.forEach(function (fragmentName) {\n            var knownFragmentDef = defined.get(fragmentName);\n            if (knownFragmentDef) {\n                enqueueChildSpreads((map[fragmentName] = knownFragmentDef));\n            }\n            else {\n                missing.push(fragmentName);\n                var def = _this.lookup(fragmentName);\n                if (def) {\n                    enqueueChildSpreads((map[fragmentName] = def));\n                }\n            }\n        });\n        if (missing.length) {\n            var defsToAppend_1 = [];\n            missing.forEach(function (name) {\n                var def = map[name];\n                if (def) {\n                    defsToAppend_1.push(def);\n                }\n            });\n            if (defsToAppend_1.length) {\n                document = tslib.__assign(tslib.__assign({}, document), { definitions: document.definitions.concat(defsToAppend_1) });\n            }\n        }\n        return document;\n    };\n    FragmentRegistry.prototype.findFragmentSpreads = function (root) {\n        var spreads = Object.create(null);\n        graphql.visit(root, {\n            FragmentSpread: function (node) {\n                spreads[node.name.value] = node;\n            },\n        });\n        return spreads;\n    };\n    return FragmentRegistry;\n}());\n\nexports.canonicalStringify = utilities.canonicalStringify;\nexports.isReference = utilities.isReference;\nexports.makeReference = utilities.makeReference;\nexports.ApolloCache = ApolloCache;\nexports.InMemoryCache = InMemoryCache;\nexports.MissingFieldError = MissingFieldError;\nexports.Policies = Policies;\nexports.cacheSlot = cacheSlot;\nexports.createFragmentRegistry = createFragmentRegistry;\nexports.defaultDataIdFromObject = defaultDataIdFromObject;\nexports.fieldNameFromStoreName = fieldNameFromStoreName;\nexports.makeVar = makeVar;\n//# sourceMappingURL=cache.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/cache.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/core.cjs":
/*!***************************************************!*\
  !*** ./node_modules/@apollo/client/core/core.cjs ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar tslib = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nvar globals = __webpack_require__(/*! ../utilities/globals */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/globals.cjs\");\nvar core = __webpack_require__(/*! ../link/core */ \"(ssr)/./node_modules/@apollo/client/link/core/core.cjs\");\nvar http = __webpack_require__(/*! ../link/http */ \"(ssr)/./node_modules/@apollo/client/link/http/http.cjs\");\nvar equal = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/bundle.cjs\");\nvar utilities = __webpack_require__(/*! ../utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs\");\nvar cache = __webpack_require__(/*! ../cache */ \"(ssr)/./node_modules/@apollo/client/cache/cache.cjs\");\nvar errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@apollo/client/errors/errors.cjs\");\nvar graphql = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/index.js\");\nvar trie = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/bundle.cjs\");\nvar utils = __webpack_require__(/*! ../link/utils */ \"(ssr)/./node_modules/@apollo/client/link/utils/utils.cjs\");\nvar tsInvariant = __webpack_require__(/*! ts-invariant */ \"(ssr)/./node_modules/ts-invariant/lib/invariant.cjs\");\nvar graphqlTag = __webpack_require__(/*! graphql-tag */ \"(ssr)/./node_modules/graphql-tag/main.js\");\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e[\"default\"] : e; }\n\nvar equal__default = /*#__PURE__*/_interopDefaultLegacy(equal);\n\nvar version = \"3.9.2\";\n\nfunction isNonNullObject(obj) {\n    return obj !== null && typeof obj === \"object\";\n}\n\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\n\nvar hasOwnProperty$2 = Object.prototype.hasOwnProperty;\nvar defaultReconciler = function (target, source, property) {\n    return this.merge(target[property], source[property]);\n};\nvar DeepMerger =  (function () {\n    function DeepMerger(reconciler) {\n        if (reconciler === void 0) { reconciler = defaultReconciler; }\n        this.reconciler = reconciler;\n        this.isObject = isNonNullObject;\n        this.pastCopies = new Set();\n    }\n    DeepMerger.prototype.merge = function (target, source) {\n        var _this = this;\n        var context = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            context[_i - 2] = arguments[_i];\n        }\n        if (isNonNullObject(source) && isNonNullObject(target)) {\n            Object.keys(source).forEach(function (sourceKey) {\n                if (hasOwnProperty$2.call(target, sourceKey)) {\n                    var targetValue = target[sourceKey];\n                    if (source[sourceKey] !== targetValue) {\n                        var result = _this.reconciler.apply(_this, tslib.__spreadArray([target,\n                            source,\n                            sourceKey], context, false));\n                        if (result !== targetValue) {\n                            target = _this.shallowCopyForMerge(target);\n                            target[sourceKey] = result;\n                        }\n                    }\n                }\n                else {\n                    target = _this.shallowCopyForMerge(target);\n                    target[sourceKey] = source[sourceKey];\n                }\n            });\n            return target;\n        }\n        return source;\n    };\n    DeepMerger.prototype.shallowCopyForMerge = function (value) {\n        if (isNonNullObject(value)) {\n            if (!this.pastCopies.has(value)) {\n                if (Array.isArray(value)) {\n                    value = value.slice(0);\n                }\n                else {\n                    value = tslib.__assign({ __proto__: Object.getPrototypeOf(value) }, value);\n                }\n                this.pastCopies.add(value);\n            }\n        }\n        return value;\n    };\n    return DeepMerger;\n}());\n\nfunction isExecutionPatchIncrementalResult(value) {\n    return \"incremental\" in value;\n}\nfunction mergeIncrementalData(prevResult, result) {\n    var mergedData = prevResult;\n    var merger = new DeepMerger();\n    if (isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)) {\n        result.incremental.forEach(function (_a) {\n            var data = _a.data, path = _a.path;\n            for (var i = path.length - 1; i >= 0; --i) {\n                var key = path[i];\n                var isNumericKey = !isNaN(+key);\n                var parent_1 = isNumericKey ? [] : {};\n                parent_1[key] = data;\n                data = parent_1;\n            }\n            mergedData = merger.merge(mergedData, data);\n        });\n    }\n    return mergedData;\n}\n\nexports.NetworkStatus = void 0;\n(function (NetworkStatus) {\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(exports.NetworkStatus || (exports.NetworkStatus = {}));\nfunction isNetworkRequestInFlight(networkStatus) {\n    return networkStatus ? networkStatus < 7 : false;\n}\nfunction isNetworkRequestSettled(networkStatus) {\n    return networkStatus === 7 || networkStatus === 8;\n}\n\nfunction equalByQuery(query, _a, _b, variables) {\n    var aData = _a.data, aRest = tslib.__rest(_a, [\"data\"]);\n    var bData = _b.data, bRest = tslib.__rest(_b, [\"data\"]);\n    return (equal__default(aRest, bRest) &&\n        equalBySelectionSet(utilities.getMainDefinition(query).selectionSet, aData, bData, {\n            fragmentMap: utilities.createFragmentMap(utilities.getFragmentDefinitions(query)),\n            variables: variables,\n        }));\n}\nfunction equalBySelectionSet(selectionSet, aResult, bResult, context) {\n    if (aResult === bResult) {\n        return true;\n    }\n    var seenSelections = new Set();\n    return selectionSet.selections.every(function (selection) {\n        if (seenSelections.has(selection))\n            return true;\n        seenSelections.add(selection);\n        if (!utilities.shouldInclude(selection, context.variables))\n            return true;\n        if (selectionHasNonreactiveDirective(selection))\n            return true;\n        if (utilities.isField(selection)) {\n            var resultKey = utilities.resultKeyNameFromField(selection);\n            var aResultChild = aResult && aResult[resultKey];\n            var bResultChild = bResult && bResult[resultKey];\n            var childSelectionSet = selection.selectionSet;\n            if (!childSelectionSet) {\n                return equal__default(aResultChild, bResultChild);\n            }\n            var aChildIsArray = Array.isArray(aResultChild);\n            var bChildIsArray = Array.isArray(bResultChild);\n            if (aChildIsArray !== bChildIsArray)\n                return false;\n            if (aChildIsArray && bChildIsArray) {\n                var length_1 = aResultChild.length;\n                if (bResultChild.length !== length_1) {\n                    return false;\n                }\n                for (var i = 0; i < length_1; ++i) {\n                    if (!equalBySelectionSet(childSelectionSet, aResultChild[i], bResultChild[i], context)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return equalBySelectionSet(childSelectionSet, aResultChild, bResultChild, context);\n        }\n        else {\n            var fragment = utilities.getFragmentFromSelection(selection, context.fragmentMap);\n            if (fragment) {\n                if (selectionHasNonreactiveDirective(fragment))\n                    return true;\n                return equalBySelectionSet(fragment.selectionSet,\n                aResult, bResult, context);\n            }\n        }\n    });\n}\nfunction selectionHasNonreactiveDirective(selection) {\n    return (!!selection.directives && selection.directives.some(directiveIsNonreactive));\n}\nfunction directiveIsNonreactive(dir) {\n    return dir.name.value === \"nonreactive\";\n}\n\nvar assign = Object.assign, hasOwnProperty$1 = Object.hasOwnProperty;\nvar ObservableQuery =  (function (_super) {\n    tslib.__extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;\n        var _this = _super.call(this, function (observer) {\n            try {\n                var subObserver = observer._subscription._observer;\n                if (subObserver && !subObserver.error) {\n                    subObserver.error = defaultSubscriptionObserverErrorCallback;\n                }\n            }\n            catch (_a) { }\n            var first = !_this.observers.size;\n            _this.observers.add(observer);\n            var last = _this.last;\n            if (last && last.error) {\n                observer.error && observer.error(last.error);\n            }\n            else if (last && last.result) {\n                observer.next && observer.next(last.result);\n            }\n            if (first) {\n                _this.reobserve().catch(function () { });\n            }\n            return function () {\n                if (_this.observers.delete(observer) && !_this.observers.size) {\n                    _this.tearDownQuery();\n                }\n            };\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        _this.queryInfo = queryInfo;\n        _this.queryManager = queryManager;\n        _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n        _this.isTornDown = false;\n        var _b = queryManager.defaultOptions.watchQuery, _c = _b === void 0 ? {} : _b, _d = _c.fetchPolicy, defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n        var _e = options.fetchPolicy, fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e,\n        _f = options.initialFetchPolicy,\n        initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : (fetchPolicy) : _f;\n        _this.options = tslib.__assign(tslib.__assign({}, options), {\n            initialFetchPolicy: initialFetchPolicy,\n            fetchPolicy: fetchPolicy });\n        _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n        var opDef = utilities.getOperationDefinition(_this.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        return _this;\n    }\n    Object.defineProperty(ObservableQuery.prototype, \"query\", {\n        get: function () {\n            return this.lastQuery || this.options.query;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n        get: function () {\n            return this.options.variables;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.resetDiff = function () {\n        this.queryInfo.resetDiff();\n    };\n    ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n        if (saveAsLastResult === void 0) { saveAsLastResult = true; }\n        var lastResult = this.getLastResult(true);\n        var networkStatus = this.queryInfo.networkStatus ||\n            (lastResult && lastResult.networkStatus) ||\n            exports.NetworkStatus.ready;\n        var result = tslib.__assign(tslib.__assign({}, lastResult), { loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus });\n        var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n        if (\n        skipCacheDataFor(fetchPolicy) ||\n            this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) ;\n        else if (this.waitForOwnResult) {\n            this.queryInfo[\"updateWatch\"]();\n        }\n        else {\n            var diff = this.queryInfo.getDiff();\n            if (diff.complete || this.options.returnPartialData) {\n                result.data = diff.result;\n            }\n            if (equal.equal(result.data, {})) {\n                result.data = void 0;\n            }\n            if (diff.complete) {\n                delete result.partial;\n                if (diff.complete &&\n                    result.networkStatus === exports.NetworkStatus.loading &&\n                    (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")) {\n                    result.networkStatus = exports.NetworkStatus.ready;\n                    result.loading = false;\n                }\n            }\n            else {\n                result.partial = true;\n            }\n            if (globalThis.__DEV__ !== false &&\n                !diff.complete &&\n                !this.options.partialRefetch &&\n                !result.loading &&\n                !result.data &&\n                !result.error) {\n                logMissingFieldErrors(diff.missing);\n            }\n        }\n        if (saveAsLastResult) {\n            this.updateLastResult(result);\n        }\n        return result;\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n        if (!this.last) {\n            return true;\n        }\n        var resultIsDifferent = this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective ?\n            !equalByQuery(this.query, this.last.result, newResult, this.variables)\n            : !equal.equal(this.last.result, newResult);\n        return (resultIsDifferent || (variables && !equal.equal(this.last.variables, variables)));\n    };\n    ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n        var last = this.last;\n        if (last &&\n            last[key] &&\n            (!variablesMustMatch || equal.equal(last.variables, this.variables))) {\n            return last[key];\n        }\n    };\n    ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n        return this.getLast(\"result\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n        return this.getLast(\"error\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.last;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n        this.queryManager.resetErrors(this.queryId);\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var _a;\n        var reobserveOptions = {\n            pollInterval: 0,\n        };\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === \"cache-and-network\") {\n            reobserveOptions.fetchPolicy = fetchPolicy;\n        }\n        else if (fetchPolicy === \"no-cache\") {\n            reobserveOptions.fetchPolicy = \"no-cache\";\n        }\n        else {\n            reobserveOptions.fetchPolicy = \"network-only\";\n        }\n        if (globalThis.__DEV__ !== false && variables && hasOwnProperty$1.call(variables, \"variables\")) {\n            var queryDef = utilities.getQueryDefinition(this.query);\n            var vars = queryDef.variableDefinitions;\n            if (!vars || !vars.some(function (v) { return v.variable.name.value === \"variables\"; })) {\n                globalThis.__DEV__ !== false && globals.invariant.warn(\n                    20,\n                    variables,\n                    ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef\n                );\n            }\n        }\n        if (variables && !equal.equal(this.options.variables, variables)) {\n            reobserveOptions.variables = this.options.variables = tslib.__assign(tslib.__assign({}, this.options.variables), variables);\n        }\n        this.queryInfo.resetLastWrite();\n        return this.reobserve(reobserveOptions, exports.NetworkStatus.refetch);\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = tslib.__assign(tslib.__assign({}, (fetchMoreOptions.query ? fetchMoreOptions : (tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({}, this.options), { query: this.options.query }), fetchMoreOptions), { variables: tslib.__assign(tslib.__assign({}, this.options.variables), fetchMoreOptions.variables) })))), {\n            fetchPolicy: \"no-cache\" });\n        combinedOptions.query = this.transformDocument(combinedOptions.query);\n        var qid = this.queryManager.generateQueryId();\n        this.lastQuery =\n            fetchMoreOptions.query ?\n                this.transformDocument(this.options.query)\n                : combinedOptions.query;\n        var queryInfo = this.queryInfo;\n        var originalNetworkStatus = queryInfo.networkStatus;\n        queryInfo.networkStatus = exports.NetworkStatus.fetchMore;\n        if (combinedOptions.notifyOnNetworkStatusChange) {\n            this.observe();\n        }\n        var updatedQuerySet = new Set();\n        return this.queryManager\n            .fetchQuery(qid, combinedOptions, exports.NetworkStatus.fetchMore)\n            .then(function (fetchMoreResult) {\n            _this.queryManager.removeQuery(qid);\n            if (queryInfo.networkStatus === exports.NetworkStatus.fetchMore) {\n                queryInfo.networkStatus = originalNetworkStatus;\n            }\n            _this.queryManager.cache.batch({\n                update: function (cache) {\n                    var updateQuery = fetchMoreOptions.updateQuery;\n                    if (updateQuery) {\n                        cache.updateQuery({\n                            query: _this.query,\n                            variables: _this.variables,\n                            returnPartialData: true,\n                            optimistic: false,\n                        }, function (previous) {\n                            return updateQuery(previous, {\n                                fetchMoreResult: fetchMoreResult.data,\n                                variables: combinedOptions.variables,\n                            });\n                        });\n                    }\n                    else {\n                        cache.writeQuery({\n                            query: combinedOptions.query,\n                            variables: combinedOptions.variables,\n                            data: fetchMoreResult.data,\n                        });\n                    }\n                },\n                onWatchUpdated: function (watch) {\n                    updatedQuerySet.add(watch.query);\n                },\n            });\n            return fetchMoreResult;\n        })\n            .finally(function () {\n            if (!updatedQuerySet.has(_this.query)) {\n                reobserveCacheFirst(_this);\n            }\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n            context: options.context,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                globalThis.__DEV__ !== false && globals.invariant.error(21, err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (newOptions) {\n        return this.reobserve(newOptions);\n    };\n    ObservableQuery.prototype.silentSetOptions = function (newOptions) {\n        var mergedOptions = utilities.compact(this.options, newOptions || {});\n        assign(this.options, mergedOptions);\n    };\n    ObservableQuery.prototype.setVariables = function (variables) {\n        if (equal.equal(this.variables, variables)) {\n            return this.observers.size ? this.result() : Promise.resolve();\n        }\n        this.options.variables = variables;\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.reobserve({\n            fetchPolicy: this.options.initialFetchPolicy,\n            variables: variables,\n        }, exports.NetworkStatus.setVariables);\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var queryManager = this.queryManager;\n        var result = queryManager.cache.diff({\n            query: this.options.query,\n            variables: this.variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n        var newResult = mapFn(result, {\n            variables: this.variables,\n        });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables,\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        this.options.pollInterval = pollInterval;\n        this.updatePolling();\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        this.options.pollInterval = 0;\n        this.updatePolling();\n    };\n    ObservableQuery.prototype.applyNextFetchPolicy = function (reason,\n    options) {\n        if (options.nextFetchPolicy) {\n            var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.initialFetchPolicy, initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n            if (fetchPolicy === \"standby\") ;\n            else if (typeof options.nextFetchPolicy === \"function\") {\n                options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n                    reason: reason,\n                    options: options,\n                    observable: this,\n                    initialFetchPolicy: initialFetchPolicy,\n                });\n            }\n            else if (reason === \"variables-changed\") {\n                options.fetchPolicy = initialFetchPolicy;\n            }\n            else {\n                options.fetchPolicy = options.nextFetchPolicy;\n            }\n        }\n        return options.fetchPolicy;\n    };\n    ObservableQuery.prototype.fetch = function (options, newNetworkStatus, query) {\n        this.queryManager.setObservableQuery(this);\n        return this.queryManager[\"fetchConcastWithInfo\"](this.queryId, options, newNetworkStatus, query);\n    };\n    ObservableQuery.prototype.updatePolling = function () {\n        var _this = this;\n        if (this.queryManager.ssrMode) {\n            return;\n        }\n        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;\n        if (!pollInterval) {\n            if (pollingInfo) {\n                clearTimeout(pollingInfo.timeout);\n                delete this.pollingInfo;\n            }\n            return;\n        }\n        if (pollingInfo && pollingInfo.interval === pollInterval) {\n            return;\n        }\n        globals.invariant(pollInterval, 22);\n        var info = pollingInfo || (this.pollingInfo = {});\n        info.interval = pollInterval;\n        var maybeFetch = function () {\n            var _a, _b;\n            if (_this.pollingInfo) {\n                if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus) &&\n                    !((_b = (_a = _this.options).skipPollAttempt) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n                    _this.reobserve({\n                        fetchPolicy: _this.options.initialFetchPolicy === \"no-cache\" ?\n                            \"no-cache\"\n                            : \"network-only\",\n                    }, exports.NetworkStatus.poll).then(poll, poll);\n                }\n                else {\n                    poll();\n                }\n            }\n        };\n        var poll = function () {\n            var info = _this.pollingInfo;\n            if (info) {\n                clearTimeout(info.timeout);\n                info.timeout = setTimeout(maybeFetch, info.interval);\n            }\n        };\n        poll();\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n        if (variables === void 0) { variables = this.variables; }\n        var error = this.getLastError();\n        if (error && this.last && !equal.equal(variables, this.last.variables)) {\n            error = void 0;\n        }\n        return (this.last = tslib.__assign({ result: this.queryManager.assumeImmutableResults ?\n                newResult\n                : utilities.cloneDeep(newResult), variables: variables }, (error ? { error: error } : null)));\n    };\n    ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {\n        var _this = this;\n        this.isTornDown = false;\n        var useDisposableConcast =\n        newNetworkStatus === exports.NetworkStatus.refetch ||\n            newNetworkStatus === exports.NetworkStatus.fetchMore ||\n            newNetworkStatus === exports.NetworkStatus.poll;\n        var oldVariables = this.options.variables;\n        var oldFetchPolicy = this.options.fetchPolicy;\n        var mergedOptions = utilities.compact(this.options, newOptions || {});\n        var options = useDisposableConcast ?\n            mergedOptions\n            : assign(this.options, mergedOptions);\n        var query = this.transformDocument(options.query);\n        this.lastQuery = query;\n        if (!useDisposableConcast) {\n            this.updatePolling();\n            if (newOptions &&\n                newOptions.variables &&\n                !equal.equal(newOptions.variables, oldVariables) &&\n                options.fetchPolicy !== \"standby\" &&\n                options.fetchPolicy === oldFetchPolicy) {\n                this.applyNextFetchPolicy(\"variables-changed\", options);\n                if (newNetworkStatus === void 0) {\n                    newNetworkStatus = exports.NetworkStatus.setVariables;\n                }\n            }\n        }\n        this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n        var finishWaitingForOwnResult = function () {\n            if (_this.concast === concast) {\n                _this.waitForOwnResult = false;\n            }\n        };\n        var variables = options.variables && tslib.__assign({}, options.variables);\n        var _a = this.fetch(options, newNetworkStatus, query), concast = _a.concast, fromLink = _a.fromLink;\n        var observer = {\n            next: function (result) {\n                if (equal.equal(_this.variables, variables)) {\n                    finishWaitingForOwnResult();\n                    _this.reportResult(result, variables);\n                }\n            },\n            error: function (error) {\n                if (equal.equal(_this.variables, variables)) {\n                    finishWaitingForOwnResult();\n                    _this.reportError(error, variables);\n                }\n            },\n        };\n        if (!useDisposableConcast && (fromLink || !this.concast)) {\n            if (this.concast && this.observer) {\n                this.concast.removeObserver(this.observer);\n            }\n            this.concast = concast;\n            this.observer = observer;\n        }\n        concast.addObserver(observer);\n        return concast;\n    };\n    ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n        return this.reobserveAsConcast(newOptions, newNetworkStatus)\n            .promise;\n    };\n    ObservableQuery.prototype.resubscribeAfterError = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var last = this.last;\n        this.resetLastResults();\n        var subscription = this.subscribe.apply(this, args);\n        this.last = last;\n        return subscription;\n    };\n    ObservableQuery.prototype.observe = function () {\n        this.reportResult(\n        this.getCurrentResult(false), this.variables);\n    };\n    ObservableQuery.prototype.reportResult = function (result, variables) {\n        var lastError = this.getLastError();\n        var isDifferent = this.isDifferentFromLastResult(result, variables);\n        if (lastError || !result.partial || this.options.returnPartialData) {\n            this.updateLastResult(result, variables);\n        }\n        if (lastError || isDifferent) {\n            utilities.iterateObserversSafely(this.observers, \"next\", result);\n        }\n    };\n    ObservableQuery.prototype.reportError = function (error, variables) {\n        var errorResult = tslib.__assign(tslib.__assign({}, this.getLastResult()), { error: error, errors: error.graphQLErrors, networkStatus: exports.NetworkStatus.error, loading: false });\n        this.updateLastResult(errorResult, variables);\n        utilities.iterateObserversSafely(this.observers, \"error\", (this.last.error = error));\n    };\n    ObservableQuery.prototype.hasObservers = function () {\n        return this.observers.size > 0;\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        if (this.isTornDown)\n            return;\n        if (this.concast && this.observer) {\n            this.concast.removeObserver(this.observer);\n            delete this.concast;\n            delete this.observer;\n        }\n        this.stopPolling();\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        this.queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n        this.isTornDown = true;\n    };\n    ObservableQuery.prototype.transformDocument = function (document) {\n        return this.queryManager.transform(document);\n    };\n    return ObservableQuery;\n}(utilities.Observable));\nutilities.fixObservableSubclass(ObservableQuery);\nfunction reobserveCacheFirst(obsQuery) {\n    var _a = obsQuery.options, fetchPolicy = _a.fetchPolicy, nextFetchPolicy = _a.nextFetchPolicy;\n    if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n        return obsQuery.reobserve({\n            fetchPolicy: \"cache-first\",\n            nextFetchPolicy: function (currentFetchPolicy, context) {\n                this.nextFetchPolicy = nextFetchPolicy;\n                if (typeof this.nextFetchPolicy === \"function\") {\n                    return this.nextFetchPolicy(currentFetchPolicy, context);\n                }\n                return fetchPolicy;\n            },\n        });\n    }\n    return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    globalThis.__DEV__ !== false && globals.invariant.error(23, error.message, error.stack);\n}\nfunction logMissingFieldErrors(missing) {\n    if (globalThis.__DEV__ !== false && missing) {\n        globalThis.__DEV__ !== false && globals.invariant.debug(24, missing);\n    }\n}\nfunction skipCacheDataFor(fetchPolicy ) {\n    return (fetchPolicy === \"network-only\" ||\n        fetchPolicy === \"no-cache\" ||\n        fetchPolicy === \"standby\");\n}\n\nvar LocalState =  (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.selectionsToResolveCache = new WeakMap();\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = utilities.mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = utilities.mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return tslib.__awaiter(this, void 0, void 0, function () {\n            return tslib.__generator(this, function (_c) {\n                if (document) {\n                    return [2 , this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (tslib.__assign(tslib.__assign({}, remoteResult), { data: localResult.result })); })];\n                }\n                return [2 , remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    LocalState.prototype.clientQuery = function (document) {\n        if (utilities.hasDirectives([\"client\"], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n        }\n        return null;\n    };\n    LocalState.prototype.serverQuery = function (document) {\n        return utilities.removeClientSetsFromDocument(document);\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        var cache = this.cache;\n        return tslib.__assign(tslib.__assign({}, context), { cache: cache,\n            getCacheKey: function (obj) {\n                return cache.identify(obj);\n            } });\n    };\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return tslib.__awaiter(this, void 0, void 0, function () {\n            return tslib.__generator(this, function (_a) {\n                if (document) {\n                    return [2 , this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (tslib.__assign(tslib.__assign({}, variables), data.exportedVariables)); })];\n                }\n                return [2 , tslib.__assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        graphql.visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === \"client\" && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === \"always\" &&\n                                arg.value.kind === \"BooleanValue\" &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return graphql.BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: utilities.buildQueryFromSelectionSet(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return tslib.__awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n            return tslib.__generator(this, function (_b) {\n                mainDefinition = utilities.getMainDefinition(document);\n                fragments = utilities.getFragmentDefinitions(document);\n                fragmentMap = utilities.createFragmentMap(fragments);\n                selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n                definitionOperation = mainDefinition.operation;\n                defaultOperationType = definitionOperation ?\n                    definitionOperation.charAt(0).toUpperCase() +\n                        definitionOperation.slice(1)\n                    : \"Query\";\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: tslib.__assign(tslib.__assign({}, context), { cache: cache, client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    selectionsToResolve: selectionsToResolve,\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                isClientFieldDescendant = false;\n                return [2 , this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, isClientFieldDescendant, rootValue, execContext) {\n        return tslib.__awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return tslib.__generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return tslib.__awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return tslib.__generator(this, function (_a) {\n                        if (!isClientFieldDescendant &&\n                            !execContext.selectionsToResolve.has(selection)) {\n                            return [2 ];\n                        }\n                        if (!utilities.shouldInclude(selection, variables)) {\n                            return [2 ];\n                        }\n                        if (utilities.isField(selection)) {\n                            return [2 , this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== \"undefined\") {\n                                        resultsToMerge.push((_a = {},\n                                            _a[utilities.resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (utilities.isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            fragment = fragmentMap[selection.name.value];\n                            globals.invariant(fragment, 18, selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2 , this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2 ];\n                    });\n                }); };\n                return [2 , Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return utilities.mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, isClientFieldDescendant, rootValue, execContext) {\n        return tslib.__awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return tslib.__generator(this, function (_a) {\n                if (!rootValue) {\n                    return [2 , null];\n                }\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = utilities.resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(\n                            cache.cacheSlot.withValue(this.cache, resolve, [\n                                rootValue,\n                                utilities.argumentsObjectFromField(field, variables),\n                                execContext.context,\n                                { field: field, fragmentMap: execContext.fragmentMap },\n                            ]));\n                        }\n                    }\n                }\n                return [2 , resultPromise.then(function (result) {\n                        var _a, _b;\n                        if (result === void 0) { result = defaultResult; }\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === \"export\" && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        if (result == null) {\n                            return result;\n                        }\n                        var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function (d) { return d.name.value === \"client\"; })) !== null && _b !== void 0 ? _b : false;\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, isClientFieldDescendant, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n            }\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n            }\n        }));\n    };\n    LocalState.prototype.collectSelectionsToResolve = function (mainDefinition, fragmentMap) {\n        var isSingleASTNode = function (node) { return !Array.isArray(node); };\n        var selectionsToResolveCache = this.selectionsToResolveCache;\n        function collectByDefinition(definitionNode) {\n            if (!selectionsToResolveCache.has(definitionNode)) {\n                var matches_1 = new Set();\n                selectionsToResolveCache.set(definitionNode, matches_1);\n                graphql.visit(definitionNode, {\n                    Directive: function (node, _, __, ___, ancestors) {\n                        if (node.name.value === \"client\") {\n                            ancestors.forEach(function (node) {\n                                if (isSingleASTNode(node) && graphql.isSelectionNode(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                        }\n                    },\n                    FragmentSpread: function (spread, _, __, ___, ancestors) {\n                        var fragment = fragmentMap[spread.name.value];\n                        globals.invariant(fragment, 19, spread.name.value);\n                        var fragmentSelections = collectByDefinition(fragment);\n                        if (fragmentSelections.size > 0) {\n                            ancestors.forEach(function (node) {\n                                if (isSingleASTNode(node) && graphql.isSelectionNode(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                            matches_1.add(spread);\n                            fragmentSelections.forEach(function (selection) {\n                                matches_1.add(selection);\n                            });\n                        }\n                    },\n                });\n            }\n            return selectionsToResolveCache.get(definitionNode);\n        }\n        return collectByDefinition(mainDefinition);\n    };\n    return LocalState;\n}());\n\nvar destructiveMethodCounts = new (utilities.canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n    var original = cache[methodName];\n    if (typeof original === \"function\") {\n        cache[methodName] = function () {\n            destructiveMethodCounts.set(cache,\n            (destructiveMethodCounts.get(cache) + 1) % 1e15);\n            return original.apply(this, arguments);\n        };\n    }\n}\nfunction cancelNotifyTimeout(info) {\n    if (info[\"notifyTimeout\"]) {\n        clearTimeout(info[\"notifyTimeout\"]);\n        info[\"notifyTimeout\"] = void 0;\n    }\n}\nvar QueryInfo =  (function () {\n    function QueryInfo(queryManager, queryId) {\n        if (queryId === void 0) { queryId = queryManager.generateQueryId(); }\n        this.queryId = queryId;\n        this.listeners = new Set();\n        this.document = null;\n        this.lastRequestId = 1;\n        this.stopped = false;\n        this.dirty = false;\n        this.observableQuery = null;\n        var cache = (this.cache = queryManager.cache);\n        if (!destructiveMethodCounts.has(cache)) {\n            destructiveMethodCounts.set(cache, 0);\n            wrapDestructiveCacheMethod(cache, \"evict\");\n            wrapDestructiveCacheMethod(cache, \"modify\");\n            wrapDestructiveCacheMethod(cache, \"reset\");\n        }\n    }\n    QueryInfo.prototype.init = function (query) {\n        var networkStatus = query.networkStatus || exports.NetworkStatus.loading;\n        if (this.variables &&\n            this.networkStatus !== exports.NetworkStatus.loading &&\n            !equal.equal(this.variables, query.variables)) {\n            networkStatus = exports.NetworkStatus.setVariables;\n        }\n        if (!equal.equal(query.variables, this.variables)) {\n            this.lastDiff = void 0;\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this.graphQLErrors || [],\n            networkStatus: networkStatus,\n        });\n        if (query.observableQuery) {\n            this.setObservableQuery(query.observableQuery);\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.reset = function () {\n        cancelNotifyTimeout(this);\n        this.dirty = false;\n    };\n    QueryInfo.prototype.resetDiff = function () {\n        this.lastDiff = void 0;\n    };\n    QueryInfo.prototype.getDiff = function () {\n        var options = this.getDiffOptions();\n        if (this.lastDiff && equal.equal(options, this.lastDiff.options)) {\n            return this.lastDiff.diff;\n        }\n        this.updateWatch(this.variables);\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return { complete: false };\n        }\n        var diff = this.cache.diff(options);\n        this.updateLastDiff(diff, options);\n        return diff;\n    };\n    QueryInfo.prototype.updateLastDiff = function (diff, options) {\n        this.lastDiff =\n            diff ?\n                {\n                    diff: diff,\n                    options: options || this.getDiffOptions(),\n                }\n                : void 0;\n    };\n    QueryInfo.prototype.getDiffOptions = function (variables) {\n        var _a;\n        if (variables === void 0) { variables = this.variables; }\n        return {\n            query: this.document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n            canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults,\n        };\n    };\n    QueryInfo.prototype.setDiff = function (diff) {\n        var _this = this;\n        var oldDiff = this.lastDiff && this.lastDiff.diff;\n        this.updateLastDiff(diff);\n        if (!this.dirty && !equal.equal(oldDiff && oldDiff.result, diff && diff.result)) {\n            this.dirty = true;\n            if (!this.notifyTimeout) {\n                this.notifyTimeout = setTimeout(function () { return _this.notify(); }, 0);\n            }\n        }\n    };\n    QueryInfo.prototype.setObservableQuery = function (oq) {\n        var _this = this;\n        if (oq === this.observableQuery)\n            return;\n        if (this.oqListener) {\n            this.listeners.delete(this.oqListener);\n        }\n        this.observableQuery = oq;\n        if (oq) {\n            oq[\"queryInfo\"] = this;\n            this.listeners.add((this.oqListener = function () {\n                var diff = _this.getDiff();\n                if (diff.fromOptimisticTransaction) {\n                    oq[\"observe\"]();\n                }\n                else {\n                    reobserveCacheFirst(oq);\n                }\n            }));\n        }\n        else {\n            delete this.oqListener;\n        }\n    };\n    QueryInfo.prototype.notify = function () {\n        var _this = this;\n        cancelNotifyTimeout(this);\n        if (this.shouldNotify()) {\n            this.listeners.forEach(function (listener) { return listener(_this); });\n        }\n        this.dirty = false;\n    };\n    QueryInfo.prototype.shouldNotify = function () {\n        if (!this.dirty || !this.listeners.size) {\n            return false;\n        }\n        if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n            var fetchPolicy = this.observableQuery.options.fetchPolicy;\n            if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n                return false;\n            }\n        }\n        return true;\n    };\n    QueryInfo.prototype.stop = function () {\n        if (!this.stopped) {\n            this.stopped = true;\n            this.reset();\n            this.cancel();\n            this.cancel = QueryInfo.prototype.cancel;\n            var oq = this.observableQuery;\n            if (oq)\n                oq.stopPolling();\n        }\n    };\n    QueryInfo.prototype.cancel = function () { };\n    QueryInfo.prototype.updateWatch = function (variables) {\n        var _this = this;\n        if (variables === void 0) { variables = this.variables; }\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return;\n        }\n        var watchOptions = tslib.__assign(tslib.__assign({}, this.getDiffOptions(variables)), { watcher: this, callback: function (diff) { return _this.setDiff(diff); } });\n        if (!this.lastWatch || !equal.equal(watchOptions, this.lastWatch)) {\n            this.cancel();\n            this.cancel = this.cache.watch((this.lastWatch = watchOptions));\n        }\n    };\n    QueryInfo.prototype.resetLastWrite = function () {\n        this.lastWrite = void 0;\n    };\n    QueryInfo.prototype.shouldWrite = function (result, variables) {\n        var lastWrite = this.lastWrite;\n        return !(lastWrite &&\n            lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n            equal.equal(variables, lastWrite.variables) &&\n            equal.equal(result.data, lastWrite.result.data));\n    };\n    QueryInfo.prototype.markResult = function (result, document, options, cacheWriteBehavior) {\n        var _this = this;\n        result = tslib.__assign({}, result);\n        var merger = new utilities.DeepMerger();\n        var graphQLErrors = utilities.isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n        this.reset();\n        if (\"incremental\" in result && utilities.isNonEmptyArray(result.incremental)) {\n            var mergedData = utilities.mergeIncrementalData(this.getDiff().result, result);\n            result.data = mergedData;\n        }\n        else if (\"hasNext\" in result && result.hasNext) {\n            var diff = this.getDiff();\n            result.data = merger.merge(diff.result, result.data);\n        }\n        this.graphQLErrors = graphQLErrors;\n        if (options.fetchPolicy === \"no-cache\") {\n            this.updateLastDiff({ result: result.data, complete: true }, this.getDiffOptions(options.variables));\n        }\n        else if (cacheWriteBehavior !== 0 ) {\n            if (shouldWriteResult(result, options.errorPolicy)) {\n                this.cache.performTransaction(function (cache) {\n                    if (_this.shouldWrite(result, options.variables)) {\n                        cache.writeQuery({\n                            query: document,\n                            data: result.data,\n                            variables: options.variables,\n                            overwrite: cacheWriteBehavior === 1 ,\n                        });\n                        _this.lastWrite = {\n                            result: tslib.__assign({}, result),\n                            variables: options.variables,\n                            dmCount: destructiveMethodCounts.get(_this.cache),\n                        };\n                    }\n                    else {\n                        if (_this.lastDiff && _this.lastDiff.diff.complete) {\n                            result.data = _this.lastDiff.diff.result;\n                            return;\n                        }\n                    }\n                    var diffOptions = _this.getDiffOptions(options.variables);\n                    var diff = cache.diff(diffOptions);\n                    if (!_this.stopped && equal.equal(_this.variables, options.variables)) {\n                        _this.updateWatch(options.variables);\n                    }\n                    _this.updateLastDiff(diff, diffOptions);\n                    result.data = diff.result;\n                });\n            }\n            else {\n                this.lastWrite = void 0;\n            }\n        }\n        return result;\n    };\n    QueryInfo.prototype.markReady = function () {\n        this.networkError = null;\n        return (this.networkStatus = exports.NetworkStatus.ready);\n    };\n    QueryInfo.prototype.markError = function (error) {\n        this.networkStatus = exports.NetworkStatus.error;\n        this.lastWrite = void 0;\n        this.reset();\n        if (error.graphQLErrors) {\n            this.graphQLErrors = error.graphQLErrors;\n        }\n        if (error.networkError) {\n            this.networkError = error.networkError;\n        }\n        return error;\n    };\n    return QueryInfo;\n}());\nfunction shouldWriteResult(result, errorPolicy) {\n    if (errorPolicy === void 0) { errorPolicy = \"none\"; }\n    var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n    var writeWithErrors = !utilities.graphQLResultHasError(result);\n    if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n    }\n    return writeWithErrors;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar IGNORE = Object.create(null);\nvar QueryManager =  (function () {\n    function QueryManager(_a) {\n        var cache = _a.cache, link = _a.link, defaultOptions = _a.defaultOptions, documentTransform = _a.documentTransform, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a.onBroadcast, _c = _a.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a.clientAwareness, clientAwareness = _d === void 0 ? {} : _d, localState = _a.localState, _e = _a.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? !!cache.assumeImmutableResults : _e, defaultContext = _a.defaultContext;\n        var _this = this;\n        this.clientAwareness = {};\n        this.queries = new Map();\n        this.fetchCancelFns = new Map();\n        this.transformCache = new utilities.AutoCleanedWeakCache(utilities.cacheSizes[\"queryManager.getDocumentInfo\"] ||\n            2000 );\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        this.inFlightLinkObservables = new trie.Trie(false);\n        var defaultDocumentTransform = new utilities.DocumentTransform(function (document) { return _this.cache.transformDocument(document); },\n        { cache: false });\n        this.cache = cache;\n        this.link = link;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.queryDeduplication = queryDeduplication;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: cache });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = assumeImmutableResults;\n        this.documentTransform =\n            documentTransform ?\n                defaultDocumentTransform\n                    .concat(documentTransform)\n                    .concat(defaultDocumentTransform)\n                : defaultDocumentTransform;\n        this.defaultContext = defaultContext || Object.create(null);\n        if ((this.onBroadcast = onBroadcast)) {\n            this.mutationStore = Object.create(null);\n        }\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches(globals.newInvariantError(25));\n    };\n    QueryManager.prototype.cancelPendingFetches = function (error) {\n        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var _b, _c;\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _d = _a.refetchQueries, refetchQueries = _d === void 0 ? [] : _d, _e = _a.awaitRefetchQueries, awaitRefetchQueries = _e === void 0 ? false : _e, updateWithProxyFn = _a.update, onQueryUpdated = _a.onQueryUpdated, _f = _a.fetchPolicy, fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f, _g = _a.errorPolicy, errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g, keepRootFields = _a.keepRootFields, context = _a.context;\n        return tslib.__awaiter(this, void 0, void 0, function () {\n            var mutationId, hasClientExports, mutationStoreValue, isOptimistic, self;\n            return tslib.__generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        globals.invariant(mutation, 26);\n                        globals.invariant(fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\", 27);\n                        mutationId = this.generateMutationId();\n                        mutation = this.cache.transformForLink(this.transform(mutation));\n                        hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n                        variables = this.getVariables(mutation, variables);\n                        if (!hasClientExports) return [3 , 2];\n                        return [4 , this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = (_h.sent());\n                        _h.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore &&\n                            (this.mutationStore[mutationId] = {\n                                mutation: mutation,\n                                variables: variables,\n                                loading: true,\n                                error: null,\n                            });\n                        isOptimistic = optimisticResponse &&\n                            this.markMutationOptimistic(optimisticResponse, {\n                                mutationId: mutationId,\n                                document: mutation,\n                                variables: variables,\n                                fetchPolicy: fetchPolicy,\n                                errorPolicy: errorPolicy,\n                                context: context,\n                                updateQueries: updateQueries,\n                                update: updateWithProxyFn,\n                                keepRootFields: keepRootFields,\n                            });\n                        this.broadcastQueries();\n                        self = this;\n                        return [2 , new Promise(function (resolve, reject) {\n                                return utilities.asyncMap(self.getObservableFromLink(mutation, tslib.__assign(tslib.__assign({}, context), { optimisticResponse: isOptimistic ? optimisticResponse : void 0 }), variables, false), function (result) {\n                                    if (utilities.graphQLResultHasError(result) && errorPolicy === \"none\") {\n                                        throw new errors.ApolloError({\n                                            graphQLErrors: utilities.getGraphQLErrorsFromResult(result),\n                                        });\n                                    }\n                                    if (mutationStoreValue) {\n                                        mutationStoreValue.loading = false;\n                                        mutationStoreValue.error = null;\n                                    }\n                                    var storeResult = tslib.__assign({}, result);\n                                    if (typeof refetchQueries === \"function\") {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    if (errorPolicy === \"ignore\" && utilities.graphQLResultHasError(storeResult)) {\n                                        delete storeResult.errors;\n                                    }\n                                    return self.markMutationResult({\n                                        mutationId: mutationId,\n                                        result: storeResult,\n                                        document: mutation,\n                                        variables: variables,\n                                        fetchPolicy: fetchPolicy,\n                                        errorPolicy: errorPolicy,\n                                        context: context,\n                                        update: updateWithProxyFn,\n                                        updateQueries: updateQueries,\n                                        awaitRefetchQueries: awaitRefetchQueries,\n                                        refetchQueries: refetchQueries,\n                                        removeOptimistic: isOptimistic ? mutationId : void 0,\n                                        onQueryUpdated: onQueryUpdated,\n                                        keepRootFields: keepRootFields,\n                                    });\n                                }).subscribe({\n                                    next: function (storeResult) {\n                                        self.broadcastQueries();\n                                        if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n                                            resolve(storeResult);\n                                        }\n                                    },\n                                    error: function (err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (isOptimistic) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(err instanceof errors.ApolloError ? err : (new errors.ApolloError({\n                                            networkError: err,\n                                        })));\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function (mutation, cache) {\n        var _this = this;\n        if (cache === void 0) { cache = this.cache; }\n        var result = mutation.result;\n        var cacheWrites = [];\n        var skipCache = mutation.fetchPolicy === \"no-cache\";\n        if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n            if (!utilities.isExecutionPatchIncrementalResult(result)) {\n                cacheWrites.push({\n                    result: result.data,\n                    dataId: \"ROOT_MUTATION\",\n                    query: mutation.document,\n                    variables: mutation.variables,\n                });\n            }\n            if (utilities.isExecutionPatchIncrementalResult(result) &&\n                utilities.isNonEmptyArray(result.incremental)) {\n                var diff = cache.diff({\n                    id: \"ROOT_MUTATION\",\n                    query: this.getDocumentInfo(mutation.document).asQuery,\n                    variables: mutation.variables,\n                    optimistic: false,\n                    returnPartialData: true,\n                });\n                var mergedData = void 0;\n                if (diff.result) {\n                    mergedData = mergeIncrementalData(diff.result, result);\n                }\n                if (typeof mergedData !== \"undefined\") {\n                    result.data = mergedData;\n                    cacheWrites.push({\n                        result: mergedData,\n                        dataId: \"ROOT_MUTATION\",\n                        query: mutation.document,\n                        variables: mutation.variables,\n                    });\n                }\n            }\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function (_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: result,\n                            queryName: (document && utilities.getOperationName(document)) || void 0,\n                            queryVariables: variables,\n                        });\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: \"ROOT_QUERY\",\n                                query: document,\n                                variables: variables,\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        if (cacheWrites.length > 0 ||\n            (mutation.refetchQueries || \"\").length > 0 ||\n            mutation.update ||\n            mutation.onQueryUpdated ||\n            mutation.removeOptimistic) {\n            var results_1 = [];\n            this.refetchQueries({\n                updateCache: function (cache) {\n                    if (!skipCache) {\n                        cacheWrites.forEach(function (write) { return cache.write(write); });\n                    }\n                    var update = mutation.update;\n                    var isFinalResult = !utilities.isExecutionPatchResult(result) ||\n                        (utilities.isExecutionPatchIncrementalResult(result) && !result.hasNext);\n                    if (update) {\n                        if (!skipCache) {\n                            var diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                query: _this.getDocumentInfo(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true,\n                            });\n                            if (diff.complete) {\n                                result = tslib.__assign(tslib.__assign({}, result), { data: diff.result });\n                                if (\"incremental\" in result) {\n                                    delete result.incremental;\n                                }\n                                if (\"hasNext\" in result) {\n                                    delete result.hasNext;\n                                }\n                            }\n                        }\n                        if (isFinalResult) {\n                            update(cache, result, {\n                                context: mutation.context,\n                                variables: mutation.variables,\n                            });\n                        }\n                    }\n                    if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n                        cache.modify({\n                            id: \"ROOT_MUTATION\",\n                            fields: function (value, _a) {\n                                var fieldName = _a.fieldName, DELETE = _a.DELETE;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            },\n                        });\n                    }\n                },\n                include: mutation.refetchQueries,\n                optimistic: false,\n                removeOptimistic: mutation.removeOptimistic,\n                onQueryUpdated: mutation.onQueryUpdated || null,\n            }).forEach(function (result) { return results_1.push(result); });\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                return Promise.all(results_1).then(function () { return result; });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\" ?\n            optimisticResponse(mutation.variables, { IGNORE: IGNORE })\n            : optimisticResponse;\n        if (data === IGNORE) {\n            return false;\n        }\n        this.cache.recordOptimisticTransaction(function (cache) {\n            try {\n                _this.markMutationResult(tslib.__assign(tslib.__assign({}, mutation), { result: { data: data } }), cache);\n            }\n            catch (error) {\n                globalThis.__DEV__ !== false && globals.invariant.error(error);\n            }\n        }, mutation.mutationId);\n        return true;\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n        return this.fetchConcastWithInfo(queryId, options, networkStatus).concast\n            .promise;\n    };\n    QueryManager.prototype.getQueryStore = function () {\n        var store = Object.create(null);\n        this.queries.forEach(function (info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors,\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function (document) {\n        return this.documentTransform.transformDocument(document);\n    };\n    QueryManager.prototype.getDocumentInfo = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cacheEntry = {\n                hasClientExports: utilities.hasClientExports(document),\n                hasForcedResolvers: this.localState.shouldForceResolvers(document),\n                hasNonreactiveDirective: utilities.hasDirectives([\"nonreactive\"], document),\n                clientQuery: this.localState.clientQuery(document),\n                serverQuery: utilities.removeDirectivesFromDocument([\n                    { name: \"client\", remove: true },\n                    { name: \"connection\" },\n                    { name: \"nonreactive\" },\n                ], document),\n                defaultVars: utilities.getDefaultValues(utilities.getOperationDefinition(document)),\n                asQuery: tslib.__assign(tslib.__assign({}, document), { definitions: document.definitions.map(function (def) {\n                        if (def.kind === \"OperationDefinition\" &&\n                            def.operation !== \"query\") {\n                            return tslib.__assign(tslib.__assign({}, def), { operation: \"query\" });\n                        }\n                        return def;\n                    }) }),\n            };\n            transformCache.set(document, cacheEntry);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return tslib.__assign(tslib.__assign({}, this.getDocumentInfo(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options) {\n        var query = this.transform(options.query);\n        options = tslib.__assign(tslib.__assign({}, options), { variables: this.getVariables(query, options.variables) });\n        if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new QueryInfo(this);\n        var observable = new ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options,\n        });\n        observable[\"lastQuery\"] = query;\n        this.queries.set(observable.queryId, queryInfo);\n        queryInfo.init({\n            document: query,\n            observableQuery: observable,\n            variables: observable.variables,\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function (options, queryId) {\n        var _this = this;\n        if (queryId === void 0) { queryId = this.generateQueryId(); }\n        globals.invariant(options.query, 28);\n        globals.invariant(options.query.kind === \"Document\", 29);\n        globals.invariant(!options.returnPartialData, 30);\n        globals.invariant(!options.pollInterval, 31);\n        return this.fetchQuery(queryId, tslib.__assign(tslib.__assign({}, options), { query: this.transform(options.query) })).finally(function () { return _this.stopQuery(queryId); });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function () {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo)\n            queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function (options) {\n        if (options === void 0) { options = {\n            discardWatches: true,\n        }; }\n        this.cancelPendingFetches(globals.newInvariantError(32));\n        this.queries.forEach(function (queryInfo) {\n            if (queryInfo.observableQuery) {\n                queryInfo.networkStatus = exports.NetworkStatus.loading;\n            }\n            else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        return this.cache.reset(options);\n    };\n    QueryManager.prototype.getObservableQueries = function (include) {\n        var _this = this;\n        if (include === void 0) { include = \"active\"; }\n        var queries = new Map();\n        var queryNamesAndDocs = new Map();\n        var legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach(function (desc) {\n                if (typeof desc === \"string\") {\n                    queryNamesAndDocs.set(desc, false);\n                }\n                else if (utilities.isDocumentNode(desc)) {\n                    queryNamesAndDocs.set(_this.transform(desc), false);\n                }\n                else if (utilities.isNonNullObject(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.queries.forEach(function (_a, queryId) {\n            var oq = _a.observableQuery, document = _a.document;\n            if (oq) {\n                if (include === \"all\") {\n                    queries.set(queryId, oq);\n                    return;\n                }\n                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;\n                if (fetchPolicy === \"standby\" ||\n                    (include === \"active\" && !oq.hasObservers())) {\n                    return;\n                }\n                if (include === \"active\" ||\n                    (queryName && queryNamesAndDocs.has(queryName)) ||\n                    (document && queryNamesAndDocs.has(document))) {\n                    queries.set(queryId, oq);\n                    if (queryName)\n                        queryNamesAndDocs.set(queryName, true);\n                    if (document)\n                        queryNamesAndDocs.set(document, true);\n                }\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach(function (options) {\n                var queryId = utilities.makeUniqueId(\"legacyOneTimeQuery\");\n                var queryInfo = _this.getQuery(queryId).init({\n                    document: options.query,\n                    variables: options.variables,\n                });\n                var oq = new ObservableQuery({\n                    queryManager: _this,\n                    queryInfo: queryInfo,\n                    options: tslib.__assign(tslib.__assign({}, options), { fetchPolicy: \"network-only\" }),\n                });\n                globals.invariant(oq.queryId === queryId);\n                queryInfo.setObservableQuery(oq);\n                queries.set(queryId, oq);\n            });\n        }\n        if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {\n            queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n                if (!included) {\n                    globalThis.__DEV__ !== false && globals.invariant.warn(typeof nameOrDoc === \"string\" ? 33 : 34, nameOrDoc);\n                }\n            });\n        }\n        return queries;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (includeStandby ||\n                (fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\")) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.getQuery(queryId).setDiff(null);\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function (observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, _b = _a.errorPolicy, errorPolicy = _b === void 0 ? \"none\" : _b, variables = _a.variables, _c = _a.context, context = _c === void 0 ? {} : _c;\n        query = this.transform(query);\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, context, variables).map(function (result) {\n                if (fetchPolicy !== \"no-cache\") {\n                    if (shouldWriteResult(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: \"ROOT_SUBSCRIPTION\",\n                            variables: variables,\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                var hasErrors = utilities.graphQLResultHasError(result);\n                var hasProtocolErrors = errors.graphQLResultHasProtocolErrors(result);\n                if (hasErrors || hasProtocolErrors) {\n                    var errors$1 = {};\n                    if (hasErrors) {\n                        errors$1.graphQLErrors = result.errors;\n                    }\n                    if (hasProtocolErrors) {\n                        errors$1.protocolErrors = result.extensions[errors.PROTOCOL_ERRORS_SYMBOL];\n                    }\n                    if (errorPolicy === \"none\" || hasProtocolErrors) {\n                        throw new errors.ApolloError(errors$1);\n                    }\n                }\n                if (errorPolicy === \"ignore\") {\n                    delete result.errors;\n                }\n                return result;\n            });\n        };\n        if (this.getDocumentInfo(query).hasClientExports) {\n            var observablePromise_1 = this.localState\n                .addExportedVariables(query, variables, context)\n                .then(makeObservable);\n            return new utilities.Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return (sub = observable.subscribe(observer)); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchCancelFns.delete(queryId);\n        if (this.queries.has(queryId)) {\n            this.getQuery(queryId).stop();\n            this.queries.delete(queryId);\n        }\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        if (this.onBroadcast)\n            this.onBroadcast();\n        this.queries.forEach(function (info) { return info.notify(); });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables,\n    deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) { deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication; }\n        var observable;\n        var _b = this.getDocumentInfo(query), serverQuery = _b.serverQuery, clientQuery = _b.clientQuery;\n        if (serverQuery) {\n            var _c = this, inFlightLinkObservables_1 = _c.inFlightLinkObservables, link = _c.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: utilities.getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(tslib.__assign(tslib.__assign({}, context), { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var printedServerQuery_1 = utilities.print(serverQuery);\n                var varJson_1 = cache.canonicalStringify(variables);\n                var entry = inFlightLinkObservables_1.lookup(printedServerQuery_1, varJson_1);\n                observable = entry.observable;\n                if (!observable) {\n                    var concast = new utilities.Concast([\n                        core.execute(link, operation),\n                    ]);\n                    observable = entry.observable = concast;\n                    concast.beforeNext(function () {\n                        inFlightLinkObservables_1.remove(printedServerQuery_1, varJson_1);\n                    });\n                }\n            }\n            else {\n                observable = new utilities.Concast([\n                    core.execute(link, operation),\n                ]);\n            }\n        }\n        else {\n            observable = new utilities.Concast([utilities.Observable.of({ data: {} })]);\n            context = this.prepareContext(context);\n        }\n        if (clientQuery) {\n            observable = utilities.asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n        var requestId = (queryInfo.lastRequestId = this.generateRequestId());\n        var linkDocument = this.cache.transformForLink(options.query);\n        return utilities.asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n            var graphQLErrors = utilities.getGraphQLErrorsFromResult(result);\n            var hasErrors = graphQLErrors.length > 0;\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && options.errorPolicy === \"none\") {\n                    throw queryInfo.markError(new errors.ApolloError({\n                        graphQLErrors: graphQLErrors,\n                    }));\n                }\n                result = queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: exports.NetworkStatus.ready,\n            };\n            if (hasErrors && options.errorPolicy !== \"ignore\") {\n                aqr.errors = graphQLErrors;\n                aqr.networkStatus = exports.NetworkStatus.error;\n            }\n            return aqr;\n        }, function (networkError) {\n            var error = errors.isApolloError(networkError) ? networkError : (new errors.ApolloError({ networkError: networkError }));\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchConcastWithInfo = function (queryId, options,\n    networkStatus, query) {\n        var _this = this;\n        if (networkStatus === void 0) { networkStatus = exports.NetworkStatus.loading; }\n        if (query === void 0) { query = options.query; }\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var defaults = this.defaultOptions.watchQuery;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? (defaults && defaults.fetchPolicy) || \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? (defaults && defaults.errorPolicy) || \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context,\n        });\n        var fromVariables = function (variables) {\n            normalized.variables = variables;\n            var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n            if (\n            normalized.fetchPolicy !== \"standby\" &&\n                sourcesWithInfo.sources.length > 0 &&\n                queryInfo.observableQuery) {\n                queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n            }\n            return sourcesWithInfo;\n        };\n        var cleanupCancelFn = function () { return _this.fetchCancelFns.delete(queryId); };\n        this.fetchCancelFns.set(queryId, function (reason) {\n            cleanupCancelFn();\n            setTimeout(function () { return concast.cancel(reason); });\n        });\n        var concast, containsDataFromLink;\n        if (this.getDocumentInfo(normalized.query).hasClientExports) {\n            concast = new utilities.Concast(this.localState\n                .addExportedVariables(normalized.query, normalized.variables, normalized.context)\n                .then(fromVariables)\n                .then(function (sourcesWithInfo) { return sourcesWithInfo.sources; }));\n            containsDataFromLink = true;\n        }\n        else {\n            var sourcesWithInfo = fromVariables(normalized.variables);\n            containsDataFromLink = sourcesWithInfo.fromLink;\n            concast = new utilities.Concast(sourcesWithInfo.sources);\n        }\n        concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n        return {\n            concast: concast,\n            fromLink: containsDataFromLink,\n        };\n    };\n    QueryManager.prototype.refetchQueries = function (_a) {\n        var _this = this;\n        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? utilities.makeUniqueId(\"refetchQueries\") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;\n        var includedQueriesById = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach(function (oq, queryId) {\n                includedQueriesById.set(queryId, {\n                    oq: oq,\n                    lastDiff: _this.getQuery(queryId).getDiff(),\n                });\n            });\n        }\n        var results = new Map();\n        if (updateCache) {\n            this.cache.batch({\n                update: updateCache,\n                optimistic: (optimistic && removeOptimistic) || false,\n                removeOptimistic: removeOptimistic,\n                onWatchUpdated: function (watch, diff, lastDiff) {\n                    var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n                    if (oq) {\n                        if (onQueryUpdated) {\n                            includedQueriesById.delete(oq.queryId);\n                            var result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                result = oq.refetch();\n                            }\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            return result;\n                        }\n                        if (onQueryUpdated !== null) {\n                            includedQueriesById.set(oq.queryId, { oq: oq, lastDiff: lastDiff, diff: diff });\n                        }\n                    }\n                },\n            });\n        }\n        if (includedQueriesById.size) {\n            includedQueriesById.forEach(function (_a, queryId) {\n                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;\n                var result;\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        var info = oq[\"queryInfo\"];\n                        info.reset();\n                        diff = info.getDiff();\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n                if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n                    _this.stopQueryNoBroadcast(queryId);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a,\n    networkStatus) {\n        var _this = this;\n        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        var oldNetworkStatus = queryInfo.networkStatus;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            networkStatus: networkStatus,\n        });\n        var readCache = function () { return queryInfo.getDiff(); };\n        var resultsFromCache = function (diff, networkStatus) {\n            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || exports.NetworkStatus.loading; }\n            var data = diff.result;\n            if (globalThis.__DEV__ !== false && !returnPartialData && !equal.equal(data, {})) {\n                logMissingFieldErrors(diff.missing);\n            }\n            var fromData = function (data) {\n                return utilities.Observable.of(tslib.__assign({ data: data, loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus }, (diff.complete ? null : { partial: true })));\n            };\n            if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n                return _this.localState\n                    .runResolvers({\n                    document: query,\n                    remoteResult: { data: data },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true,\n                })\n                    .then(function (resolved) { return fromData(resolved.data || void 0); });\n            }\n            if (errorPolicy === \"none\" &&\n                networkStatus === exports.NetworkStatus.refetch &&\n                Array.isArray(diff.missing)) {\n                return fromData(void 0);\n            }\n            return fromData(data);\n        };\n        var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0\n            : (networkStatus === exports.NetworkStatus.refetch &&\n                refetchWritePolicy !== \"merge\") ?\n                1\n                : 2 ;\n        var resultsFromLink = function () {\n            return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n                query: query,\n                variables: variables,\n                context: context,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n            });\n        };\n        var shouldNotify = notifyOnNetworkStatusChange &&\n            typeof oldNetworkStatus === \"number\" &&\n            oldNetworkStatus !== networkStatus &&\n            isNetworkRequestInFlight(networkStatus);\n        switch (fetchPolicy) {\n            default:\n            case \"cache-first\": {\n                var diff = readCache();\n                if (diff.complete) {\n                    return {\n                        fromLink: false,\n                        sources: [resultsFromCache(diff, queryInfo.markReady())],\n                    };\n                }\n                if (returnPartialData || shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [resultsFromCache(diff), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            }\n            case \"cache-and-network\": {\n                var diff = readCache();\n                if (diff.complete || returnPartialData || shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [resultsFromCache(diff), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            }\n            case \"cache-only\":\n                return {\n                    fromLink: false,\n                    sources: [resultsFromCache(readCache(), queryInfo.markReady())],\n                };\n            case \"network-only\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [resultsFromCache(readCache()), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            case \"no-cache\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            case \"standby\":\n                return { fromLink: false, sources: [] };\n        }\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new QueryInfo(this, queryId));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return tslib.__assign(tslib.__assign(tslib.__assign({}, this.defaultContext), newContext), { clientAwareness: this.clientAwareness });\n    };\n    return QueryManager;\n}());\n\nvar cacheSizeSymbol = Symbol.for(\"apollo.cacheSize\");\nvar cacheSizes = tslib.__assign({}, globals.global[cacheSizeSymbol]);\n\nvar globalCaches = {};\nvar getApolloClientMemoryInternals = globalThis.__DEV__ !== false ?\n    _getApolloClientMemoryInternals\n    : undefined;\nfunction getCurrentCacheSizes() {\n    var defaults = {\n        parser: 1000 ,\n        canonicalStringify: 1000 ,\n        print: 2000 ,\n        \"documentTransform.cache\": 2000 ,\n        \"queryManager.getDocumentInfo\": 2000 ,\n        \"PersistedQueryLink.persistedQueryHashes\": 2000 ,\n        \"fragmentRegistry.transform\": 2000 ,\n        \"fragmentRegistry.lookup\": 1000 ,\n        \"fragmentRegistry.findFragmentSpreads\": 4000 ,\n        \"cache.fragmentQueryDocuments\": 1000 ,\n        \"removeTypenameFromVariables.getVariableDefinitions\": 2000 ,\n        \"inMemoryCache.maybeBroadcastWatch\": 5000 ,\n        \"inMemoryCache.executeSelectionSet\": 50000 ,\n        \"inMemoryCache.executeSubSelectedArray\": 10000 ,\n    };\n    return Object.fromEntries(Object.entries(defaults).map(function (_a) {\n        var k = _a[0], v = _a[1];\n        return [\n            k,\n            cacheSizes[k] || v,\n        ];\n    }));\n}\nfunction _getApolloClientMemoryInternals() {\n    var _a, _b, _c, _d, _e;\n    if (!(globalThis.__DEV__ !== false))\n        throw new Error(\"only supported in development mode\");\n    return {\n        limits: getCurrentCacheSizes(),\n        sizes: tslib.__assign({ print: (_a = globalCaches.print) === null || _a === void 0 ? void 0 : _a.call(globalCaches), parser: (_b = globalCaches.parser) === null || _b === void 0 ? void 0 : _b.call(globalCaches), canonicalStringify: (_c = globalCaches.canonicalStringify) === null || _c === void 0 ? void 0 : _c.call(globalCaches), links: linkInfo(this.link), queryManager: {\n                getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n                documentTransforms: transformInfo(this[\"queryManager\"].documentTransform),\n            } }, (_e = (_d = this.cache).getMemoryInternals) === null || _e === void 0 ? void 0 : _e.call(_d)),\n    };\n}\nfunction isWrapper(f) {\n    return !!f && \"dirtyKey\" in f;\n}\nfunction getWrapperInformation(f) {\n    return isWrapper(f) ? f.size : undefined;\n}\nfunction isDefined(value) {\n    return value != null;\n}\nfunction transformInfo(transform) {\n    return recurseTransformInfo(transform).map(function (cache) { return ({ cache: cache }); });\n}\nfunction recurseTransformInfo(transform) {\n    return transform ?\n        tslib.__spreadArray(tslib.__spreadArray([\n            getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform[\"performWork\"])\n        ], recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"left\"]), true), recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"right\"]), true).filter(isDefined)\n        : [];\n}\nfunction linkInfo(link) {\n    var _a;\n    return link ?\n        tslib.__spreadArray(tslib.__spreadArray([\n            (_a = link === null || link === void 0 ? void 0 : link.getMemoryInternals) === null || _a === void 0 ? void 0 : _a.call(link)\n        ], linkInfo(link === null || link === void 0 ? void 0 : link.left), true), linkInfo(link === null || link === void 0 ? void 0 : link.right), true).filter(isDefined)\n        : [];\n}\n\nvar hasSuggestedDevtools = false;\nvar ApolloClient =  (function () {\n    function ApolloClient(options) {\n        var _this = this;\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        if (!options.cache) {\n            throw globals.newInvariantError(15);\n        }\n        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, documentTransform = options.documentTransform, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b,\n        _c = options.connectToDevTools,\n        connectToDevTools = _c === void 0 ? typeof window === \"object\" &&\n            !window.__APOLLO_CLIENT__ &&\n            globalThis.__DEV__ !== false : _c, _d = options.queryDeduplication, queryDeduplication = _d === void 0 ? true : _d, defaultOptions = options.defaultOptions, defaultContext = options.defaultContext, _e = options.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? cache.assumeImmutableResults : _e, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        var link = options.link;\n        if (!link) {\n            link =\n                uri ? new http.HttpLink({ uri: uri, credentials: credentials, headers: headers }) : core.ApolloLink.empty();\n        }\n        this.link = link;\n        this.cache = cache;\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.typeDefs = typeDefs;\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        this.version = version;\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n        this.queryManager = new QueryManager({\n            cache: this.cache,\n            link: this.link,\n            defaultOptions: this.defaultOptions,\n            defaultContext: defaultContext,\n            documentTransform: documentTransform,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion,\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: connectToDevTools ?\n                function () {\n                    if (_this.devToolsHookCb) {\n                        _this.devToolsHookCb({\n                            action: {},\n                            state: {\n                                queries: _this.queryManager.getQueryStore(),\n                                mutations: _this.queryManager.mutationStore || {},\n                            },\n                            dataWithOptimisticResults: _this.cache.extract(true),\n                        });\n                    }\n                }\n                : void 0,\n        });\n        if (connectToDevTools)\n            this.connectToDevTools();\n    }\n    ApolloClient.prototype.connectToDevTools = function () {\n        if (typeof window === \"object\") {\n            var windowWithDevTools = window;\n            var devtoolsSymbol = Symbol.for(\"apollo.devtools\");\n            (windowWithDevTools[devtoolsSymbol] =\n                windowWithDevTools[devtoolsSymbol] || []).push(this);\n            windowWithDevTools.__APOLLO_CLIENT__ = this;\n        }\n        if (!hasSuggestedDevtools && globalThis.__DEV__ !== false) {\n            hasSuggestedDevtools = true;\n            setTimeout(function () {\n                if (typeof window !== \"undefined\" &&\n                    window.document &&\n                    window.top === window.self &&\n                    !window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n                    var nav = window.navigator;\n                    var ua = nav && nav.userAgent;\n                    var url = void 0;\n                    if (typeof ua === \"string\") {\n                        if (ua.indexOf(\"Chrome/\") > -1) {\n                            url =\n                                \"https://chrome.google.com/webstore/detail/\" +\n                                    \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n                        }\n                        else if (ua.indexOf(\"Firefox/\") > -1) {\n                            url =\n                                \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n                        }\n                    }\n                    if (url) {\n                        globalThis.__DEV__ !== false && globals.invariant.log(\"Download the Apollo DevTools for a better development \" +\n                            \"experience: %s\", url);\n                    }\n                }\n            }, 10000);\n        }\n    };\n    Object.defineProperty(ApolloClient.prototype, \"documentTransform\", {\n        get: function () {\n            return this.queryManager.documentTransform;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ApolloClient.prototype.stop = function () {\n        this.queryManager.stop();\n    };\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = utilities.mergeOptions(this.defaultOptions.watchQuery, options);\n        }\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === \"network-only\" ||\n                options.fetchPolicy === \"cache-and-network\")) {\n            options = tslib.__assign(tslib.__assign({}, options), { fetchPolicy: \"cache-first\" });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = utilities.mergeOptions(this.defaultOptions.query, options);\n        }\n        globals.invariant(options.fetchPolicy !== \"cache-and-network\", 16);\n        if (this.disableNetworkFetches && options.fetchPolicy === \"network-only\") {\n            options = tslib.__assign(tslib.__assign({}, options), { fetchPolicy: \"cache-first\" });\n        }\n        return this.queryManager.query(options);\n    };\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = utilities.mergeOptions(this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readQuery(options, optimistic);\n    };\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readFragment(options, optimistic);\n    };\n    ApolloClient.prototype.writeQuery = function (options) {\n        var ref = this.cache.writeQuery(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    ApolloClient.prototype.writeFragment = function (options) {\n        var ref = this.cache.writeFragment(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return core.execute(this.link, payload);\n    };\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.queryManager.clearStore({\n                discardWatches: false,\n            });\n        })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () { return _this.reFetchObservableQueries(); });\n    };\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.queryManager.clearStore({\n                discardWatches: true,\n            });\n        })\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); });\n    };\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    ApolloClient.prototype.refetchQueries = function (options) {\n        var map = this.queryManager.refetchQueries(options);\n        var queries = [];\n        var results = [];\n        map.forEach(function (result, obsQuery) {\n            queries.push(obsQuery);\n            results.push(result);\n        });\n        var result = Promise.all(results);\n        result.queries = queries;\n        result.results = results;\n        result.catch(function (error) {\n            globalThis.__DEV__ !== false && globals.invariant.debug(17, error);\n        });\n        return result;\n    };\n    ApolloClient.prototype.getObservableQueries = function (include) {\n        if (include === void 0) { include = \"active\"; }\n        return this.queryManager.getObservableQueries(include);\n    };\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    ApolloClient.prototype.setLink = function (newLink) {\n        this.link = this.queryManager.link = newLink;\n    };\n    Object.defineProperty(ApolloClient.prototype, \"defaultContext\", {\n        get: function () {\n            return this.queryManager.defaultContext;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ApolloClient;\n}());\nif (globalThis.__DEV__ !== false) {\n    ApolloClient.prototype.getMemoryInternals = getApolloClientMemoryInternals;\n}\n\ntsInvariant.setVerbosity(globalThis.__DEV__ !== false ? \"log\" : \"silent\");\n\nexports.DocumentTransform = utilities.DocumentTransform;\nexports.Observable = utilities.Observable;\nexports.isReference = utilities.isReference;\nexports.makeReference = utilities.makeReference;\nexports.mergeOptions = utilities.mergeOptions;\nexports.ApolloCache = cache.ApolloCache;\nexports.Cache = cache.Cache;\nexports.InMemoryCache = cache.InMemoryCache;\nexports.MissingFieldError = cache.MissingFieldError;\nexports.defaultDataIdFromObject = cache.defaultDataIdFromObject;\nexports.makeVar = cache.makeVar;\nexports.ApolloError = errors.ApolloError;\nexports.isApolloError = errors.isApolloError;\nexports.fromError = utils.fromError;\nexports.fromPromise = utils.fromPromise;\nexports.throwServerError = utils.throwServerError;\nexports.toPromise = utils.toPromise;\nexports.setLogVerbosity = tsInvariant.setVerbosity;\nexports.disableExperimentalFragmentVariables = graphqlTag.disableExperimentalFragmentVariables;\nexports.disableFragmentWarnings = graphqlTag.disableFragmentWarnings;\nexports.enableExperimentalFragmentVariables = graphqlTag.enableExperimentalFragmentVariables;\nexports.gql = graphqlTag.gql;\nexports.resetCaches = graphqlTag.resetCaches;\nexports.ApolloClient = ApolloClient;\nexports.ObservableQuery = ObservableQuery;\nexports.isNetworkRequestSettled = isNetworkRequestSettled;\nfor (var k in core) {\n    if (k !== 'default' && !exports.hasOwnProperty(k)) exports[k] = core[k];\n}\nfor (var k in http) {\n    if (k !== 'default' && !exports.hasOwnProperty(k)) exports[k] = http[k];\n}\n//# sourceMappingURL=core.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/core.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/errors/errors.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/@apollo/client/errors/errors.cjs ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar tslib = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n__webpack_require__(/*! ../utilities/globals */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/globals.cjs\");\nvar utilities = __webpack_require__(/*! ../utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs\");\n\nvar PROTOCOL_ERRORS_SYMBOL = Symbol();\nfunction graphQLResultHasProtocolErrors(result) {\n    if (result.extensions) {\n        return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n    }\n    return false;\n}\nfunction isApolloError(err) {\n    return err.hasOwnProperty(\"graphQLErrors\");\n}\nvar generateErrorMessage = function (err) {\n    var errors = tslib.__spreadArray(tslib.__spreadArray(tslib.__spreadArray([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);\n    if (err.networkError)\n        errors.push(err.networkError);\n    return (errors\n        .map(function (err) {\n        return (utilities.isNonNullObject(err) && err.message) || \"Error message not found.\";\n    })\n        .join(\"\\n\"));\n};\nvar ApolloError =  (function (_super) {\n    tslib.__extends(ApolloError, _super);\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, protocolErrors = _a.protocolErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.name = \"ApolloError\";\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.protocolErrors = protocolErrors || [];\n        _this.clientErrors = clientErrors || [];\n        _this.networkError = networkError || null;\n        _this.message = errorMessage || generateErrorMessage(_this);\n        _this.extraInfo = extraInfo;\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\n\nexports.ApolloError = ApolloError;\nexports.PROTOCOL_ERRORS_SYMBOL = PROTOCOL_ERRORS_SYMBOL;\nexports.graphQLResultHasProtocolErrors = graphQLResultHasProtocolErrors;\nexports.isApolloError = isApolloError;\n//# sourceMappingURL=errors.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvZXJyb3JzL2Vycm9ycy5janMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxZQUFZLG1CQUFPLENBQUMsdURBQU87QUFDM0IsbUJBQU8sQ0FBQywrRkFBc0I7QUFDOUIsZ0JBQWdCLG1CQUFPLENBQUMsaUZBQWM7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCxtQkFBbUI7QUFDbkIsOEJBQThCO0FBQzlCLHNDQUFzQztBQUN0QyxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9henVyby1iZXR0aW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9lcnJvcnMvZXJyb3JzLmNqcz9iZTZlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIHRzbGliID0gcmVxdWlyZSgndHNsaWInKTtcbnJlcXVpcmUoJy4uL3V0aWxpdGllcy9nbG9iYWxzJyk7XG52YXIgdXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzJyk7XG5cbnZhciBQUk9UT0NPTF9FUlJPUlNfU1lNQk9MID0gU3ltYm9sKCk7XG5mdW5jdGlvbiBncmFwaFFMUmVzdWx0SGFzUHJvdG9jb2xFcnJvcnMocmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdC5leHRlbnNpb25zKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHJlc3VsdC5leHRlbnNpb25zW1BST1RPQ09MX0VSUk9SU19TWU1CT0xdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNBcG9sbG9FcnJvcihlcnIpIHtcbiAgICByZXR1cm4gZXJyLmhhc093blByb3BlcnR5KFwiZ3JhcGhRTEVycm9yc1wiKTtcbn1cbnZhciBnZW5lcmF0ZUVycm9yTWVzc2FnZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICB2YXIgZXJyb3JzID0gdHNsaWIuX19zcHJlYWRBcnJheSh0c2xpYi5fX3NwcmVhZEFycmF5KHRzbGliLl9fc3ByZWFkQXJyYXkoW10sIGVyci5ncmFwaFFMRXJyb3JzLCB0cnVlKSwgZXJyLmNsaWVudEVycm9ycywgdHJ1ZSksIGVyci5wcm90b2NvbEVycm9ycywgdHJ1ZSk7XG4gICAgaWYgKGVyci5uZXR3b3JrRXJyb3IpXG4gICAgICAgIGVycm9ycy5wdXNoKGVyci5uZXR3b3JrRXJyb3IpO1xuICAgIHJldHVybiAoZXJyb3JzXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGVycikge1xuICAgICAgICByZXR1cm4gKHV0aWxpdGllcy5pc05vbk51bGxPYmplY3QoZXJyKSAmJiBlcnIubWVzc2FnZSkgfHwgXCJFcnJvciBtZXNzYWdlIG5vdCBmb3VuZC5cIjtcbiAgICB9KVxuICAgICAgICAuam9pbihcIlxcblwiKSk7XG59O1xudmFyIEFwb2xsb0Vycm9yID0gIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWIuX19leHRlbmRzKEFwb2xsb0Vycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFwb2xsb0Vycm9yKF9hKSB7XG4gICAgICAgIHZhciBncmFwaFFMRXJyb3JzID0gX2EuZ3JhcGhRTEVycm9ycywgcHJvdG9jb2xFcnJvcnMgPSBfYS5wcm90b2NvbEVycm9ycywgY2xpZW50RXJyb3JzID0gX2EuY2xpZW50RXJyb3JzLCBuZXR3b3JrRXJyb3IgPSBfYS5uZXR3b3JrRXJyb3IsIGVycm9yTWVzc2FnZSA9IF9hLmVycm9yTWVzc2FnZSwgZXh0cmFJbmZvID0gX2EuZXh0cmFJbmZvO1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBlcnJvck1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5hbWUgPSBcIkFwb2xsb0Vycm9yXCI7XG4gICAgICAgIF90aGlzLmdyYXBoUUxFcnJvcnMgPSBncmFwaFFMRXJyb3JzIHx8IFtdO1xuICAgICAgICBfdGhpcy5wcm90b2NvbEVycm9ycyA9IHByb3RvY29sRXJyb3JzIHx8IFtdO1xuICAgICAgICBfdGhpcy5jbGllbnRFcnJvcnMgPSBjbGllbnRFcnJvcnMgfHwgW107XG4gICAgICAgIF90aGlzLm5ldHdvcmtFcnJvciA9IG5ldHdvcmtFcnJvciB8fCBudWxsO1xuICAgICAgICBfdGhpcy5tZXNzYWdlID0gZXJyb3JNZXNzYWdlIHx8IGdlbmVyYXRlRXJyb3JNZXNzYWdlKF90aGlzKTtcbiAgICAgICAgX3RoaXMuZXh0cmFJbmZvID0gZXh0cmFJbmZvO1xuICAgICAgICBfdGhpcy5fX3Byb3RvX18gPSBBcG9sbG9FcnJvci5wcm90b3R5cGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEFwb2xsb0Vycm9yO1xufShFcnJvcikpO1xuXG5leHBvcnRzLkFwb2xsb0Vycm9yID0gQXBvbGxvRXJyb3I7XG5leHBvcnRzLlBST1RPQ09MX0VSUk9SU19TWU1CT0wgPSBQUk9UT0NPTF9FUlJPUlNfU1lNQk9MO1xuZXhwb3J0cy5ncmFwaFFMUmVzdWx0SGFzUHJvdG9jb2xFcnJvcnMgPSBncmFwaFFMUmVzdWx0SGFzUHJvdG9jb2xFcnJvcnM7XG5leHBvcnRzLmlzQXBvbGxvRXJyb3IgPSBpc0Fwb2xsb0Vycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmNqcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/errors/errors.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/core/core.cjs":
/*!********************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/core.cjs ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar globals = __webpack_require__(/*! ../../utilities/globals */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/globals.cjs\");\nvar utilities = __webpack_require__(/*! ../../utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/@apollo/client/link/utils/utils.cjs\");\n\nfunction passthrough(op, forward) {\n    return (forward ? forward(op) : utilities.Observable.of());\n}\nfunction toLink(handler) {\n    return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nvar ApolloLink =  (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.empty = function () {\n        return new ApolloLink(function () { return utilities.Observable.of(); });\n    };\n    ApolloLink.from = function (links) {\n        if (links.length === 0)\n            return ApolloLink.empty();\n        return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n    };\n    ApolloLink.split = function (test, left, right) {\n        var leftLink = toLink(left);\n        var rightLink = toLink(right || new ApolloLink(passthrough));\n        var ret;\n        if (isTerminating(leftLink) && isTerminating(rightLink)) {\n            ret = new ApolloLink(function (operation) {\n                return test(operation) ?\n                    leftLink.request(operation) || utilities.Observable.of()\n                    : rightLink.request(operation) || utilities.Observable.of();\n            });\n        }\n        else {\n            ret = new ApolloLink(function (operation, forward) {\n                return test(operation) ?\n                    leftLink.request(operation, forward) || utilities.Observable.of()\n                    : rightLink.request(operation, forward) || utilities.Observable.of();\n            });\n        }\n        return Object.assign(ret, { left: leftLink, right: rightLink });\n    };\n    ApolloLink.execute = function (link, operation) {\n        return (link.request(utils.createOperation(operation.context, utils.transformOperation(utils.validateOperation(operation)))) || utilities.Observable.of());\n    };\n    ApolloLink.concat = function (first, second) {\n        var firstLink = toLink(first);\n        if (isTerminating(firstLink)) {\n            globalThis.__DEV__ !== false && globals.invariant.warn(35, firstLink);\n            return firstLink;\n        }\n        var nextLink = toLink(second);\n        var ret;\n        if (isTerminating(nextLink)) {\n            ret = new ApolloLink(function (operation) {\n                return firstLink.request(operation, function (op) { return nextLink.request(op) || utilities.Observable.of(); }) || utilities.Observable.of();\n            });\n        }\n        else {\n            ret = new ApolloLink(function (operation, forward) {\n                return (firstLink.request(operation, function (op) {\n                    return nextLink.request(op, forward) || utilities.Observable.of();\n                }) || utilities.Observable.of());\n            });\n        }\n        return Object.assign(ret, { left: firstLink, right: nextLink });\n    };\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return ApolloLink.concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw globals.newInvariantError(36);\n    };\n    ApolloLink.prototype.onError = function (error, observer) {\n        if (observer && observer.error) {\n            observer.error(error);\n            return false;\n        }\n        throw error;\n    };\n    ApolloLink.prototype.setOnError = function (fn) {\n        this.onError = fn;\n        return this;\n    };\n    return ApolloLink;\n}());\n\nvar empty = ApolloLink.empty;\n\nvar from = ApolloLink.from;\n\nvar split = ApolloLink.split;\n\nvar concat = ApolloLink.concat;\n\nvar execute = ApolloLink.execute;\n\nexports.ApolloLink = ApolloLink;\nexports.concat = concat;\nexports.empty = empty;\nexports.execute = execute;\nexports.from = from;\nexports.split = split;\n//# sourceMappingURL=core.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2NvcmUuY2pzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsY0FBYyxtQkFBTyxDQUFDLGtHQUF5QjtBQUMvQyxnQkFBZ0IsbUJBQU8sQ0FBQyxvRkFBaUI7QUFDekMsWUFBWSxtQkFBTyxDQUFDLDBFQUFVOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsbUNBQW1DO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELHFCQUFxQjtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxvQ0FBb0Msa0NBQWtDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0UsMkRBQTJEO0FBQy9ILGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBLG9DQUFvQyxrQ0FBa0M7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLGtCQUFrQjtBQUNsQixjQUFjO0FBQ2QsYUFBYTtBQUNiLGVBQWU7QUFDZixZQUFZO0FBQ1osYUFBYTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXp1cm8tYmV0dGluZy1hcHAvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2NvcmUuY2pzP2RmMTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgZ2xvYmFscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy9nbG9iYWxzJyk7XG52YXIgdXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5mdW5jdGlvbiBwYXNzdGhyb3VnaChvcCwgZm9yd2FyZCkge1xuICAgIHJldHVybiAoZm9yd2FyZCA/IGZvcndhcmQob3ApIDogdXRpbGl0aWVzLk9ic2VydmFibGUub2YoKSk7XG59XG5mdW5jdGlvbiB0b0xpbmsoaGFuZGxlcikge1xuICAgIHJldHVybiB0eXBlb2YgaGFuZGxlciA9PT0gXCJmdW5jdGlvblwiID8gbmV3IEFwb2xsb0xpbmsoaGFuZGxlcikgOiBoYW5kbGVyO1xufVxuZnVuY3Rpb24gaXNUZXJtaW5hdGluZyhsaW5rKSB7XG4gICAgcmV0dXJuIGxpbmsucmVxdWVzdC5sZW5ndGggPD0gMTtcbn1cbnZhciBBcG9sbG9MaW5rID0gIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXBvbGxvTGluayhyZXF1ZXN0KSB7XG4gICAgICAgIGlmIChyZXF1ZXN0KVxuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICB9XG4gICAgQXBvbGxvTGluay5lbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBcG9sbG9MaW5rKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxpdGllcy5PYnNlcnZhYmxlLm9mKCk7IH0pO1xuICAgIH07XG4gICAgQXBvbGxvTGluay5mcm9tID0gZnVuY3Rpb24gKGxpbmtzKSB7XG4gICAgICAgIGlmIChsaW5rcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gQXBvbGxvTGluay5lbXB0eSgpO1xuICAgICAgICByZXR1cm4gbGlua3MubWFwKHRvTGluaykucmVkdWNlKGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiB4LmNvbmNhdCh5KTsgfSk7XG4gICAgfTtcbiAgICBBcG9sbG9MaW5rLnNwbGl0ID0gZnVuY3Rpb24gKHRlc3QsIGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHZhciBsZWZ0TGluayA9IHRvTGluayhsZWZ0KTtcbiAgICAgICAgdmFyIHJpZ2h0TGluayA9IHRvTGluayhyaWdodCB8fCBuZXcgQXBvbGxvTGluayhwYXNzdGhyb3VnaCkpO1xuICAgICAgICB2YXIgcmV0O1xuICAgICAgICBpZiAoaXNUZXJtaW5hdGluZyhsZWZ0TGluaykgJiYgaXNUZXJtaW5hdGluZyhyaWdodExpbmspKSB7XG4gICAgICAgICAgICByZXQgPSBuZXcgQXBvbGxvTGluayhmdW5jdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlc3Qob3BlcmF0aW9uKSA/XG4gICAgICAgICAgICAgICAgICAgIGxlZnRMaW5rLnJlcXVlc3Qob3BlcmF0aW9uKSB8fCB1dGlsaXRpZXMuT2JzZXJ2YWJsZS5vZigpXG4gICAgICAgICAgICAgICAgICAgIDogcmlnaHRMaW5rLnJlcXVlc3Qob3BlcmF0aW9uKSB8fCB1dGlsaXRpZXMuT2JzZXJ2YWJsZS5vZigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXQgPSBuZXcgQXBvbGxvTGluayhmdW5jdGlvbiAob3BlcmF0aW9uLCBmb3J3YXJkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlc3Qob3BlcmF0aW9uKSA/XG4gICAgICAgICAgICAgICAgICAgIGxlZnRMaW5rLnJlcXVlc3Qob3BlcmF0aW9uLCBmb3J3YXJkKSB8fCB1dGlsaXRpZXMuT2JzZXJ2YWJsZS5vZigpXG4gICAgICAgICAgICAgICAgICAgIDogcmlnaHRMaW5rLnJlcXVlc3Qob3BlcmF0aW9uLCBmb3J3YXJkKSB8fCB1dGlsaXRpZXMuT2JzZXJ2YWJsZS5vZigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocmV0LCB7IGxlZnQ6IGxlZnRMaW5rLCByaWdodDogcmlnaHRMaW5rIH0pO1xuICAgIH07XG4gICAgQXBvbGxvTGluay5leGVjdXRlID0gZnVuY3Rpb24gKGxpbmssIG9wZXJhdGlvbikge1xuICAgICAgICByZXR1cm4gKGxpbmsucmVxdWVzdCh1dGlscy5jcmVhdGVPcGVyYXRpb24ob3BlcmF0aW9uLmNvbnRleHQsIHV0aWxzLnRyYW5zZm9ybU9wZXJhdGlvbih1dGlscy52YWxpZGF0ZU9wZXJhdGlvbihvcGVyYXRpb24pKSkpIHx8IHV0aWxpdGllcy5PYnNlcnZhYmxlLm9mKCkpO1xuICAgIH07XG4gICAgQXBvbGxvTGluay5jb25jYXQgPSBmdW5jdGlvbiAoZmlyc3QsIHNlY29uZCkge1xuICAgICAgICB2YXIgZmlyc3RMaW5rID0gdG9MaW5rKGZpcnN0KTtcbiAgICAgICAgaWYgKGlzVGVybWluYXRpbmcoZmlyc3RMaW5rKSkge1xuICAgICAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBnbG9iYWxzLmludmFyaWFudC53YXJuKDM1LCBmaXJzdExpbmspO1xuICAgICAgICAgICAgcmV0dXJuIGZpcnN0TGluaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV4dExpbmsgPSB0b0xpbmsoc2Vjb25kKTtcbiAgICAgICAgdmFyIHJldDtcbiAgICAgICAgaWYgKGlzVGVybWluYXRpbmcobmV4dExpbmspKSB7XG4gICAgICAgICAgICByZXQgPSBuZXcgQXBvbGxvTGluayhmdW5jdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0TGluay5yZXF1ZXN0KG9wZXJhdGlvbiwgZnVuY3Rpb24gKG9wKSB7IHJldHVybiBuZXh0TGluay5yZXF1ZXN0KG9wKSB8fCB1dGlsaXRpZXMuT2JzZXJ2YWJsZS5vZigpOyB9KSB8fCB1dGlsaXRpZXMuT2JzZXJ2YWJsZS5vZigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXQgPSBuZXcgQXBvbGxvTGluayhmdW5jdGlvbiAob3BlcmF0aW9uLCBmb3J3YXJkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChmaXJzdExpbmsucmVxdWVzdChvcGVyYXRpb24sIGZ1bmN0aW9uIChvcCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dExpbmsucmVxdWVzdChvcCwgZm9yd2FyZCkgfHwgdXRpbGl0aWVzLk9ic2VydmFibGUub2YoKTtcbiAgICAgICAgICAgICAgICB9KSB8fCB1dGlsaXRpZXMuT2JzZXJ2YWJsZS5vZigpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHJldCwgeyBsZWZ0OiBmaXJzdExpbmssIHJpZ2h0OiBuZXh0TGluayB9KTtcbiAgICB9O1xuICAgIEFwb2xsb0xpbmsucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gKHRlc3QsIGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmNhdChBcG9sbG9MaW5rLnNwbGl0KHRlc3QsIGxlZnQsIHJpZ2h0IHx8IG5ldyBBcG9sbG9MaW5rKHBhc3N0aHJvdWdoKSkpO1xuICAgIH07XG4gICAgQXBvbGxvTGluay5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgcmV0dXJuIEFwb2xsb0xpbmsuY29uY2F0KHRoaXMsIG5leHQpO1xuICAgIH07XG4gICAgQXBvbGxvTGluay5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIChvcGVyYXRpb24sIGZvcndhcmQpIHtcbiAgICAgICAgdGhyb3cgZ2xvYmFscy5uZXdJbnZhcmlhbnRFcnJvcigzNik7XG4gICAgfTtcbiAgICBBcG9sbG9MaW5rLnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycm9yLCBvYnNlcnZlcikge1xuICAgICAgICBpZiAob2JzZXJ2ZXIgJiYgb2JzZXJ2ZXIuZXJyb3IpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9O1xuICAgIEFwb2xsb0xpbmsucHJvdG90eXBlLnNldE9uRXJyb3IgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgdGhpcy5vbkVycm9yID0gZm47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEFwb2xsb0xpbms7XG59KCkpO1xuXG52YXIgZW1wdHkgPSBBcG9sbG9MaW5rLmVtcHR5O1xuXG52YXIgZnJvbSA9IEFwb2xsb0xpbmsuZnJvbTtcblxudmFyIHNwbGl0ID0gQXBvbGxvTGluay5zcGxpdDtcblxudmFyIGNvbmNhdCA9IEFwb2xsb0xpbmsuY29uY2F0O1xuXG52YXIgZXhlY3V0ZSA9IEFwb2xsb0xpbmsuZXhlY3V0ZTtcblxuZXhwb3J0cy5BcG9sbG9MaW5rID0gQXBvbGxvTGluaztcbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0O1xuZXhwb3J0cy5lbXB0eSA9IGVtcHR5O1xuZXhwb3J0cy5leGVjdXRlID0gZXhlY3V0ZTtcbmV4cG9ydHMuZnJvbSA9IGZyb207XG5leHBvcnRzLnNwbGl0ID0gc3BsaXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3JlLmNqcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/core/core.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/http.cjs":
/*!********************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/http.cjs ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar globals = __webpack_require__(/*! ../../utilities/globals */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/globals.cjs\");\nvar tslib = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nvar utilities = __webpack_require__(/*! ../../utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/@apollo/client/link/utils/utils.cjs\");\nvar errors = __webpack_require__(/*! ../../errors */ \"(ssr)/./node_modules/@apollo/client/errors/errors.cjs\");\nvar core = __webpack_require__(/*! ../core */ \"(ssr)/./node_modules/@apollo/client/link/core/core.cjs\");\n\nfunction asyncIterator(source) {\n    var _a;\n    var iterator = source[Symbol.asyncIterator]();\n    return _a = {\n            next: function () {\n                return iterator.next();\n            }\n        },\n        _a[Symbol.asyncIterator] = function () {\n            return this;\n        },\n        _a;\n}\n\nfunction nodeStreamIterator(stream) {\n    var cleanup = null;\n    var error = null;\n    var done = false;\n    var data = [];\n    var waiting = [];\n    function onData(chunk) {\n        if (error)\n            return;\n        if (waiting.length) {\n            var shiftedArr = waiting.shift();\n            if (Array.isArray(shiftedArr) && shiftedArr[0]) {\n                return shiftedArr[0]({ value: chunk, done: false });\n            }\n        }\n        data.push(chunk);\n    }\n    function onError(err) {\n        error = err;\n        var all = waiting.slice();\n        all.forEach(function (pair) {\n            pair[1](err);\n        });\n        !cleanup || cleanup();\n    }\n    function onEnd() {\n        done = true;\n        var all = waiting.slice();\n        all.forEach(function (pair) {\n            pair[0]({ value: undefined, done: true });\n        });\n        !cleanup || cleanup();\n    }\n    cleanup = function () {\n        cleanup = null;\n        stream.removeListener(\"data\", onData);\n        stream.removeListener(\"error\", onError);\n        stream.removeListener(\"end\", onEnd);\n        stream.removeListener(\"finish\", onEnd);\n        stream.removeListener(\"close\", onEnd);\n    };\n    stream.on(\"data\", onData);\n    stream.on(\"error\", onError);\n    stream.on(\"end\", onEnd);\n    stream.on(\"finish\", onEnd);\n    stream.on(\"close\", onEnd);\n    function getNext() {\n        return new Promise(function (resolve, reject) {\n            if (error)\n                return reject(error);\n            if (data.length)\n                return resolve({ value: data.shift(), done: false });\n            if (done)\n                return resolve({ value: undefined, done: true });\n            waiting.push([resolve, reject]);\n        });\n    }\n    var iterator = {\n        next: function () {\n            return getNext();\n        },\n    };\n    if (utilities.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function () {\n            return this;\n        };\n    }\n    return iterator;\n}\n\nfunction promiseIterator(promise) {\n    var resolved = false;\n    var iterator = {\n        next: function () {\n            if (resolved)\n                return Promise.resolve({\n                    value: undefined,\n                    done: true,\n                });\n            resolved = true;\n            return new Promise(function (resolve, reject) {\n                promise\n                    .then(function (value) {\n                    resolve({ value: value, done: false });\n                })\n                    .catch(reject);\n            });\n        },\n    };\n    if (utilities.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function () {\n            return this;\n        };\n    }\n    return iterator;\n}\n\nfunction readerIterator(reader) {\n    var iterator = {\n        next: function () {\n            return reader.read();\n        },\n    };\n    if (utilities.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function () {\n            return this;\n        };\n    }\n    return iterator;\n}\n\nfunction isNodeResponse(value) {\n    return !!value.body;\n}\nfunction isReadableStream(value) {\n    return !!value.getReader;\n}\nfunction isAsyncIterableIterator(value) {\n    return !!(utilities.canUseAsyncIteratorSymbol &&\n        value[Symbol.asyncIterator]);\n}\nfunction isStreamableBlob(value) {\n    return !!value.stream;\n}\nfunction isBlob(value) {\n    return !!value.arrayBuffer;\n}\nfunction isNodeReadableStream(value) {\n    return !!value.pipe;\n}\nfunction responseIterator(response) {\n    var body = response;\n    if (isNodeResponse(response))\n        body = response.body;\n    if (isAsyncIterableIterator(body))\n        return asyncIterator(body);\n    if (isReadableStream(body))\n        return readerIterator(body.getReader());\n    if (isStreamableBlob(body)) {\n        return readerIterator(body.stream().getReader());\n    }\n    if (isBlob(body))\n        return promiseIterator(body.arrayBuffer());\n    if (isNodeReadableStream(body))\n        return nodeStreamIterator(body);\n    throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}\n\nfunction isNonNullObject(obj) {\n    return obj !== null && typeof obj === \"object\";\n}\n\nfunction isApolloPayloadResult(value) {\n    return isNonNullObject(value) && \"payload\" in value;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction readMultipartBody(response, nextValue) {\n    var _a;\n    return tslib.__awaiter(this, void 0, void 0, function () {\n        var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _b, value, done, chunk, searchFrom, bi, message, i, headers, contentType_1, body, result, next;\n        var _c, _d;\n        return tslib.__generator(this, function (_e) {\n            switch (_e.label) {\n                case 0:\n                    if (TextDecoder === undefined) {\n                        throw new Error(\"TextDecoder must be defined in the environment: please import a polyfill.\");\n                    }\n                    decoder = new TextDecoder(\"utf-8\");\n                    contentType = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n                    delimiter = \"boundary=\";\n                    boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter)) ?\n                        contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['\"]/g, \"\").replace(/\\;(.*)/gm, \"\").trim()\n                        : \"-\";\n                    boundary = \"\\r\\n--\".concat(boundaryVal);\n                    buffer = \"\";\n                    iterator = responseIterator(response);\n                    running = true;\n                    _e.label = 1;\n                case 1:\n                    if (!running) return [3 , 3];\n                    return [4 , iterator.next()];\n                case 2:\n                    _b = _e.sent(), value = _b.value, done = _b.done;\n                    chunk = typeof value === \"string\" ? value : decoder.decode(value);\n                    searchFrom = buffer.length - boundary.length + 1;\n                    running = !done;\n                    buffer += chunk;\n                    bi = buffer.indexOf(boundary, searchFrom);\n                    while (bi > -1) {\n                        message = void 0;\n                        _c = [\n                            buffer.slice(0, bi),\n                            buffer.slice(bi + boundary.length),\n                        ], message = _c[0], buffer = _c[1];\n                        i = message.indexOf(\"\\r\\n\\r\\n\");\n                        headers = parseHeaders(message.slice(0, i));\n                        contentType_1 = headers[\"content-type\"];\n                        if (contentType_1 &&\n                            contentType_1.toLowerCase().indexOf(\"application/json\") === -1) {\n                            throw new Error(\"Unsupported patch content type: application/json is required.\");\n                        }\n                        body = message.slice(i);\n                        if (body) {\n                            result = parseJsonBody(response, body);\n                            if (Object.keys(result).length > 1 ||\n                                \"data\" in result ||\n                                \"incremental\" in result ||\n                                \"errors\" in result ||\n                                \"payload\" in result) {\n                                if (isApolloPayloadResult(result)) {\n                                    next = {};\n                                    if (\"payload\" in result) {\n                                        next = tslib.__assign({}, result.payload);\n                                    }\n                                    if (\"errors\" in result) {\n                                        next = tslib.__assign(tslib.__assign({}, next), { extensions: tslib.__assign(tslib.__assign({}, (\"extensions\" in next ? next.extensions : null)), (_d = {}, _d[errors.PROTOCOL_ERRORS_SYMBOL] = result.errors, _d)) });\n                                    }\n                                    nextValue(next);\n                                }\n                                else {\n                                    nextValue(result);\n                                }\n                            }\n                            else if (\n                            Object.keys(result).length === 1 &&\n                                \"hasNext\" in result &&\n                                !result.hasNext) {\n                                return [2 ];\n                            }\n                        }\n                        bi = buffer.indexOf(boundary);\n                    }\n                    return [3 , 1];\n                case 3: return [2 ];\n            }\n        });\n    });\n}\nfunction parseHeaders(headerText) {\n    var headersInit = {};\n    headerText.split(\"\\n\").forEach(function (line) {\n        var i = line.indexOf(\":\");\n        if (i > -1) {\n            var name_1 = line.slice(0, i).trim().toLowerCase();\n            var value = line.slice(i + 1).trim();\n            headersInit[name_1] = value;\n        }\n    });\n    return headersInit;\n}\nfunction parseJsonBody(response, bodyText) {\n    if (response.status >= 300) {\n        var getResult = function () {\n            try {\n                return JSON.parse(bodyText);\n            }\n            catch (err) {\n                return bodyText;\n            }\n        };\n        utils.throwServerError(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n    }\n    try {\n        return JSON.parse(bodyText);\n    }\n    catch (err) {\n        var parseError = err;\n        parseError.name = \"ServerParseError\";\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n    }\n}\nfunction handleError(err, observer) {\n    if (err.result && err.result.errors && err.result.data) {\n        observer.next(err.result);\n    }\n    observer.error(err);\n}\nfunction parseAndCheckHttpResponse(operations) {\n    return function (response) {\n        return response\n            .text()\n            .then(function (bodyText) { return parseJsonBody(response, bodyText); })\n            .then(function (result) {\n            if (!Array.isArray(result) &&\n                !hasOwnProperty.call(result, \"data\") &&\n                !hasOwnProperty.call(result, \"errors\")) {\n                utils.throwServerError(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations) ?\n                    operations.map(function (op) { return op.operationName; })\n                    : operations.operationName, \"'.\"));\n            }\n            return result;\n        });\n    };\n}\n\nvar serializeFetchParameter = function (p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    }\n    catch (e) {\n        var parseError = globals.newInvariantError(39, label, e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n};\n\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n    preserveHeaderCase: false,\n};\nvar defaultHeaders = {\n    accept: \"*/*\",\n    \"content-type\": \"application/json\",\n};\nvar defaultOptions = {\n    method: \"POST\",\n};\nvar fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nvar defaultPrinter = function (ast, printer) { return printer(ast); };\nfunction selectHttpOptionsAndBody(operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    configs.unshift(fallbackConfig);\n    return selectHttpOptionsAndBodyInternal.apply(void 0, tslib.__spreadArray([operation,\n        defaultPrinter], configs, false));\n}\nfunction selectHttpOptionsAndBodyInternal(operation, printer) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = {};\n    var http = {};\n    configs.forEach(function (config) {\n        options = tslib.__assign(tslib.__assign(tslib.__assign({}, options), config.options), { headers: tslib.__assign(tslib.__assign({}, options.headers), config.headers) });\n        if (config.credentials) {\n            options.credentials = config.credentials;\n        }\n        http = tslib.__assign(tslib.__assign({}, http), config.http);\n    });\n    if (options.headers) {\n        options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n    }\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    if (http.includeQuery)\n        body.query = printer(query, utilities.print);\n    return {\n        options: options,\n        body: body,\n    };\n}\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n    if (!preserveHeaderCase) {\n        var normalizedHeaders_1 = Object.create(null);\n        Object.keys(Object(headers)).forEach(function (name) {\n            normalizedHeaders_1[name.toLowerCase()] = headers[name];\n        });\n        return normalizedHeaders_1;\n    }\n    var headerData = Object.create(null);\n    Object.keys(Object(headers)).forEach(function (name) {\n        headerData[name.toLowerCase()] = {\n            originalName: name,\n            value: headers[name],\n        };\n    });\n    var normalizedHeaders = Object.create(null);\n    Object.keys(headerData).forEach(function (name) {\n        normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n    });\n    return normalizedHeaders;\n}\n\nvar checkFetcher = function (fetcher) {\n    if (!fetcher && typeof fetch === \"undefined\") {\n        throw globals.newInvariantError(37);\n    }\n};\n\nvar createSignalIfSupported = function () {\n    if (typeof AbortController === \"undefined\")\n        return { controller: false, signal: false };\n    var controller = new AbortController();\n    var signal = controller.signal;\n    return { controller: controller, signal: signal };\n};\n\nvar selectURI = function (operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    }\n    else if (typeof fallbackURI === \"function\") {\n        return fallbackURI(operation);\n    }\n    else {\n        return fallbackURI || \"/graphql\";\n    }\n};\n\nfunction rewriteURIForGET(chosenURI, body) {\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n    };\n    if (\"query\" in body) {\n        addQueryParam(\"query\", body.query);\n    }\n    if (body.operationName) {\n        addQueryParam(\"operationName\", body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, \"Variables map\");\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam(\"variables\", serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, \"Extensions map\");\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam(\"extensions\", serializedExtensions);\n    }\n    var fragment = \"\", preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf(\"#\");\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n    var newURI = preFragment + queryParamsPrefix + queryParams.join(\"&\") + fragment;\n    return { newURI: newURI };\n}\n\nvar backupFetch = utilities.maybe(function () { return fetch; });\nvar createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? \"/graphql\" : _a,\n    preferredFetch = linkOptions.fetch, _b = linkOptions.print, print = _b === void 0 ? defaultPrinter : _b, includeExtensions = linkOptions.includeExtensions, preserveHeaderCase = linkOptions.preserveHeaderCase, useGETForQueries = linkOptions.useGETForQueries, _c = linkOptions.includeUnusedVariables, includeUnusedVariables = _c === void 0 ? false : _c, requestOptions = tslib.__rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"preserveHeaderCase\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n    if (globalThis.__DEV__ !== false) {\n        checkFetcher(preferredFetch || backupFetch);\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions, preserveHeaderCase: preserveHeaderCase },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new core.ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders[\"apollographql-client-name\"] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders[\"apollographql-client-version\"] = version;\n            }\n        }\n        var contextHeaders = tslib.__assign(tslib.__assign({}, clientAwarenessHeaders), context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        if (utilities.hasDirectives([\"client\"], operation.query)) {\n            var transformedQuery = utilities.removeClientSetsFromDocument(operation.query);\n            if (!transformedQuery) {\n                return utils.fromError(new Error(\"HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`.\"));\n            }\n            operation.query = transformedQuery;\n        }\n        var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        if (body.variables && !includeUnusedVariables) {\n            body.variables = utils.filterOperationVariables(body.variables, operation.query);\n        }\n        var controller;\n        if (!options.signal && typeof AbortController !== \"undefined\") {\n            controller = new AbortController();\n            options.signal = controller.signal;\n        }\n        var definitionIsMutation = function (d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"mutation\";\n        };\n        var definitionIsSubscription = function (d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"subscription\";\n        };\n        var isSubscription = definitionIsSubscription(utilities.getMainDefinition(operation.query));\n        var hasDefer = utilities.hasDirectives([\"defer\"], operation.query);\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = \"GET\";\n        }\n        if (hasDefer || isSubscription) {\n            options.headers = options.headers || {};\n            var acceptHeader = \"multipart/mixed;\";\n            if (isSubscription && hasDefer) {\n                globalThis.__DEV__ !== false && globals.invariant.warn(38);\n            }\n            if (isSubscription) {\n                acceptHeader +=\n                    \"boundary=graphql;subscriptionSpec=1.0,application/json\";\n            }\n            else if (hasDefer) {\n                acceptHeader += \"deferSpec=20220824,application/json\";\n            }\n            options.headers.accept = acceptHeader;\n        }\n        if (options.method === \"GET\") {\n            var _c = rewriteURIForGET(chosenURI, body), newURI = _c.newURI, parseError = _c.parseError;\n            if (parseError) {\n                return utils.fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, \"Payload\");\n            }\n            catch (parseError) {\n                return utils.fromError(parseError);\n            }\n        }\n        return new utilities.Observable(function (observer) {\n            var currentFetch = preferredFetch || utilities.maybe(function () { return fetch; }) || backupFetch;\n            var observerNext = observer.next.bind(observer);\n            currentFetch(chosenURI, options)\n                .then(function (response) {\n                var _a;\n                operation.setContext({ response: response });\n                var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n                if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n                    return readMultipartBody(response, observerNext);\n                }\n                else {\n                    return parseAndCheckHttpResponse(operation)(response).then(observerNext);\n                }\n            })\n                .then(function () {\n                controller = undefined;\n                observer.complete();\n            })\n                .catch(function (err) {\n                controller = undefined;\n                handleError(err, observer);\n            });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\n\nvar HttpLink =  (function (_super) {\n    tslib.__extends(HttpLink, _super);\n    function HttpLink(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, createHttpLink(options).request) || this;\n        _this.options = options;\n        return _this;\n    }\n    return HttpLink;\n}(core.ApolloLink));\n\nexports.HttpLink = HttpLink;\nexports.checkFetcher = checkFetcher;\nexports.createHttpLink = createHttpLink;\nexports.createSignalIfSupported = createSignalIfSupported;\nexports.defaultPrinter = defaultPrinter;\nexports.fallbackHttpConfig = fallbackHttpConfig;\nexports.parseAndCheckHttpResponse = parseAndCheckHttpResponse;\nexports.rewriteURIForGET = rewriteURIForGET;\nexports.selectHttpOptionsAndBody = selectHttpOptionsAndBody;\nexports.selectHttpOptionsAndBodyInternal = selectHttpOptionsAndBodyInternal;\nexports.selectURI = selectURI;\nexports.serializeFetchParameter = serializeFetchParameter;\n//# sourceMappingURL=http.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/http.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/utils.cjs":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/utils.cjs ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar globals = __webpack_require__(/*! ../../utilities/globals */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/globals.cjs\");\nvar utilities = __webpack_require__(/*! ../../utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs\");\nvar tslib = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nvar graphql = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/index.js\");\n\nfunction fromError(errorValue) {\n    return new utilities.Observable(function (observer) {\n        observer.error(errorValue);\n    });\n}\n\nfunction toPromise(observable) {\n    var completed = false;\n    return new Promise(function (resolve, reject) {\n        observable.subscribe({\n            next: function (data) {\n                if (completed) {\n                    globalThis.__DEV__ !== false && globals.invariant.warn(42);\n                }\n                else {\n                    completed = true;\n                    resolve(data);\n                }\n            },\n            error: reject,\n        });\n    });\n}\n\nfunction fromPromise(promise) {\n    return new utilities.Observable(function (observer) {\n        promise\n            .then(function (value) {\n            observer.next(value);\n            observer.complete();\n        })\n            .catch(observer.error.bind(observer));\n    });\n}\n\nvar throwServerError = function (response, result, message) {\n    var error = new Error(message);\n    error.name = \"ServerError\";\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n};\n\nfunction validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        \"query\",\n        \"operationName\",\n        \"variables\",\n        \"extensions\",\n        \"context\",\n    ];\n    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw globals.newInvariantError(43, key);\n        }\n    }\n    return operation;\n}\n\nfunction createOperation(starting, operation) {\n    var context = tslib.__assign({}, starting);\n    var setContext = function (next) {\n        if (typeof next === \"function\") {\n            context = tslib.__assign(tslib.__assign({}, context), next(context));\n        }\n        else {\n            context = tslib.__assign(tslib.__assign({}, context), next);\n        }\n    };\n    var getContext = function () { return (tslib.__assign({}, context)); };\n    Object.defineProperty(operation, \"setContext\", {\n        enumerable: false,\n        value: setContext,\n    });\n    Object.defineProperty(operation, \"getContext\", {\n        enumerable: false,\n        value: getContext,\n    });\n    return operation;\n}\n\nfunction transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query,\n    };\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName =\n            typeof transformedOperation.query !== \"string\" ?\n                utilities.getOperationName(transformedOperation.query) || undefined\n                : \"\";\n    }\n    return transformedOperation;\n}\n\nfunction filterOperationVariables(variables, query) {\n    var result = tslib.__assign({}, variables);\n    var unusedNames = new Set(Object.keys(variables));\n    graphql.visit(query, {\n        Variable: function (node, _key, parent) {\n            if (parent &&\n                parent.kind !== \"VariableDefinition\") {\n                unusedNames.delete(node.name.value);\n            }\n        },\n    });\n    unusedNames.forEach(function (name) {\n        delete result[name];\n    });\n    return result;\n}\n\nexports.createOperation = createOperation;\nexports.filterOperationVariables = filterOperationVariables;\nexports.fromError = fromError;\nexports.fromPromise = fromPromise;\nexports.throwServerError = throwServerError;\nexports.toPromise = toPromise;\nexports.transformOperation = transformOperation;\nexports.validateOperation = validateOperation;\n//# sourceMappingURL=utils.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy91dGlscy5janMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxjQUFjLG1CQUFPLENBQUMsa0dBQXlCO0FBQy9DLGdCQUFnQixtQkFBTyxDQUFDLG9GQUFpQjtBQUN6QyxZQUFZLG1CQUFPLENBQUMsdURBQU87QUFDM0IsY0FBYyxtQkFBTyxDQUFDLHNEQUFTOztBQUUvQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGdCQUFnQjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTtBQUNBLG1DQUFtQyx5QkFBeUI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUMsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIsZ0NBQWdDO0FBQ2hDLGlCQUFpQjtBQUNqQixtQkFBbUI7QUFDbkIsd0JBQXdCO0FBQ3hCLGlCQUFpQjtBQUNqQiwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXp1cm8tYmV0dGluZy1hcHAvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy91dGlscy5janM/ZmZhNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBnbG9iYWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL2dsb2JhbHMnKTtcbnZhciB1dGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMnKTtcbnZhciB0c2xpYiA9IHJlcXVpcmUoJ3RzbGliJyk7XG52YXIgZ3JhcGhxbCA9IHJlcXVpcmUoJ2dyYXBocWwnKTtcblxuZnVuY3Rpb24gZnJvbUVycm9yKGVycm9yVmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IHV0aWxpdGllcy5PYnNlcnZhYmxlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICBvYnNlcnZlci5lcnJvcihlcnJvclZhbHVlKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdG9Qcm9taXNlKG9ic2VydmFibGUpIHtcbiAgICB2YXIgY29tcGxldGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgb2JzZXJ2YWJsZS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgZ2xvYmFscy5pbnZhcmlhbnQud2Fybig0Mik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICAgIHJldHVybiBuZXcgdXRpbGl0aWVzLk9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHByb21pc2VcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKG9ic2VydmVyLmVycm9yLmJpbmQob2JzZXJ2ZXIpKTtcbiAgICB9KTtcbn1cblxudmFyIHRocm93U2VydmVyRXJyb3IgPSBmdW5jdGlvbiAocmVzcG9uc2UsIHJlc3VsdCwgbWVzc2FnZSkge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBlcnJvci5uYW1lID0gXCJTZXJ2ZXJFcnJvclwiO1xuICAgIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgZXJyb3Iuc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICBlcnJvci5yZXN1bHQgPSByZXN1bHQ7XG4gICAgdGhyb3cgZXJyb3I7XG59O1xuXG5mdW5jdGlvbiB2YWxpZGF0ZU9wZXJhdGlvbihvcGVyYXRpb24pIHtcbiAgICB2YXIgT1BFUkFUSU9OX0ZJRUxEUyA9IFtcbiAgICAgICAgXCJxdWVyeVwiLFxuICAgICAgICBcIm9wZXJhdGlvbk5hbWVcIixcbiAgICAgICAgXCJ2YXJpYWJsZXNcIixcbiAgICAgICAgXCJleHRlbnNpb25zXCIsXG4gICAgICAgIFwiY29udGV4dFwiLFxuICAgIF07XG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKG9wZXJhdGlvbik7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBfYVtfaV07XG4gICAgICAgIGlmIChPUEVSQVRJT05fRklFTERTLmluZGV4T2Yoa2V5KSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IGdsb2JhbHMubmV3SW52YXJpYW50RXJyb3IoNDMsIGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGlvbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT3BlcmF0aW9uKHN0YXJ0aW5nLCBvcGVyYXRpb24pIHtcbiAgICB2YXIgY29udGV4dCA9IHRzbGliLl9fYXNzaWduKHt9LCBzdGFydGluZyk7XG4gICAgdmFyIHNldENvbnRleHQgPSBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgICBpZiAodHlwZW9mIG5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY29udGV4dCA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBjb250ZXh0KSwgbmV4dChjb250ZXh0KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0ID0gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGNvbnRleHQpLCBuZXh0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIGdldENvbnRleHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAodHNsaWIuX19hc3NpZ24oe30sIGNvbnRleHQpKTsgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3BlcmF0aW9uLCBcInNldENvbnRleHRcIiwge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IHNldENvbnRleHQsXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgXCJnZXRDb250ZXh0XCIsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBnZXRDb250ZXh0LFxuICAgIH0pO1xuICAgIHJldHVybiBvcGVyYXRpb247XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU9wZXJhdGlvbihvcGVyYXRpb24pIHtcbiAgICB2YXIgdHJhbnNmb3JtZWRPcGVyYXRpb24gPSB7XG4gICAgICAgIHZhcmlhYmxlczogb3BlcmF0aW9uLnZhcmlhYmxlcyB8fCB7fSxcbiAgICAgICAgZXh0ZW5zaW9uczogb3BlcmF0aW9uLmV4dGVuc2lvbnMgfHwge30sXG4gICAgICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbi5vcGVyYXRpb25OYW1lLFxuICAgICAgICBxdWVyeTogb3BlcmF0aW9uLnF1ZXJ5LFxuICAgIH07XG4gICAgaWYgKCF0cmFuc2Zvcm1lZE9wZXJhdGlvbi5vcGVyYXRpb25OYW1lKSB7XG4gICAgICAgIHRyYW5zZm9ybWVkT3BlcmF0aW9uLm9wZXJhdGlvbk5hbWUgPVxuICAgICAgICAgICAgdHlwZW9mIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnF1ZXJ5ICE9PSBcInN0cmluZ1wiID9cbiAgICAgICAgICAgICAgICB1dGlsaXRpZXMuZ2V0T3BlcmF0aW9uTmFtZSh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5xdWVyeSkgfHwgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgOiBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNmb3JtZWRPcGVyYXRpb247XG59XG5cbmZ1bmN0aW9uIGZpbHRlck9wZXJhdGlvblZhcmlhYmxlcyh2YXJpYWJsZXMsIHF1ZXJ5KSB7XG4gICAgdmFyIHJlc3VsdCA9IHRzbGliLl9fYXNzaWduKHt9LCB2YXJpYWJsZXMpO1xuICAgIHZhciB1bnVzZWROYW1lcyA9IG5ldyBTZXQoT2JqZWN0LmtleXModmFyaWFibGVzKSk7XG4gICAgZ3JhcGhxbC52aXNpdChxdWVyeSwge1xuICAgICAgICBWYXJpYWJsZTogZnVuY3Rpb24gKG5vZGUsIF9rZXksIHBhcmVudCkge1xuICAgICAgICAgICAgaWYgKHBhcmVudCAmJlxuICAgICAgICAgICAgICAgIHBhcmVudC5raW5kICE9PSBcIlZhcmlhYmxlRGVmaW5pdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdW51c2VkTmFtZXMuZGVsZXRlKG5vZGUubmFtZS52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgdW51c2VkTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBkZWxldGUgcmVzdWx0W25hbWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydHMuY3JlYXRlT3BlcmF0aW9uID0gY3JlYXRlT3BlcmF0aW9uO1xuZXhwb3J0cy5maWx0ZXJPcGVyYXRpb25WYXJpYWJsZXMgPSBmaWx0ZXJPcGVyYXRpb25WYXJpYWJsZXM7XG5leHBvcnRzLmZyb21FcnJvciA9IGZyb21FcnJvcjtcbmV4cG9ydHMuZnJvbVByb21pc2UgPSBmcm9tUHJvbWlzZTtcbmV4cG9ydHMudGhyb3dTZXJ2ZXJFcnJvciA9IHRocm93U2VydmVyRXJyb3I7XG5leHBvcnRzLnRvUHJvbWlzZSA9IHRvUHJvbWlzZTtcbmV4cG9ydHMudHJhbnNmb3JtT3BlcmF0aW9uID0gdHJhbnNmb3JtT3BlcmF0aW9uO1xuZXhwb3J0cy52YWxpZGF0ZU9wZXJhdGlvbiA9IHZhbGlkYXRlT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuY2pzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/utils.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/main.cjs":
/*!**********************************************!*\
  !*** ./node_modules/@apollo/client/main.cjs ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar core = __webpack_require__(/*! ./core */ \"(ssr)/./node_modules/@apollo/client/core/core.cjs\");\nvar react = __webpack_require__(/*! ./react */ \"(ssr)/./node_modules/@apollo/client/react/react.cjs\");\n\n\n\nfor (var k in core) {\n\tif (k !== 'default' && !exports.hasOwnProperty(k)) exports[k] = core[k];\n}\nfor (var k in react) {\n\tif (k !== 'default' && !exports.hasOwnProperty(k)) exports[k] = react[k];\n}\n//# sourceMappingURL=main.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbWFpbi5janMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxXQUFXLG1CQUFPLENBQUMsaUVBQVE7QUFDM0IsWUFBWSxtQkFBTyxDQUFDLG9FQUFTOzs7O0FBSTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXp1cm8tYmV0dGluZy1hcHAvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbWFpbi5janM/ZTQxMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBjb3JlID0gcmVxdWlyZSgnLi9jb3JlJyk7XG52YXIgcmVhY3QgPSByZXF1aXJlKCcuL3JlYWN0Jyk7XG5cblxuXG5mb3IgKHZhciBrIGluIGNvcmUpIHtcblx0aWYgKGsgIT09ICdkZWZhdWx0JyAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShrKSkgZXhwb3J0c1trXSA9IGNvcmVba107XG59XG5mb3IgKHZhciBrIGluIHJlYWN0KSB7XG5cdGlmIChrICE9PSAnZGVmYXVsdCcgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkoaykpIGV4cG9ydHNba10gPSByZWFjdFtrXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1haW4uY2pzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/main.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/context/context.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/react/context/context.cjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar globals = __webpack_require__(/*! ../../utilities/globals */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/globals.cjs\");\nvar React = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\nvar utilities = __webpack_require__(/*! ../../utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs\");\nvar tslib = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        for (var k in e) {\n            n[k] = e[k];\n        }\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\n\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\n\nvar contextKey = utilities.canUseSymbol ? Symbol.for(\"__APOLLO_CONTEXT__\") : \"__APOLLO_CONTEXT__\";\nfunction getApolloContext() {\n    globals.invariant(\"createContext\" in React__namespace, 45);\n    var context = React__namespace.createContext[contextKey];\n    if (!context) {\n        Object.defineProperty(React__namespace.createContext, contextKey, {\n            value: (context = React__namespace.createContext({})),\n            enumerable: false,\n            writable: false,\n            configurable: true,\n        });\n        context.displayName = \"ApolloContext\";\n    }\n    return context;\n}\nvar resetApolloContext = getApolloContext;\n\nvar ApolloConsumer = function (props) {\n    var ApolloContext = getApolloContext();\n    return (React__namespace.createElement(ApolloContext.Consumer, null, function (context) {\n        globals.invariant(context && context.client, 44);\n        return props.children(context.client);\n    }));\n};\n\nvar ApolloProvider = function (_a) {\n    var client = _a.client, children = _a.children;\n    var ApolloContext = getApolloContext();\n    var parentContext = React__namespace.useContext(ApolloContext);\n    var context = React__namespace.useMemo(function () {\n        return tslib.__assign(tslib.__assign({}, parentContext), { client: client || parentContext.client });\n    }, [parentContext, client]);\n    globals.invariant(context.client, 46);\n    return (React__namespace.createElement(ApolloContext.Provider, { value: context }, children));\n};\n\nexports.ApolloConsumer = ApolloConsumer;\nexports.ApolloProvider = ApolloProvider;\nexports.getApolloContext = getApolloContext;\nexports.resetApolloContext = resetApolloContext;\n//# sourceMappingURL=context.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvY29udGV4dC9jb250ZXh0LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGNBQWMsbUJBQU8sQ0FBQyxrR0FBeUI7QUFDL0MsWUFBWSxtQkFBTyxDQUFDLHNEQUFTO0FBQzdCLGdCQUFnQixtQkFBTyxDQUFDLG9GQUFpQjtBQUN6QyxZQUFZLG1CQUFPLENBQUMsdURBQU87O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStEO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxvQkFBb0Isd0NBQXdDO0FBQzNHLEtBQUs7QUFDTDtBQUNBLHFFQUFxRSxnQkFBZ0I7QUFDckY7O0FBRUEsc0JBQXNCO0FBQ3RCLHNCQUFzQjtBQUN0Qix3QkFBd0I7QUFDeEIsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXp1cm8tYmV0dGluZy1hcHAvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvY29udGV4dC9jb250ZXh0LmNqcz8xNjU2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIGdsb2JhbHMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvZ2xvYmFscycpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVoYWNrdCcpO1xudmFyIHV0aWxpdGllcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcycpO1xudmFyIHRzbGliID0gcmVxdWlyZSgndHNsaWInKTtcblxuZnVuY3Rpb24gX2ludGVyb3BOYW1lc3BhY2UoZSkge1xuICAgIGlmIChlICYmIGUuX19lc01vZHVsZSkgcmV0dXJuIGU7XG4gICAgdmFyIG4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGlmIChlKSB7XG4gICAgICAgIGZvciAodmFyIGsgaW4gZSkge1xuICAgICAgICAgICAgbltrXSA9IGVba107XG4gICAgICAgIH1cbiAgICB9XG4gICAgbltcImRlZmF1bHRcIl0gPSBlO1xuICAgIHJldHVybiBPYmplY3QuZnJlZXplKG4pO1xufVxuXG52YXIgUmVhY3RfX25hbWVzcGFjZSA9IC8qI19fUFVSRV9fKi9faW50ZXJvcE5hbWVzcGFjZShSZWFjdCk7XG5cbnZhciBjb250ZXh0S2V5ID0gdXRpbGl0aWVzLmNhblVzZVN5bWJvbCA/IFN5bWJvbC5mb3IoXCJfX0FQT0xMT19DT05URVhUX19cIikgOiBcIl9fQVBPTExPX0NPTlRFWFRfX1wiO1xuZnVuY3Rpb24gZ2V0QXBvbGxvQ29udGV4dCgpIHtcbiAgICBnbG9iYWxzLmludmFyaWFudChcImNyZWF0ZUNvbnRleHRcIiBpbiBSZWFjdF9fbmFtZXNwYWNlLCA0NSk7XG4gICAgdmFyIGNvbnRleHQgPSBSZWFjdF9fbmFtZXNwYWNlLmNyZWF0ZUNvbnRleHRbY29udGV4dEtleV07XG4gICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFjdF9fbmFtZXNwYWNlLmNyZWF0ZUNvbnRleHQsIGNvbnRleHRLZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiAoY29udGV4dCA9IFJlYWN0X19uYW1lc3BhY2UuY3JlYXRlQ29udGV4dCh7fSkpLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBjb250ZXh0LmRpc3BsYXlOYW1lID0gXCJBcG9sbG9Db250ZXh0XCI7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0O1xufVxudmFyIHJlc2V0QXBvbGxvQ29udGV4dCA9IGdldEFwb2xsb0NvbnRleHQ7XG5cbnZhciBBcG9sbG9Db25zdW1lciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBBcG9sbG9Db250ZXh0ID0gZ2V0QXBvbGxvQ29udGV4dCgpO1xuICAgIHJldHVybiAoUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KEFwb2xsb0NvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIGdsb2JhbHMuaW52YXJpYW50KGNvbnRleHQgJiYgY29udGV4dC5jbGllbnQsIDQ0KTtcbiAgICAgICAgcmV0dXJuIHByb3BzLmNoaWxkcmVuKGNvbnRleHQuY2xpZW50KTtcbiAgICB9KSk7XG59O1xuXG52YXIgQXBvbGxvUHJvdmlkZXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgY2xpZW50ID0gX2EuY2xpZW50LCBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuO1xuICAgIHZhciBBcG9sbG9Db250ZXh0ID0gZ2V0QXBvbGxvQ29udGV4dCgpO1xuICAgIHZhciBwYXJlbnRDb250ZXh0ID0gUmVhY3RfX25hbWVzcGFjZS51c2VDb250ZXh0KEFwb2xsb0NvbnRleHQpO1xuICAgIHZhciBjb250ZXh0ID0gUmVhY3RfX25hbWVzcGFjZS51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBwYXJlbnRDb250ZXh0KSwgeyBjbGllbnQ6IGNsaWVudCB8fCBwYXJlbnRDb250ZXh0LmNsaWVudCB9KTtcbiAgICB9LCBbcGFyZW50Q29udGV4dCwgY2xpZW50XSk7XG4gICAgZ2xvYmFscy5pbnZhcmlhbnQoY29udGV4dC5jbGllbnQsIDQ2KTtcbiAgICByZXR1cm4gKFJlYWN0X19uYW1lc3BhY2UuY3JlYXRlRWxlbWVudChBcG9sbG9Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBjb250ZXh0IH0sIGNoaWxkcmVuKSk7XG59O1xuXG5leHBvcnRzLkFwb2xsb0NvbnN1bWVyID0gQXBvbGxvQ29uc3VtZXI7XG5leHBvcnRzLkFwb2xsb1Byb3ZpZGVyID0gQXBvbGxvUHJvdmlkZXI7XG5leHBvcnRzLmdldEFwb2xsb0NvbnRleHQgPSBnZXRBcG9sbG9Db250ZXh0O1xuZXhwb3J0cy5yZXNldEFwb2xsb0NvbnRleHQgPSByZXNldEFwb2xsb0NvbnRleHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0LmNqcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/context/context.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/hooks.cjs":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/hooks.cjs ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar globals = __webpack_require__(/*! ../../utilities/globals */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/globals.cjs\");\nvar React = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\nvar context = __webpack_require__(/*! ../context */ \"(ssr)/./node_modules/@apollo/client/react/context/context.cjs\");\nvar tslib = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nvar utilities = __webpack_require__(/*! ../../utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs\");\nvar equality = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/bundle.cjs\");\nvar errors = __webpack_require__(/*! ../../errors */ \"(ssr)/./node_modules/@apollo/client/errors/errors.cjs\");\nvar core = __webpack_require__(/*! ../../core */ \"(ssr)/./node_modules/@apollo/client/core/core.cjs\");\nvar parser = __webpack_require__(/*! ../parser */ \"(ssr)/./node_modules/@apollo/client/react/parser/parser.cjs\");\nvar internal = __webpack_require__(/*! ../internal */ \"(ssr)/./node_modules/@apollo/client/react/internal/internal.cjs\");\nvar cache = __webpack_require__(/*! ../../cache */ \"(ssr)/./node_modules/@apollo/client/cache/cache.cjs\");\n\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        for (var k in e) {\n            n[k] = e[k];\n        }\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\n\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\n\nfunction useApolloClient(override) {\n    var context$1 = React__namespace.useContext(context.getApolloContext());\n    var client = override || context$1.client;\n    globals.invariant(!!client, 49);\n    return client;\n}\n\nvar didWarnUncachedGetSnapshot = false;\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook$1 = React__namespace[uSESKey];\nvar useSyncExternalStore = realHook$1 ||\n    (function (subscribe, getSnapshot, getServerSnapshot) {\n        var value = getSnapshot();\n        if (\n        globalThis.__DEV__ !== false &&\n            !didWarnUncachedGetSnapshot &&\n            value !== getSnapshot()) {\n            didWarnUncachedGetSnapshot = true;\n            globalThis.__DEV__ !== false && globals.invariant.error(58);\n        }\n        var _a = React__namespace.useState({\n            inst: { value: value, getSnapshot: getSnapshot },\n        }), inst = _a[0].inst, forceUpdate = _a[1];\n        if (utilities.canUseLayoutEffect) {\n            React__namespace.useLayoutEffect(function () {\n                Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n                if (checkIfSnapshotChanged(inst)) {\n                    forceUpdate({ inst: inst });\n                }\n            }, [subscribe, value, getSnapshot]);\n        }\n        else {\n            Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n        }\n        React__namespace.useEffect(function () {\n            if (checkIfSnapshotChanged(inst)) {\n                forceUpdate({ inst: inst });\n            }\n            return subscribe(function handleStoreChange() {\n                if (checkIfSnapshotChanged(inst)) {\n                    forceUpdate({ inst: inst });\n                }\n            });\n        }, [subscribe]);\n        return value;\n    });\nfunction checkIfSnapshotChanged(_a) {\n    var value = _a.value, getSnapshot = _a.getSnapshot;\n    try {\n        return value !== getSnapshot();\n    }\n    catch (_b) {\n        return true;\n    }\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction useQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    return useInternalState(useApolloClient(options.client), query).useQuery(options);\n}\nfunction useInternalState(client, query) {\n    var stateRef = React__namespace.useRef();\n    if (!stateRef.current ||\n        client !== stateRef.current.client ||\n        query !== stateRef.current.query) {\n        stateRef.current = new InternalState(client, query, stateRef.current);\n    }\n    var state = stateRef.current;\n    state.forceUpdateState = React__namespace.useReducer(function (tick) { return tick + 1; }, 0)[1];\n    return state;\n}\nvar InternalState =  (function () {\n    function InternalState(client, query, previous) {\n        var _this = this;\n        this.client = client;\n        this.query = query;\n        this.forceUpdate = function () { return _this.forceUpdateState(); };\n        this.ssrDisabledResult = utilities.maybeDeepFreeze({\n            loading: true,\n            data: void 0,\n            error: void 0,\n            networkStatus: core.NetworkStatus.loading,\n        });\n        this.skipStandbyResult = utilities.maybeDeepFreeze({\n            loading: false,\n            data: void 0,\n            error: void 0,\n            networkStatus: core.NetworkStatus.ready,\n        });\n        this.toQueryResultCache = new (utilities.canUseWeakMap ? WeakMap : Map)();\n        parser.verifyDocumentType(query, parser.DocumentType.Query);\n        var previousResult = previous && previous.result;\n        var previousData = previousResult && previousResult.data;\n        if (previousData) {\n            this.previousData = previousData;\n        }\n    }\n    InternalState.prototype.forceUpdateState = function () {\n        globalThis.__DEV__ !== false && globals.invariant.warn(51);\n    };\n    InternalState.prototype.executeQuery = function (options) {\n        var _this = this;\n        var _a;\n        if (options.query) {\n            Object.assign(this, { query: options.query });\n        }\n        this.watchQueryOptions = this.createWatchQueryOptions((this.queryHookOptions = options));\n        var concast = this.observable.reobserveAsConcast(this.getObsQueryOptions());\n        this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n        this.result = void 0;\n        this.forceUpdate();\n        return new Promise(function (resolve) {\n            var result;\n            concast.subscribe({\n                next: function (value) {\n                    result = value;\n                },\n                error: function () {\n                    resolve(_this.toQueryResult(_this.observable.getCurrentResult()));\n                },\n                complete: function () {\n                    resolve(_this.toQueryResult(result));\n                },\n            });\n        });\n    };\n    InternalState.prototype.useQuery = function (options) {\n        var _this = this;\n        this.renderPromises = React__namespace.useContext(context.getApolloContext()).renderPromises;\n        this.useOptions(options);\n        var obsQuery = this.useObservableQuery();\n        var result = useSyncExternalStore(React__namespace.useCallback(function (handleStoreChange) {\n            if (_this.renderPromises) {\n                return function () { };\n            }\n            _this.forceUpdate = handleStoreChange;\n            var onNext = function () {\n                var previousResult = _this.result;\n                var result = obsQuery.getCurrentResult();\n                if (previousResult &&\n                    previousResult.loading === result.loading &&\n                    previousResult.networkStatus === result.networkStatus &&\n                    equality.equal(previousResult.data, result.data)) {\n                    return;\n                }\n                _this.setResult(result);\n            };\n            var onError = function (error) {\n                subscription.unsubscribe();\n                subscription = obsQuery.resubscribeAfterError(onNext, onError);\n                if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n                    throw error;\n                }\n                var previousResult = _this.result;\n                if (!previousResult ||\n                    (previousResult && previousResult.loading) ||\n                    !equality.equal(error, previousResult.error)) {\n                    _this.setResult({\n                        data: (previousResult && previousResult.data),\n                        error: error,\n                        loading: false,\n                        networkStatus: core.NetworkStatus.error,\n                    });\n                }\n            };\n            var subscription = obsQuery.subscribe(onNext, onError);\n            return function () {\n                setTimeout(function () { return subscription.unsubscribe(); });\n                _this.forceUpdate = function () { return _this.forceUpdateState(); };\n            };\n        }, [\n            obsQuery,\n            this.renderPromises,\n            this.client.disableNetworkFetches,\n        ]), function () { return _this.getCurrentResult(); }, function () { return _this.getCurrentResult(); });\n        this.unsafeHandlePartialRefetch(result);\n        return this.toQueryResult(result);\n    };\n    InternalState.prototype.useOptions = function (options) {\n        var _a;\n        var watchQueryOptions = this.createWatchQueryOptions((this.queryHookOptions = options));\n        var currentWatchQueryOptions = this.watchQueryOptions;\n        if (!equality.equal(watchQueryOptions, currentWatchQueryOptions)) {\n            this.watchQueryOptions = watchQueryOptions;\n            if (currentWatchQueryOptions && this.observable) {\n                this.observable.reobserve(this.getObsQueryOptions());\n                this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n                this.result = void 0;\n            }\n        }\n        this.onCompleted =\n            options.onCompleted || InternalState.prototype.onCompleted;\n        this.onError = options.onError || InternalState.prototype.onError;\n        if ((this.renderPromises || this.client.disableNetworkFetches) &&\n            this.queryHookOptions.ssr === false &&\n            !this.queryHookOptions.skip) {\n            this.result = this.ssrDisabledResult;\n        }\n        else if (this.queryHookOptions.skip ||\n            this.watchQueryOptions.fetchPolicy === \"standby\") {\n            this.result = this.skipStandbyResult;\n        }\n        else if (this.result === this.ssrDisabledResult ||\n            this.result === this.skipStandbyResult) {\n            this.result = void 0;\n        }\n    };\n    InternalState.prototype.getObsQueryOptions = function () {\n        var toMerge = [];\n        var globalDefaults = this.client.defaultOptions.watchQuery;\n        if (globalDefaults)\n            toMerge.push(globalDefaults);\n        if (this.queryHookOptions.defaultOptions) {\n            toMerge.push(this.queryHookOptions.defaultOptions);\n        }\n        toMerge.push(utilities.compact(this.observable && this.observable.options, this.watchQueryOptions));\n        return toMerge.reduce(utilities.mergeOptions);\n    };\n    InternalState.prototype.createWatchQueryOptions = function (_a) {\n        var _b;\n        if (_a === void 0) { _a = {}; }\n        var skip = _a.skip; _a.ssr; _a.onCompleted; _a.onError; _a.defaultOptions;\n        var otherOptions = tslib.__rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"defaultOptions\"]);\n        var watchQueryOptions = Object.assign(otherOptions, { query: this.query });\n        if (this.renderPromises &&\n            (watchQueryOptions.fetchPolicy === \"network-only\" ||\n                watchQueryOptions.fetchPolicy === \"cache-and-network\")) {\n            watchQueryOptions.fetchPolicy = \"cache-first\";\n        }\n        if (!watchQueryOptions.variables) {\n            watchQueryOptions.variables = {};\n        }\n        if (skip) {\n            var _c = watchQueryOptions.fetchPolicy, fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c, _d = watchQueryOptions.initialFetchPolicy, initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;\n            Object.assign(watchQueryOptions, {\n                initialFetchPolicy: initialFetchPolicy,\n                fetchPolicy: \"standby\",\n            });\n        }\n        else if (!watchQueryOptions.fetchPolicy) {\n            watchQueryOptions.fetchPolicy =\n                ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) ||\n                    this.getDefaultFetchPolicy();\n        }\n        return watchQueryOptions;\n    };\n    InternalState.prototype.getDefaultFetchPolicy = function () {\n        var _a, _b;\n        return (((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) ||\n            ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) ||\n            \"cache-first\");\n    };\n    InternalState.prototype.onCompleted = function (data) { };\n    InternalState.prototype.onError = function (error) { };\n    InternalState.prototype.useObservableQuery = function () {\n        var obsQuery = (this.observable =\n            (this.renderPromises &&\n                this.renderPromises.getSSRObservable(this.watchQueryOptions)) ||\n                this.observable ||\n                this.client.watchQuery(this.getObsQueryOptions()));\n        this.obsQueryFields = React__namespace.useMemo(function () { return ({\n            refetch: obsQuery.refetch.bind(obsQuery),\n            reobserve: obsQuery.reobserve.bind(obsQuery),\n            fetchMore: obsQuery.fetchMore.bind(obsQuery),\n            updateQuery: obsQuery.updateQuery.bind(obsQuery),\n            startPolling: obsQuery.startPolling.bind(obsQuery),\n            stopPolling: obsQuery.stopPolling.bind(obsQuery),\n            subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n        }); }, [obsQuery]);\n        var ssrAllowed = !(this.queryHookOptions.ssr === false || this.queryHookOptions.skip);\n        if (this.renderPromises && ssrAllowed) {\n            this.renderPromises.registerSSRObservable(obsQuery);\n            if (obsQuery.getCurrentResult().loading) {\n                this.renderPromises.addObservableQueryPromise(obsQuery);\n            }\n        }\n        return obsQuery;\n    };\n    InternalState.prototype.setResult = function (nextResult) {\n        var previousResult = this.result;\n        if (previousResult && previousResult.data) {\n            this.previousData = previousResult.data;\n        }\n        this.result = nextResult;\n        this.forceUpdate();\n        this.handleErrorOrCompleted(nextResult, previousResult);\n    };\n    InternalState.prototype.handleErrorOrCompleted = function (result, previousResult) {\n        var _this = this;\n        if (!result.loading) {\n            var error_1 = this.toApolloError(result);\n            Promise.resolve()\n                .then(function () {\n                if (error_1) {\n                    _this.onError(error_1);\n                }\n                else if (result.data &&\n                    (previousResult === null || previousResult === void 0 ? void 0 : previousResult.networkStatus) !== result.networkStatus &&\n                    result.networkStatus === core.NetworkStatus.ready) {\n                    _this.onCompleted(result.data);\n                }\n            })\n                .catch(function (error) {\n                globalThis.__DEV__ !== false && globals.invariant.warn(error);\n            });\n        }\n    };\n    InternalState.prototype.toApolloError = function (result) {\n        return utilities.isNonEmptyArray(result.errors) ?\n            new errors.ApolloError({ graphQLErrors: result.errors })\n            : result.error;\n    };\n    InternalState.prototype.getCurrentResult = function () {\n        if (!this.result) {\n            this.handleErrorOrCompleted((this.result = this.observable.getCurrentResult()));\n        }\n        return this.result;\n    };\n    InternalState.prototype.toQueryResult = function (result) {\n        var queryResult = this.toQueryResultCache.get(result);\n        if (queryResult)\n            return queryResult;\n        var data = result.data; result.partial; var resultWithoutPartial = tslib.__rest(result, [\"data\", \"partial\"]);\n        this.toQueryResultCache.set(result, (queryResult = tslib.__assign(tslib.__assign(tslib.__assign({ data: data }, resultWithoutPartial), this.obsQueryFields), { client: this.client, observable: this.observable, variables: this.observable.variables, called: !this.queryHookOptions.skip, previousData: this.previousData })));\n        if (!queryResult.error && utilities.isNonEmptyArray(result.errors)) {\n            queryResult.error = new errors.ApolloError({ graphQLErrors: result.errors });\n        }\n        return queryResult;\n    };\n    InternalState.prototype.unsafeHandlePartialRefetch = function (result) {\n        if (result.partial &&\n            this.queryHookOptions.partialRefetch &&\n            !result.loading &&\n            (!result.data || Object.keys(result.data).length === 0) &&\n            this.observable.options.fetchPolicy !== \"cache-only\") {\n            Object.assign(result, {\n                loading: true,\n                networkStatus: core.NetworkStatus.refetch,\n            });\n            this.observable.refetch();\n        }\n    };\n    return InternalState;\n}());\n\nvar EAGER_METHODS = [\n    \"refetch\",\n    \"reobserve\",\n    \"fetchMore\",\n    \"updateQuery\",\n    \"startPolling\",\n    \"subscribeToMore\",\n];\nfunction useLazyQuery(query, options) {\n    var _a;\n    var execOptionsRef = React__namespace.useRef();\n    var optionsRef = React__namespace.useRef();\n    var queryRef = React__namespace.useRef();\n    var merged = utilities.mergeOptions(options, execOptionsRef.current || {});\n    var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;\n    optionsRef.current = merged;\n    queryRef.current = document;\n    var internalState = useInternalState(useApolloClient(options && options.client), document);\n    var useQueryResult = internalState.useQuery(tslib.__assign(tslib.__assign({}, merged), { skip: !execOptionsRef.current }));\n    var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy ||\n        internalState.getDefaultFetchPolicy();\n    var result = Object.assign(useQueryResult, {\n        called: !!execOptionsRef.current,\n    });\n    var eagerMethods = React__namespace.useMemo(function () {\n        var eagerMethods = {};\n        var _loop_1 = function (key) {\n            var method = result[key];\n            eagerMethods[key] = function () {\n                if (!execOptionsRef.current) {\n                    execOptionsRef.current = Object.create(null);\n                    internalState.forceUpdateState();\n                }\n                return method.apply(this, arguments);\n            };\n        };\n        for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n            var key = EAGER_METHODS_1[_i];\n            _loop_1(key);\n        }\n        return eagerMethods;\n    }, []);\n    Object.assign(result, eagerMethods);\n    var execute = React__namespace.useCallback(function (executeOptions) {\n        execOptionsRef.current =\n            executeOptions ? tslib.__assign(tslib.__assign({}, executeOptions), { fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy }) : {\n                fetchPolicy: initialFetchPolicy,\n            };\n        var options = utilities.mergeOptions(optionsRef.current, tslib.__assign({ query: queryRef.current }, execOptionsRef.current));\n        var promise = internalState\n            .executeQuery(tslib.__assign(tslib.__assign({}, options), { skip: false }))\n            .then(function (queryResult) { return Object.assign(queryResult, eagerMethods); });\n        promise.catch(function () { });\n        return promise;\n    }, []);\n    return [execute, result];\n}\n\nfunction useMutation(mutation, options) {\n    var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n    parser.verifyDocumentType(mutation, parser.DocumentType.Mutation);\n    var _a = React__namespace.useState({\n        called: false,\n        loading: false,\n        client: client,\n    }), result = _a[0], setResult = _a[1];\n    var ref = React__namespace.useRef({\n        result: result,\n        mutationId: 0,\n        isMounted: true,\n        client: client,\n        mutation: mutation,\n        options: options,\n    });\n    {\n        Object.assign(ref.current, { client: client, options: options, mutation: mutation });\n    }\n    var execute = React__namespace.useCallback(function (executeOptions) {\n        if (executeOptions === void 0) { executeOptions = {}; }\n        var _a = ref.current, options = _a.options, mutation = _a.mutation;\n        var baseOptions = tslib.__assign(tslib.__assign({}, options), { mutation: mutation });\n        var client = executeOptions.client || ref.current.client;\n        if (!ref.current.result.loading &&\n            !baseOptions.ignoreResults &&\n            ref.current.isMounted) {\n            setResult((ref.current.result = {\n                loading: true,\n                error: void 0,\n                data: void 0,\n                called: true,\n                client: client,\n            }));\n        }\n        var mutationId = ++ref.current.mutationId;\n        var clientOptions = utilities.mergeOptions(baseOptions, executeOptions);\n        return client\n            .mutate(clientOptions)\n            .then(function (response) {\n            var _a, _b;\n            var data = response.data, errors$1 = response.errors;\n            var error = errors$1 && errors$1.length > 0 ?\n                new errors.ApolloError({ graphQLErrors: errors$1 })\n                : void 0;\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (error && onError) {\n                onError(error, clientOptions);\n            }\n            if (mutationId === ref.current.mutationId &&\n                !clientOptions.ignoreResults) {\n                var result_1 = {\n                    called: true,\n                    loading: false,\n                    data: data,\n                    error: error,\n                    client: client,\n                };\n                if (ref.current.isMounted && !equality.equal(ref.current.result, result_1)) {\n                    setResult((ref.current.result = result_1));\n                }\n            }\n            var onCompleted = executeOptions.onCompleted || ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onCompleted);\n            if (!error) {\n                onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n            }\n            return response;\n        })\n            .catch(function (error) {\n            var _a;\n            if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n                var result_2 = {\n                    loading: false,\n                    error: error,\n                    data: void 0,\n                    called: true,\n                    client: client,\n                };\n                if (!equality.equal(ref.current.result, result_2)) {\n                    setResult((ref.current.result = result_2));\n                }\n            }\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (onError) {\n                onError(error, clientOptions);\n                return { data: void 0, errors: error };\n            }\n            throw error;\n        });\n    }, []);\n    var reset = React__namespace.useCallback(function () {\n        if (ref.current.isMounted) {\n            var result_3 = { called: false, loading: false, client: client };\n            Object.assign(ref.current, { mutationId: 0, result: result_3 });\n            setResult(result_3);\n        }\n    }, []);\n    React__namespace.useEffect(function () {\n        ref.current.isMounted = true;\n        return function () {\n            ref.current.isMounted = false;\n        };\n    }, []);\n    return [execute, tslib.__assign({ reset: reset }, result)];\n}\n\nfunction useSubscription(subscription, options) {\n    var hasIssuedDeprecationWarningRef = React__namespace.useRef(false);\n    var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n    parser.verifyDocumentType(subscription, parser.DocumentType.Subscription);\n    var _a = React__namespace.useState({\n        loading: !(options === null || options === void 0 ? void 0 : options.skip),\n        error: void 0,\n        data: void 0,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n    }), result = _a[0], setResult = _a[1];\n    if (!hasIssuedDeprecationWarningRef.current) {\n        hasIssuedDeprecationWarningRef.current = true;\n        if (options === null || options === void 0 ? void 0 : options.onSubscriptionData) {\n            globalThis.__DEV__ !== false && globals.invariant.warn(options.onData ? 52 : 53);\n        }\n        if (options === null || options === void 0 ? void 0 : options.onSubscriptionComplete) {\n            globalThis.__DEV__ !== false && globals.invariant.warn(options.onComplete ? 54 : 55);\n        }\n    }\n    var _b = React__namespace.useState(function () {\n        if (options === null || options === void 0 ? void 0 : options.skip) {\n            return null;\n        }\n        return client.subscribe({\n            query: subscription,\n            variables: options === null || options === void 0 ? void 0 : options.variables,\n            fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n            context: options === null || options === void 0 ? void 0 : options.context,\n        });\n    }), observable = _b[0], setObservable = _b[1];\n    var canResetObservableRef = React__namespace.useRef(false);\n    React__namespace.useEffect(function () {\n        return function () {\n            canResetObservableRef.current = true;\n        };\n    }, []);\n    var ref = React__namespace.useRef({ client: client, subscription: subscription, options: options });\n    React__namespace.useEffect(function () {\n        var _a, _b, _c, _d;\n        var shouldResubscribe = options === null || options === void 0 ? void 0 : options.shouldResubscribe;\n        if (typeof shouldResubscribe === \"function\") {\n            shouldResubscribe = !!shouldResubscribe(options);\n        }\n        if (options === null || options === void 0 ? void 0 : options.skip) {\n            if (!(options === null || options === void 0 ? void 0 : options.skip) !== !((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.skip) ||\n                canResetObservableRef.current) {\n                setResult({\n                    loading: false,\n                    data: void 0,\n                    error: void 0,\n                    variables: options === null || options === void 0 ? void 0 : options.variables,\n                });\n                setObservable(null);\n                canResetObservableRef.current = false;\n            }\n        }\n        else if ((shouldResubscribe !== false &&\n            (client !== ref.current.client ||\n                subscription !== ref.current.subscription ||\n                (options === null || options === void 0 ? void 0 : options.fetchPolicy) !== ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.fetchPolicy) ||\n                !(options === null || options === void 0 ? void 0 : options.skip) !== !((_c = ref.current.options) === null || _c === void 0 ? void 0 : _c.skip) ||\n                !equality.equal(options === null || options === void 0 ? void 0 : options.variables, (_d = ref.current.options) === null || _d === void 0 ? void 0 : _d.variables))) ||\n            canResetObservableRef.current) {\n            setResult({\n                loading: true,\n                data: void 0,\n                error: void 0,\n                variables: options === null || options === void 0 ? void 0 : options.variables,\n            });\n            setObservable(client.subscribe({\n                query: subscription,\n                variables: options === null || options === void 0 ? void 0 : options.variables,\n                fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n                context: options === null || options === void 0 ? void 0 : options.context,\n            }));\n            canResetObservableRef.current = false;\n        }\n        Object.assign(ref.current, { client: client, subscription: subscription, options: options });\n    }, [client, subscription, options, canResetObservableRef.current]);\n    React__namespace.useEffect(function () {\n        if (!observable) {\n            return;\n        }\n        var subscriptionStopped = false;\n        var subscription = observable.subscribe({\n            next: function (fetchResult) {\n                var _a, _b;\n                if (subscriptionStopped) {\n                    return;\n                }\n                var result = {\n                    loading: false,\n                    data: fetchResult.data,\n                    error: void 0,\n                    variables: options === null || options === void 0 ? void 0 : options.variables,\n                };\n                setResult(result);\n                if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onData) {\n                    ref.current.options.onData({\n                        client: client,\n                        data: result,\n                    });\n                }\n                else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionData) {\n                    ref.current.options.onSubscriptionData({\n                        client: client,\n                        subscriptionData: result,\n                    });\n                }\n            },\n            error: function (error) {\n                var _a, _b;\n                if (!subscriptionStopped) {\n                    setResult({\n                        loading: false,\n                        data: void 0,\n                        error: error,\n                        variables: options === null || options === void 0 ? void 0 : options.variables,\n                    });\n                    (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n                }\n            },\n            complete: function () {\n                var _a, _b;\n                if (!subscriptionStopped) {\n                    if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onComplete) {\n                        ref.current.options.onComplete();\n                    }\n                    else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionComplete) {\n                        ref.current.options.onSubscriptionComplete();\n                    }\n                }\n            },\n        });\n        return function () {\n            subscriptionStopped = true;\n            setTimeout(function () {\n                subscription.unsubscribe();\n            });\n        };\n    }, [observable]);\n    return result;\n}\n\nfunction useReactiveVar(rv) {\n    return useSyncExternalStore(React__namespace.useCallback(function (update) {\n        return rv.onNextChange(function onNext() {\n            update();\n            rv.onNextChange(onNext);\n        });\n    }, [rv]), rv, rv);\n}\n\nfunction useDeepMemo(memoFn, deps) {\n    var ref = React__namespace.useRef();\n    if (!ref.current || !equality.equal(ref.current.deps, deps)) {\n        ref.current = { value: memoFn(), deps: deps };\n    }\n    return ref.current.value;\n}\n\nfunction getRenderDispatcher() {\n    var _a, _b;\n    return (_b = (_a = React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _a === void 0 ? void 0 : _a.ReactCurrentDispatcher) === null || _b === void 0 ? void 0 : _b.current;\n}\nvar RenderDispatcher = null;\nfunction useRenderGuard() {\n    RenderDispatcher = getRenderDispatcher();\n    return React__namespace.useCallback(function () {\n        return (RenderDispatcher !== null && RenderDispatcher === getRenderDispatcher());\n    }, []);\n}\n\nvar INIT = {};\nfunction useLazyRef(getInitialValue) {\n    var ref = React__namespace.useRef(INIT);\n    if (ref.current === INIT) {\n        ref.current = getInitialValue();\n    }\n    return ref;\n}\n\nvar useKey = \"use\";\nvar realHook = React__namespace[useKey];\nvar __use = realHook ||\n    function __use(promise) {\n        var statefulPromise = utilities.wrapPromiseWithState(promise);\n        switch (statefulPromise.status) {\n            case \"pending\":\n                throw statefulPromise;\n            case \"rejected\":\n                throw statefulPromise.reason;\n            case \"fulfilled\":\n                return statefulPromise.value;\n        }\n    };\n\nfunction useFragment(options) {\n    var cache = useApolloClient().cache;\n    var diffOptions = useDeepMemo(function () {\n        var fragment = options.fragment, fragmentName = options.fragmentName, from = options.from, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, rest = tslib.__rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n        return tslib.__assign(tslib.__assign({}, rest), { returnPartialData: true, id: typeof from === \"string\" ? from : cache.identify(from), query: cache[\"getFragmentDoc\"](fragment, fragmentName), optimistic: optimistic });\n    }, [options]);\n    var resultRef = useLazyRef(function () {\n        return diffToResult(cache.diff(diffOptions));\n    });\n    var getSnapshot = React__namespace.useCallback(function () { return resultRef.current; }, []);\n    return useSyncExternalStore(React__namespace.useCallback(function (forceUpdate) {\n        var lastTimeout = 0;\n        var unsubscribe = cache.watch(tslib.__assign(tslib.__assign({}, diffOptions), { immediate: true, callback: function (diff) {\n                if (!equality.equal(diff.result, resultRef.current.data)) {\n                    resultRef.current = diffToResult(diff);\n                    clearTimeout(lastTimeout);\n                    lastTimeout = setTimeout(forceUpdate);\n                }\n            } }));\n        return function () {\n            unsubscribe();\n            clearTimeout(lastTimeout);\n        };\n    }, [cache, diffOptions]), getSnapshot, getSnapshot);\n}\nfunction diffToResult(diff) {\n    var result = {\n        data: diff.result,\n        complete: !!diff.complete,\n    };\n    if (diff.missing) {\n        result.missing = utilities.mergeDeepArray(diff.missing.map(function (error) { return error.missing; }));\n    }\n    return result;\n}\n\nvar skipToken = Symbol.for(\"apollo.skipToken\");\n\nfunction useSuspenseQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    var client = useApolloClient(options.client);\n    var suspenseCache = internal.getSuspenseCache(client);\n    var watchQueryOptions = useWatchQueryOptions({\n        client: client,\n        query: query,\n        options: options,\n    });\n    var fetchPolicy = watchQueryOptions.fetchPolicy, variables = watchQueryOptions.variables;\n    var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;\n    var cacheKey = tslib.__spreadArray([\n        query,\n        cache.canonicalStringify(variables)\n    ], [].concat(queryKey), true);\n    var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n        return client.watchQuery(watchQueryOptions);\n    });\n    var _b = React__namespace.useState([queryRef.key, queryRef.promise]), current = _b[0], setPromise = _b[1];\n    if (current[0] !== queryRef.key) {\n        current[0] = queryRef.key;\n        current[1] = queryRef.promise;\n    }\n    var promise = current[1];\n    if (queryRef.didChangeOptions(watchQueryOptions)) {\n        current[1] = promise = queryRef.applyOptions(watchQueryOptions);\n    }\n    React__namespace.useEffect(function () {\n        var dispose = queryRef.retain();\n        var removeListener = queryRef.listen(function (promise) {\n            setPromise([queryRef.key, promise]);\n        });\n        return function () {\n            removeListener();\n            dispose();\n        };\n    }, [queryRef]);\n    var skipResult = React__namespace.useMemo(function () {\n        var error = toApolloError(queryRef.result);\n        return {\n            loading: false,\n            data: queryRef.result.data,\n            networkStatus: error ? core.NetworkStatus.error : core.NetworkStatus.ready,\n            error: error,\n        };\n    }, [queryRef.result]);\n    var result = fetchPolicy === \"standby\" ? skipResult : __use(promise);\n    var fetchMore = React__namespace.useCallback((function (options) {\n        var promise = queryRef.fetchMore(options);\n        setPromise([queryRef.key, queryRef.promise]);\n        return promise;\n    }), [queryRef]);\n    var refetch = React__namespace.useCallback(function (variables) {\n        var promise = queryRef.refetch(variables);\n        setPromise([queryRef.key, queryRef.promise]);\n        return promise;\n    }, [queryRef]);\n    var subscribeToMore = React__namespace.useCallback(function (options) { return queryRef.observable.subscribeToMore(options); }, [queryRef]);\n    return React__namespace.useMemo(function () {\n        return {\n            client: client,\n            data: result.data,\n            error: toApolloError(result),\n            networkStatus: result.networkStatus,\n            fetchMore: fetchMore,\n            refetch: refetch,\n            subscribeToMore: subscribeToMore,\n        };\n    }, [client, fetchMore, refetch, result, subscribeToMore]);\n}\nfunction validateOptions(options) {\n    var query = options.query, fetchPolicy = options.fetchPolicy, returnPartialData = options.returnPartialData;\n    parser.verifyDocumentType(query, parser.DocumentType.Query);\n    validateFetchPolicy(fetchPolicy);\n    validatePartialDataReturn(fetchPolicy, returnPartialData);\n}\nfunction validateFetchPolicy(fetchPolicy) {\n    if (fetchPolicy === void 0) { fetchPolicy = \"cache-first\"; }\n    var supportedFetchPolicies = [\n        \"cache-first\",\n        \"network-only\",\n        \"no-cache\",\n        \"cache-and-network\",\n    ];\n    globals.invariant(supportedFetchPolicies.includes(fetchPolicy), 56, fetchPolicy);\n}\nfunction validatePartialDataReturn(fetchPolicy, returnPartialData) {\n    if (fetchPolicy === \"no-cache\" && returnPartialData) {\n        globalThis.__DEV__ !== false && globals.invariant.warn(57);\n    }\n}\nfunction toApolloError(result) {\n    return utilities.isNonEmptyArray(result.errors) ?\n        new core.ApolloError({ graphQLErrors: result.errors })\n        : result.error;\n}\nfunction useWatchQueryOptions(_a) {\n    var client = _a.client, query = _a.query, options = _a.options;\n    return useDeepMemo(function () {\n        var _a;\n        if (options === skipToken) {\n            return { query: query, fetchPolicy: \"standby\" };\n        }\n        var fetchPolicy = options.fetchPolicy ||\n            ((_a = client.defaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) ||\n            \"cache-first\";\n        var watchQueryOptions = tslib.__assign(tslib.__assign({}, options), { fetchPolicy: fetchPolicy, query: query, notifyOnNetworkStatusChange: false, nextFetchPolicy: void 0 });\n        if (globalThis.__DEV__ !== false) {\n            validateOptions(watchQueryOptions);\n        }\n        if (options.skip) {\n            watchQueryOptions.fetchPolicy = \"standby\";\n        }\n        return watchQueryOptions;\n    }, [client, options, query]);\n}\n\nfunction useBackgroundQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    var client = useApolloClient(options.client);\n    var suspenseCache = internal.getSuspenseCache(client);\n    var watchQueryOptions = useWatchQueryOptions({ client: client, query: query, options: options });\n    var fetchPolicy = watchQueryOptions.fetchPolicy, variables = watchQueryOptions.variables;\n    var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;\n    var didFetchResult = React__namespace.useRef(fetchPolicy !== \"standby\");\n    didFetchResult.current || (didFetchResult.current = fetchPolicy !== \"standby\");\n    var cacheKey = tslib.__spreadArray([\n        query,\n        cache.canonicalStringify(variables)\n    ], [].concat(queryKey), true);\n    var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n        return client.watchQuery(watchQueryOptions);\n    });\n    var _b = React__namespace.useState(internal.wrapQueryRef(queryRef)), wrappedQueryRef = _b[0], setWrappedQueryRef = _b[1];\n    if (internal.unwrapQueryRef(wrappedQueryRef) !== queryRef) {\n        setWrappedQueryRef(internal.wrapQueryRef(queryRef));\n    }\n    if (queryRef.didChangeOptions(watchQueryOptions)) {\n        var promise = queryRef.applyOptions(watchQueryOptions);\n        internal.updateWrappedQueryRef(wrappedQueryRef, promise);\n    }\n    var fetchMore = React__namespace.useCallback(function (options) {\n        var promise = queryRef.fetchMore(options);\n        setWrappedQueryRef(internal.wrapQueryRef(queryRef));\n        return promise;\n    }, [queryRef]);\n    var refetch = React__namespace.useCallback(function (variables) {\n        var promise = queryRef.refetch(variables);\n        setWrappedQueryRef(internal.wrapQueryRef(queryRef));\n        return promise;\n    }, [queryRef]);\n    return [\n        didFetchResult.current ? wrappedQueryRef : void 0,\n        { fetchMore: fetchMore, refetch: refetch },\n    ];\n}\n\nfunction useLoadableQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    var client = useApolloClient(options.client);\n    var suspenseCache = internal.getSuspenseCache(client);\n    var watchQueryOptions = useWatchQueryOptions({ client: client, query: query, options: options });\n    var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;\n    var _b = React__namespace.useState(null), queryRef = _b[0], setQueryRef = _b[1];\n    var internalQueryRef = queryRef && internal.unwrapQueryRef(queryRef);\n    if (queryRef && (internalQueryRef === null || internalQueryRef === void 0 ? void 0 : internalQueryRef.didChangeOptions(watchQueryOptions))) {\n        var promise = internalQueryRef.applyOptions(watchQueryOptions);\n        internal.updateWrappedQueryRef(queryRef, promise);\n    }\n    var calledDuringRender = useRenderGuard();\n    var fetchMore = React__namespace.useCallback(function (options) {\n        if (!internalQueryRef) {\n            throw new Error(\"The query has not been loaded. Please load the query.\");\n        }\n        var promise = internalQueryRef.fetchMore(options);\n        setQueryRef(internal.wrapQueryRef(internalQueryRef));\n        return promise;\n    }, [internalQueryRef]);\n    var refetch = React__namespace.useCallback(function (options) {\n        if (!internalQueryRef) {\n            throw new Error(\"The query has not been loaded. Please load the query.\");\n        }\n        var promise = internalQueryRef.refetch(options);\n        setQueryRef(internal.wrapQueryRef(internalQueryRef));\n        return promise;\n    }, [internalQueryRef]);\n    var loadQuery = React__namespace.useCallback(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        globals.invariant(!calledDuringRender(), 50);\n        var variables = args[0];\n        var cacheKey = tslib.__spreadArray([\n            query,\n            cache.canonicalStringify(variables)\n        ], [].concat(queryKey), true);\n        var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n            return client.watchQuery(tslib.__assign(tslib.__assign({}, watchQueryOptions), { variables: variables }));\n        });\n        setQueryRef(internal.wrapQueryRef(queryRef));\n    }, [query, queryKey, suspenseCache, watchQueryOptions, calledDuringRender]);\n    var reset = React__namespace.useCallback(function () {\n        setQueryRef(null);\n    }, [queryRef]);\n    return [loadQuery, queryRef, { fetchMore: fetchMore, refetch: refetch, reset: reset }];\n}\n\nfunction useQueryRefHandlers(queryRef) {\n    var _a = React__namespace.useState(queryRef), previousQueryRef = _a[0], setPreviousQueryRef = _a[1];\n    var _b = React__namespace.useState(queryRef), wrappedQueryRef = _b[0], setWrappedQueryRef = _b[1];\n    var internalQueryRef = internal.unwrapQueryRef(queryRef);\n    if (previousQueryRef !== queryRef) {\n        setPreviousQueryRef(queryRef);\n        setWrappedQueryRef(queryRef);\n    }\n    else {\n        internal.updateWrappedQueryRef(queryRef, internal.getWrappedPromise(wrappedQueryRef));\n    }\n    var refetch = React__namespace.useCallback(function (variables) {\n        var promise = internalQueryRef.refetch(variables);\n        setWrappedQueryRef(internal.wrapQueryRef(internalQueryRef));\n        return promise;\n    }, [internalQueryRef]);\n    var fetchMore = React__namespace.useCallback(function (options) {\n        var promise = internalQueryRef.fetchMore(options);\n        setWrappedQueryRef(internal.wrapQueryRef(internalQueryRef));\n        return promise;\n    }, [internalQueryRef]);\n    return { refetch: refetch, fetchMore: fetchMore };\n}\n\nfunction useReadQuery(queryRef) {\n    var internalQueryRef = React__namespace.useMemo(function () { return internal.unwrapQueryRef(queryRef); }, [queryRef]);\n    var getPromise = React__namespace.useCallback(function () { return internal.getWrappedPromise(queryRef); }, [queryRef]);\n    if (internalQueryRef.disposed) {\n        internalQueryRef.reinitialize();\n        internal.updateWrappedQueryRef(queryRef, internalQueryRef.promise);\n    }\n    React__namespace.useEffect(function () { return internalQueryRef.retain(); }, [internalQueryRef]);\n    var promise = useSyncExternalStore(React__namespace.useCallback(function (forceUpdate) {\n        return internalQueryRef.listen(function (promise) {\n            internal.updateWrappedQueryRef(queryRef, promise);\n            forceUpdate();\n        });\n    }, [internalQueryRef]), getPromise, getPromise);\n    var result = __use(promise);\n    return React__namespace.useMemo(function () {\n        return {\n            data: result.data,\n            networkStatus: result.networkStatus,\n            error: toApolloError(result),\n        };\n    }, [result]);\n}\n\nexports.skipToken = skipToken;\nexports.useApolloClient = useApolloClient;\nexports.useBackgroundQuery = useBackgroundQuery;\nexports.useFragment = useFragment;\nexports.useLazyQuery = useLazyQuery;\nexports.useLoadableQuery = useLoadableQuery;\nexports.useMutation = useMutation;\nexports.useQuery = useQuery;\nexports.useQueryRefHandlers = useQueryRefHandlers;\nexports.useReactiveVar = useReactiveVar;\nexports.useReadQuery = useReadQuery;\nexports.useSubscription = useSubscription;\nexports.useSuspenseQuery = useSuspenseQuery;\n//# sourceMappingURL=hooks.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaG9va3MuY2pzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsY0FBYyxtQkFBTyxDQUFDLGtHQUF5QjtBQUMvQyxZQUFZLG1CQUFPLENBQUMsc0RBQVM7QUFDN0IsY0FBYyxtQkFBTyxDQUFDLGlGQUFZO0FBQ2xDLFlBQVksbUJBQU8sQ0FBQyx1REFBTztBQUMzQixnQkFBZ0IsbUJBQU8sQ0FBQyxvRkFBaUI7QUFDekMsZUFBZSxtQkFBTyxDQUFDLHdFQUFlO0FBQ3RDLGFBQWEsbUJBQU8sQ0FBQywyRUFBYztBQUNuQyxXQUFXLG1CQUFPLENBQUMscUVBQVk7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLDhFQUFXO0FBQ2hDLGVBQWUsbUJBQU8sQ0FBQyxvRkFBYTtBQUNwQyxZQUFZLG1CQUFPLENBQUMsd0VBQWE7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isd0NBQXdDO0FBQzVELFNBQVM7QUFDVDtBQUNBO0FBQ0Esc0NBQXNDLHdDQUF3QztBQUM5RTtBQUNBLGtDQUFrQyxZQUFZO0FBQzlDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxrQ0FBa0Msd0NBQXdDO0FBQzFFO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixZQUFZO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxZQUFZO0FBQzlDO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxrQkFBa0I7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxzQkFBc0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxvQ0FBb0M7QUFDN0Usa0RBQWtEO0FBQ2xEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixrQ0FBa0MsZ0JBQWdCLGtDQUFrQztBQUM5RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsNEJBQTRCLFFBQVEsZ0JBQWdCLFlBQVk7QUFDaEU7QUFDQSw4REFBOEQsbUJBQW1CO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxJQUFJO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDhCQUE4QjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsZ0JBQWdCO0FBQ2hELDBHQUEwRyxZQUFZLGlEQUFpRCw4SkFBOEo7QUFDclU7QUFDQSx5REFBeUQsOEJBQThCO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkU7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0YsYUFBYSwrQkFBK0I7QUFDNUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELDZCQUE2QjtBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSw2REFBNkQscUJBQXFCLCtEQUErRDtBQUNqSjtBQUNBO0FBQ0Esa0ZBQWtGLHlCQUF5QjtBQUMzRztBQUNBLDBEQUEwRCxjQUFjLGFBQWE7QUFDckYsMkNBQTJDLGtEQUFrRDtBQUM3RixxQ0FBcUM7QUFDckM7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHFDQUFxQyxzREFBc0Q7QUFDM0Y7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBLDBEQUEwRCxjQUFjLG9CQUFvQjtBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMseUJBQXlCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLHlDQUF5QyxpQ0FBaUM7QUFDMUU7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHNDQUFzQyxjQUFjO0FBQ3BEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsd0NBQXdDLDhEQUE4RDtBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLHFDQUFxQyw4REFBOEQ7QUFDbkcsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxXQUFXLHFLQUFxSztBQUMvTixLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCxpRUFBaUUsMkJBQTJCO0FBQzVGO0FBQ0E7QUFDQSxzRUFBc0Usa0JBQWtCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRkFBc0YsdUJBQXVCO0FBQzdHO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsNEVBQTRFLHNEQUFzRDtBQUNsSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiw4QkFBOEI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsY0FBYyxxR0FBcUc7QUFDbkw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBLG1EQUFtRCxnREFBZ0Q7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxVQUFVLHdDQUF3QztBQUNsRDtBQUNBOztBQUVBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQSxtREFBbUQsZ0RBQWdEO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EseUJBQXlCLHVCQUF1QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsd0JBQXdCLHNCQUFzQjtBQUNuSCxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCxtQ0FBbUMsc0RBQXNEO0FBQ3pGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxhQUFhO0FBQ2I7O0FBRUE7QUFDQSxrRUFBa0UsMkNBQTJDO0FBQzdHLGdFQUFnRSw4Q0FBOEM7QUFDOUc7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsbUNBQW1DO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQSxpQkFBaUI7QUFDakIsdUJBQXVCO0FBQ3ZCLDBCQUEwQjtBQUMxQixtQkFBbUI7QUFDbkIsb0JBQW9CO0FBQ3BCLHdCQUF3QjtBQUN4QixtQkFBbUI7QUFDbkIsZ0JBQWdCO0FBQ2hCLDJCQUEyQjtBQUMzQixzQkFBc0I7QUFDdEIsb0JBQW9CO0FBQ3BCLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9henVyby1iZXR0aW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9ob29rcy9ob29rcy5janM/ZTgzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBnbG9iYWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL2dsb2JhbHMnKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlaGFja3QnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi4vY29udGV4dCcpO1xudmFyIHRzbGliID0gcmVxdWlyZSgndHNsaWInKTtcbnZhciB1dGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMnKTtcbnZhciBlcXVhbGl0eSA9IHJlcXVpcmUoJ0B3cnkvZXF1YWxpdHknKTtcbnZhciBlcnJvcnMgPSByZXF1aXJlKCcuLi8uLi9lcnJvcnMnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi4vLi4vY29yZScpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJy4uL3BhcnNlcicpO1xudmFyIGludGVybmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwnKTtcbnZhciBjYWNoZSA9IHJlcXVpcmUoJy4uLy4uL2NhY2hlJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wTmFtZXNwYWNlKGUpIHtcbiAgICBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpIHJldHVybiBlO1xuICAgIHZhciBuID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBpZiAoZSkge1xuICAgICAgICBmb3IgKHZhciBrIGluIGUpIHtcbiAgICAgICAgICAgIG5ba10gPSBlW2tdO1xuICAgICAgICB9XG4gICAgfVxuICAgIG5bXCJkZWZhdWx0XCJdID0gZTtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShuKTtcbn1cblxudmFyIFJlYWN0X19uYW1lc3BhY2UgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BOYW1lc3BhY2UoUmVhY3QpO1xuXG5mdW5jdGlvbiB1c2VBcG9sbG9DbGllbnQob3ZlcnJpZGUpIHtcbiAgICB2YXIgY29udGV4dCQxID0gUmVhY3RfX25hbWVzcGFjZS51c2VDb250ZXh0KGNvbnRleHQuZ2V0QXBvbGxvQ29udGV4dCgpKTtcbiAgICB2YXIgY2xpZW50ID0gb3ZlcnJpZGUgfHwgY29udGV4dCQxLmNsaWVudDtcbiAgICBnbG9iYWxzLmludmFyaWFudCghIWNsaWVudCwgNDkpO1xuICAgIHJldHVybiBjbGllbnQ7XG59XG5cbnZhciBkaWRXYXJuVW5jYWNoZWRHZXRTbmFwc2hvdCA9IGZhbHNlO1xudmFyIHVTRVNLZXkgPSBcInVzZVN5bmNFeHRlcm5hbFN0b3JlXCI7XG52YXIgcmVhbEhvb2skMSA9IFJlYWN0X19uYW1lc3BhY2VbdVNFU0tleV07XG52YXIgdXNlU3luY0V4dGVybmFsU3RvcmUgPSByZWFsSG9vayQxIHx8XG4gICAgKGZ1bmN0aW9uIChzdWJzY3JpYmUsIGdldFNuYXBzaG90LCBnZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBnZXRTbmFwc2hvdCgpO1xuICAgICAgICBpZiAoXG4gICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiZcbiAgICAgICAgICAgICFkaWRXYXJuVW5jYWNoZWRHZXRTbmFwc2hvdCAmJlxuICAgICAgICAgICAgdmFsdWUgIT09IGdldFNuYXBzaG90KCkpIHtcbiAgICAgICAgICAgIGRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90ID0gdHJ1ZTtcbiAgICAgICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgZ2xvYmFscy5pbnZhcmlhbnQuZXJyb3IoNTgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYSA9IFJlYWN0X19uYW1lc3BhY2UudXNlU3RhdGUoe1xuICAgICAgICAgICAgaW5zdDogeyB2YWx1ZTogdmFsdWUsIGdldFNuYXBzaG90OiBnZXRTbmFwc2hvdCB9LFxuICAgICAgICB9KSwgaW5zdCA9IF9hWzBdLmluc3QsIGZvcmNlVXBkYXRlID0gX2FbMV07XG4gICAgICAgIGlmICh1dGlsaXRpZXMuY2FuVXNlTGF5b3V0RWZmZWN0KSB7XG4gICAgICAgICAgICBSZWFjdF9fbmFtZXNwYWNlLnVzZUxheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpbnN0LCB7IHZhbHVlOiB2YWx1ZSwgZ2V0U25hcHNob3Q6IGdldFNuYXBzaG90IH0pO1xuICAgICAgICAgICAgICAgIGlmIChjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcmNlVXBkYXRlKHsgaW5zdDogaW5zdCB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBbc3Vic2NyaWJlLCB2YWx1ZSwgZ2V0U25hcHNob3RdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaW5zdCwgeyB2YWx1ZTogdmFsdWUsIGdldFNuYXBzaG90OiBnZXRTbmFwc2hvdCB9KTtcbiAgICAgICAgfVxuICAgICAgICBSZWFjdF9fbmFtZXNwYWNlLnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSkge1xuICAgICAgICAgICAgICAgIGZvcmNlVXBkYXRlKHsgaW5zdDogaW5zdCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmUoZnVuY3Rpb24gaGFuZGxlU3RvcmVDaGFuZ2UoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yY2VVcGRhdGUoeyBpbnN0OiBpbnN0IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBbc3Vic2NyaWJlXSk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbmZ1bmN0aW9uIGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoX2EpIHtcbiAgICB2YXIgdmFsdWUgPSBfYS52YWx1ZSwgZ2V0U25hcHNob3QgPSBfYS5nZXRTbmFwc2hvdDtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IGdldFNuYXBzaG90KCk7XG4gICAgfVxuICAgIGNhdGNoIChfYikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiB1c2VRdWVyeShxdWVyeSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7IH1cbiAgICByZXR1cm4gdXNlSW50ZXJuYWxTdGF0ZSh1c2VBcG9sbG9DbGllbnQob3B0aW9ucy5jbGllbnQpLCBxdWVyeSkudXNlUXVlcnkob3B0aW9ucyk7XG59XG5mdW5jdGlvbiB1c2VJbnRlcm5hbFN0YXRlKGNsaWVudCwgcXVlcnkpIHtcbiAgICB2YXIgc3RhdGVSZWYgPSBSZWFjdF9fbmFtZXNwYWNlLnVzZVJlZigpO1xuICAgIGlmICghc3RhdGVSZWYuY3VycmVudCB8fFxuICAgICAgICBjbGllbnQgIT09IHN0YXRlUmVmLmN1cnJlbnQuY2xpZW50IHx8XG4gICAgICAgIHF1ZXJ5ICE9PSBzdGF0ZVJlZi5jdXJyZW50LnF1ZXJ5KSB7XG4gICAgICAgIHN0YXRlUmVmLmN1cnJlbnQgPSBuZXcgSW50ZXJuYWxTdGF0ZShjbGllbnQsIHF1ZXJ5LCBzdGF0ZVJlZi5jdXJyZW50KTtcbiAgICB9XG4gICAgdmFyIHN0YXRlID0gc3RhdGVSZWYuY3VycmVudDtcbiAgICBzdGF0ZS5mb3JjZVVwZGF0ZVN0YXRlID0gUmVhY3RfX25hbWVzcGFjZS51c2VSZWR1Y2VyKGZ1bmN0aW9uICh0aWNrKSB7IHJldHVybiB0aWNrICsgMTsgfSwgMClbMV07XG4gICAgcmV0dXJuIHN0YXRlO1xufVxudmFyIEludGVybmFsU3RhdGUgPSAgKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbnRlcm5hbFN0YXRlKGNsaWVudCwgcXVlcnksIHByZXZpb3VzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5mb3JjZVVwZGF0ZVN0YXRlKCk7IH07XG4gICAgICAgIHRoaXMuc3NyRGlzYWJsZWRSZXN1bHQgPSB1dGlsaXRpZXMubWF5YmVEZWVwRnJlZXplKHtcbiAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICBkYXRhOiB2b2lkIDAsXG4gICAgICAgICAgICBlcnJvcjogdm9pZCAwLFxuICAgICAgICAgICAgbmV0d29ya1N0YXR1czogY29yZS5OZXR3b3JrU3RhdHVzLmxvYWRpbmcsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNraXBTdGFuZGJ5UmVzdWx0ID0gdXRpbGl0aWVzLm1heWJlRGVlcEZyZWV6ZSh7XG4gICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGRhdGE6IHZvaWQgMCxcbiAgICAgICAgICAgIGVycm9yOiB2b2lkIDAsXG4gICAgICAgICAgICBuZXR3b3JrU3RhdHVzOiBjb3JlLk5ldHdvcmtTdGF0dXMucmVhZHksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRvUXVlcnlSZXN1bHRDYWNoZSA9IG5ldyAodXRpbGl0aWVzLmNhblVzZVdlYWtNYXAgPyBXZWFrTWFwIDogTWFwKSgpO1xuICAgICAgICBwYXJzZXIudmVyaWZ5RG9jdW1lbnRUeXBlKHF1ZXJ5LCBwYXJzZXIuRG9jdW1lbnRUeXBlLlF1ZXJ5KTtcbiAgICAgICAgdmFyIHByZXZpb3VzUmVzdWx0ID0gcHJldmlvdXMgJiYgcHJldmlvdXMucmVzdWx0O1xuICAgICAgICB2YXIgcHJldmlvdXNEYXRhID0gcHJldmlvdXNSZXN1bHQgJiYgcHJldmlvdXNSZXN1bHQuZGF0YTtcbiAgICAgICAgaWYgKHByZXZpb3VzRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5wcmV2aW91c0RhdGEgPSBwcmV2aW91c0RhdGE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgSW50ZXJuYWxTdGF0ZS5wcm90b3R5cGUuZm9yY2VVcGRhdGVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBnbG9iYWxzLmludmFyaWFudC53YXJuKDUxKTtcbiAgICB9O1xuICAgIEludGVybmFsU3RhdGUucHJvdG90eXBlLmV4ZWN1dGVRdWVyeSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKG9wdGlvbnMucXVlcnkpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgeyBxdWVyeTogb3B0aW9ucy5xdWVyeSB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndhdGNoUXVlcnlPcHRpb25zID0gdGhpcy5jcmVhdGVXYXRjaFF1ZXJ5T3B0aW9ucygodGhpcy5xdWVyeUhvb2tPcHRpb25zID0gb3B0aW9ucykpO1xuICAgICAgICB2YXIgY29uY2FzdCA9IHRoaXMub2JzZXJ2YWJsZS5yZW9ic2VydmVBc0NvbmNhc3QodGhpcy5nZXRPYnNRdWVyeU9wdGlvbnMoKSk7XG4gICAgICAgIHRoaXMucHJldmlvdXNEYXRhID0gKChfYSA9IHRoaXMucmVzdWx0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGF0YSkgfHwgdGhpcy5wcmV2aW91c0RhdGE7XG4gICAgICAgIHRoaXMucmVzdWx0ID0gdm9pZCAwO1xuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgICAgIGNvbmNhc3Quc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF90aGlzLnRvUXVlcnlSZXN1bHQoX3RoaXMub2JzZXJ2YWJsZS5nZXRDdXJyZW50UmVzdWx0KCkpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoX3RoaXMudG9RdWVyeVJlc3VsdChyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSW50ZXJuYWxTdGF0ZS5wcm90b3R5cGUudXNlUXVlcnkgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnJlbmRlclByb21pc2VzID0gUmVhY3RfX25hbWVzcGFjZS51c2VDb250ZXh0KGNvbnRleHQuZ2V0QXBvbGxvQ29udGV4dCgpKS5yZW5kZXJQcm9taXNlcztcbiAgICAgICAgdGhpcy51c2VPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB2YXIgb2JzUXVlcnkgPSB0aGlzLnVzZU9ic2VydmFibGVRdWVyeSgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdXNlU3luY0V4dGVybmFsU3RvcmUoUmVhY3RfX25hbWVzcGFjZS51c2VDYWxsYmFjayhmdW5jdGlvbiAoaGFuZGxlU3RvcmVDaGFuZ2UpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5yZW5kZXJQcm9taXNlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5mb3JjZVVwZGF0ZSA9IGhhbmRsZVN0b3JlQ2hhbmdlO1xuICAgICAgICAgICAgdmFyIG9uTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNSZXN1bHQgPSBfdGhpcy5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9ic1F1ZXJ5LmdldEN1cnJlbnRSZXN1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNSZXN1bHQgJiZcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNSZXN1bHQubG9hZGluZyA9PT0gcmVzdWx0LmxvYWRpbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNSZXN1bHQubmV0d29ya1N0YXR1cyA9PT0gcmVzdWx0Lm5ldHdvcmtTdGF0dXMgJiZcbiAgICAgICAgICAgICAgICAgICAgZXF1YWxpdHkuZXF1YWwocHJldmlvdXNSZXN1bHQuZGF0YSwgcmVzdWx0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0UmVzdWx0KHJlc3VsdCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIG9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBvYnNRdWVyeS5yZXN1YnNjcmliZUFmdGVyRXJyb3Iob25OZXh0LCBvbkVycm9yKTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwoZXJyb3IsIFwiZ3JhcGhRTEVycm9yc1wiKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzUmVzdWx0ID0gX3RoaXMucmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmICghcHJldmlvdXNSZXN1bHQgfHxcbiAgICAgICAgICAgICAgICAgICAgKHByZXZpb3VzUmVzdWx0ICYmIHByZXZpb3VzUmVzdWx0LmxvYWRpbmcpIHx8XG4gICAgICAgICAgICAgICAgICAgICFlcXVhbGl0eS5lcXVhbChlcnJvciwgcHJldmlvdXNSZXN1bHQuZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFJlc3VsdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiAocHJldmlvdXNSZXN1bHQgJiYgcHJldmlvdXNSZXN1bHQuZGF0YSksXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcmtTdGF0dXM6IGNvcmUuTmV0d29ya1N0YXR1cy5lcnJvcixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBvYnNRdWVyeS5zdWJzY3JpYmUob25OZXh0LCBvbkVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgfSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5mb3JjZVVwZGF0ZVN0YXRlKCk7IH07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LCBbXG4gICAgICAgICAgICBvYnNRdWVyeSxcbiAgICAgICAgICAgIHRoaXMucmVuZGVyUHJvbWlzZXMsXG4gICAgICAgICAgICB0aGlzLmNsaWVudC5kaXNhYmxlTmV0d29ya0ZldGNoZXMsXG4gICAgICAgIF0pLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5nZXRDdXJyZW50UmVzdWx0KCk7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmdldEN1cnJlbnRSZXN1bHQoKTsgfSk7XG4gICAgICAgIHRoaXMudW5zYWZlSGFuZGxlUGFydGlhbFJlZmV0Y2gocmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9RdWVyeVJlc3VsdChyZXN1bHQpO1xuICAgIH07XG4gICAgSW50ZXJuYWxTdGF0ZS5wcm90b3R5cGUudXNlT3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIHdhdGNoUXVlcnlPcHRpb25zID0gdGhpcy5jcmVhdGVXYXRjaFF1ZXJ5T3B0aW9ucygodGhpcy5xdWVyeUhvb2tPcHRpb25zID0gb3B0aW9ucykpO1xuICAgICAgICB2YXIgY3VycmVudFdhdGNoUXVlcnlPcHRpb25zID0gdGhpcy53YXRjaFF1ZXJ5T3B0aW9ucztcbiAgICAgICAgaWYgKCFlcXVhbGl0eS5lcXVhbCh3YXRjaFF1ZXJ5T3B0aW9ucywgY3VycmVudFdhdGNoUXVlcnlPcHRpb25zKSkge1xuICAgICAgICAgICAgdGhpcy53YXRjaFF1ZXJ5T3B0aW9ucyA9IHdhdGNoUXVlcnlPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRXYXRjaFF1ZXJ5T3B0aW9ucyAmJiB0aGlzLm9ic2VydmFibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmFibGUucmVvYnNlcnZlKHRoaXMuZ2V0T2JzUXVlcnlPcHRpb25zKCkpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJldmlvdXNEYXRhID0gKChfYSA9IHRoaXMucmVzdWx0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGF0YSkgfHwgdGhpcy5wcmV2aW91c0RhdGE7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbkNvbXBsZXRlZCA9XG4gICAgICAgICAgICBvcHRpb25zLm9uQ29tcGxldGVkIHx8IEludGVybmFsU3RhdGUucHJvdG90eXBlLm9uQ29tcGxldGVkO1xuICAgICAgICB0aGlzLm9uRXJyb3IgPSBvcHRpb25zLm9uRXJyb3IgfHwgSW50ZXJuYWxTdGF0ZS5wcm90b3R5cGUub25FcnJvcjtcbiAgICAgICAgaWYgKCh0aGlzLnJlbmRlclByb21pc2VzIHx8IHRoaXMuY2xpZW50LmRpc2FibGVOZXR3b3JrRmV0Y2hlcykgJiZcbiAgICAgICAgICAgIHRoaXMucXVlcnlIb29rT3B0aW9ucy5zc3IgPT09IGZhbHNlICYmXG4gICAgICAgICAgICAhdGhpcy5xdWVyeUhvb2tPcHRpb25zLnNraXApIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy5zc3JEaXNhYmxlZFJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnF1ZXJ5SG9va09wdGlvbnMuc2tpcCB8fFxuICAgICAgICAgICAgdGhpcy53YXRjaFF1ZXJ5T3B0aW9ucy5mZXRjaFBvbGljeSA9PT0gXCJzdGFuZGJ5XCIpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy5za2lwU3RhbmRieVJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnJlc3VsdCA9PT0gdGhpcy5zc3JEaXNhYmxlZFJlc3VsdCB8fFxuICAgICAgICAgICAgdGhpcy5yZXN1bHQgPT09IHRoaXMuc2tpcFN0YW5kYnlSZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gdm9pZCAwO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnRlcm5hbFN0YXRlLnByb3RvdHlwZS5nZXRPYnNRdWVyeU9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b01lcmdlID0gW107XG4gICAgICAgIHZhciBnbG9iYWxEZWZhdWx0cyA9IHRoaXMuY2xpZW50LmRlZmF1bHRPcHRpb25zLndhdGNoUXVlcnk7XG4gICAgICAgIGlmIChnbG9iYWxEZWZhdWx0cylcbiAgICAgICAgICAgIHRvTWVyZ2UucHVzaChnbG9iYWxEZWZhdWx0cyk7XG4gICAgICAgIGlmICh0aGlzLnF1ZXJ5SG9va09wdGlvbnMuZGVmYXVsdE9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRvTWVyZ2UucHVzaCh0aGlzLnF1ZXJ5SG9va09wdGlvbnMuZGVmYXVsdE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRvTWVyZ2UucHVzaCh1dGlsaXRpZXMuY29tcGFjdCh0aGlzLm9ic2VydmFibGUgJiYgdGhpcy5vYnNlcnZhYmxlLm9wdGlvbnMsIHRoaXMud2F0Y2hRdWVyeU9wdGlvbnMpKTtcbiAgICAgICAgcmV0dXJuIHRvTWVyZ2UucmVkdWNlKHV0aWxpdGllcy5tZXJnZU9wdGlvbnMpO1xuICAgIH07XG4gICAgSW50ZXJuYWxTdGF0ZS5wcm90b3R5cGUuY3JlYXRlV2F0Y2hRdWVyeU9wdGlvbnMgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIF9iO1xuICAgICAgICBpZiAoX2EgPT09IHZvaWQgMCkgeyBfYSA9IHt9OyB9XG4gICAgICAgIHZhciBza2lwID0gX2Euc2tpcDsgX2Euc3NyOyBfYS5vbkNvbXBsZXRlZDsgX2Eub25FcnJvcjsgX2EuZGVmYXVsdE9wdGlvbnM7XG4gICAgICAgIHZhciBvdGhlck9wdGlvbnMgPSB0c2xpYi5fX3Jlc3QoX2EsIFtcInNraXBcIiwgXCJzc3JcIiwgXCJvbkNvbXBsZXRlZFwiLCBcIm9uRXJyb3JcIiwgXCJkZWZhdWx0T3B0aW9uc1wiXSk7XG4gICAgICAgIHZhciB3YXRjaFF1ZXJ5T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24ob3RoZXJPcHRpb25zLCB7IHF1ZXJ5OiB0aGlzLnF1ZXJ5IH0pO1xuICAgICAgICBpZiAodGhpcy5yZW5kZXJQcm9taXNlcyAmJlxuICAgICAgICAgICAgKHdhdGNoUXVlcnlPcHRpb25zLmZldGNoUG9saWN5ID09PSBcIm5ldHdvcmstb25seVwiIHx8XG4gICAgICAgICAgICAgICAgd2F0Y2hRdWVyeU9wdGlvbnMuZmV0Y2hQb2xpY3kgPT09IFwiY2FjaGUtYW5kLW5ldHdvcmtcIikpIHtcbiAgICAgICAgICAgIHdhdGNoUXVlcnlPcHRpb25zLmZldGNoUG9saWN5ID0gXCJjYWNoZS1maXJzdFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICghd2F0Y2hRdWVyeU9wdGlvbnMudmFyaWFibGVzKSB7XG4gICAgICAgICAgICB3YXRjaFF1ZXJ5T3B0aW9ucy52YXJpYWJsZXMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2tpcCkge1xuICAgICAgICAgICAgdmFyIF9jID0gd2F0Y2hRdWVyeU9wdGlvbnMuZmV0Y2hQb2xpY3ksIGZldGNoUG9saWN5ID0gX2MgPT09IHZvaWQgMCA/IHRoaXMuZ2V0RGVmYXVsdEZldGNoUG9saWN5KCkgOiBfYywgX2QgPSB3YXRjaFF1ZXJ5T3B0aW9ucy5pbml0aWFsRmV0Y2hQb2xpY3ksIGluaXRpYWxGZXRjaFBvbGljeSA9IF9kID09PSB2b2lkIDAgPyBmZXRjaFBvbGljeSA6IF9kO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih3YXRjaFF1ZXJ5T3B0aW9ucywge1xuICAgICAgICAgICAgICAgIGluaXRpYWxGZXRjaFBvbGljeTogaW5pdGlhbEZldGNoUG9saWN5LFxuICAgICAgICAgICAgICAgIGZldGNoUG9saWN5OiBcInN0YW5kYnlcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF3YXRjaFF1ZXJ5T3B0aW9ucy5mZXRjaFBvbGljeSkge1xuICAgICAgICAgICAgd2F0Y2hRdWVyeU9wdGlvbnMuZmV0Y2hQb2xpY3kgPVxuICAgICAgICAgICAgICAgICgoX2IgPSB0aGlzLm9ic2VydmFibGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5vcHRpb25zLmluaXRpYWxGZXRjaFBvbGljeSkgfHxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXREZWZhdWx0RmV0Y2hQb2xpY3koKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2F0Y2hRdWVyeU9wdGlvbnM7XG4gICAgfTtcbiAgICBJbnRlcm5hbFN0YXRlLnByb3RvdHlwZS5nZXREZWZhdWx0RmV0Y2hQb2xpY3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoKChfYSA9IHRoaXMucXVlcnlIb29rT3B0aW9ucy5kZWZhdWx0T3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZldGNoUG9saWN5KSB8fFxuICAgICAgICAgICAgKChfYiA9IHRoaXMuY2xpZW50LmRlZmF1bHRPcHRpb25zLndhdGNoUXVlcnkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5mZXRjaFBvbGljeSkgfHxcbiAgICAgICAgICAgIFwiY2FjaGUtZmlyc3RcIik7XG4gICAgfTtcbiAgICBJbnRlcm5hbFN0YXRlLnByb3RvdHlwZS5vbkNvbXBsZXRlZCA9IGZ1bmN0aW9uIChkYXRhKSB7IH07XG4gICAgSW50ZXJuYWxTdGF0ZS5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnJvcikgeyB9O1xuICAgIEludGVybmFsU3RhdGUucHJvdG90eXBlLnVzZU9ic2VydmFibGVRdWVyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9ic1F1ZXJ5ID0gKHRoaXMub2JzZXJ2YWJsZSA9XG4gICAgICAgICAgICAodGhpcy5yZW5kZXJQcm9taXNlcyAmJlxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUHJvbWlzZXMuZ2V0U1NST2JzZXJ2YWJsZSh0aGlzLndhdGNoUXVlcnlPcHRpb25zKSkgfHxcbiAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmFibGUgfHxcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC53YXRjaFF1ZXJ5KHRoaXMuZ2V0T2JzUXVlcnlPcHRpb25zKCkpKTtcbiAgICAgICAgdGhpcy5vYnNRdWVyeUZpZWxkcyA9IFJlYWN0X19uYW1lc3BhY2UudXNlTWVtbyhmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgICAgICAgICAgcmVmZXRjaDogb2JzUXVlcnkucmVmZXRjaC5iaW5kKG9ic1F1ZXJ5KSxcbiAgICAgICAgICAgIHJlb2JzZXJ2ZTogb2JzUXVlcnkucmVvYnNlcnZlLmJpbmQob2JzUXVlcnkpLFxuICAgICAgICAgICAgZmV0Y2hNb3JlOiBvYnNRdWVyeS5mZXRjaE1vcmUuYmluZChvYnNRdWVyeSksXG4gICAgICAgICAgICB1cGRhdGVRdWVyeTogb2JzUXVlcnkudXBkYXRlUXVlcnkuYmluZChvYnNRdWVyeSksXG4gICAgICAgICAgICBzdGFydFBvbGxpbmc6IG9ic1F1ZXJ5LnN0YXJ0UG9sbGluZy5iaW5kKG9ic1F1ZXJ5KSxcbiAgICAgICAgICAgIHN0b3BQb2xsaW5nOiBvYnNRdWVyeS5zdG9wUG9sbGluZy5iaW5kKG9ic1F1ZXJ5KSxcbiAgICAgICAgICAgIHN1YnNjcmliZVRvTW9yZTogb2JzUXVlcnkuc3Vic2NyaWJlVG9Nb3JlLmJpbmQob2JzUXVlcnkpLFxuICAgICAgICB9KTsgfSwgW29ic1F1ZXJ5XSk7XG4gICAgICAgIHZhciBzc3JBbGxvd2VkID0gISh0aGlzLnF1ZXJ5SG9va09wdGlvbnMuc3NyID09PSBmYWxzZSB8fCB0aGlzLnF1ZXJ5SG9va09wdGlvbnMuc2tpcCk7XG4gICAgICAgIGlmICh0aGlzLnJlbmRlclByb21pc2VzICYmIHNzckFsbG93ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyUHJvbWlzZXMucmVnaXN0ZXJTU1JPYnNlcnZhYmxlKG9ic1F1ZXJ5KTtcbiAgICAgICAgICAgIGlmIChvYnNRdWVyeS5nZXRDdXJyZW50UmVzdWx0KCkubG9hZGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUHJvbWlzZXMuYWRkT2JzZXJ2YWJsZVF1ZXJ5UHJvbWlzZShvYnNRdWVyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9ic1F1ZXJ5O1xuICAgIH07XG4gICAgSW50ZXJuYWxTdGF0ZS5wcm90b3R5cGUuc2V0UmVzdWx0ID0gZnVuY3Rpb24gKG5leHRSZXN1bHQpIHtcbiAgICAgICAgdmFyIHByZXZpb3VzUmVzdWx0ID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIGlmIChwcmV2aW91c1Jlc3VsdCAmJiBwcmV2aW91c1Jlc3VsdC5kYXRhKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzRGF0YSA9IHByZXZpb3VzUmVzdWx0LmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXN1bHQgPSBuZXh0UmVzdWx0O1xuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgIHRoaXMuaGFuZGxlRXJyb3JPckNvbXBsZXRlZChuZXh0UmVzdWx0LCBwcmV2aW91c1Jlc3VsdCk7XG4gICAgfTtcbiAgICBJbnRlcm5hbFN0YXRlLnByb3RvdHlwZS5oYW5kbGVFcnJvck9yQ29tcGxldGVkID0gZnVuY3Rpb24gKHJlc3VsdCwgcHJldmlvdXNSZXN1bHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCFyZXN1bHQubG9hZGluZykge1xuICAgICAgICAgICAgdmFyIGVycm9yXzEgPSB0aGlzLnRvQXBvbGxvRXJyb3IocmVzdWx0KTtcbiAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcl8xKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9uRXJyb3IoZXJyb3JfMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdC5kYXRhICYmXG4gICAgICAgICAgICAgICAgICAgIChwcmV2aW91c1Jlc3VsdCA9PT0gbnVsbCB8fCBwcmV2aW91c1Jlc3VsdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJldmlvdXNSZXN1bHQubmV0d29ya1N0YXR1cykgIT09IHJlc3VsdC5uZXR3b3JrU3RhdHVzICYmXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5uZXR3b3JrU3RhdHVzID09PSBjb3JlLk5ldHdvcmtTdGF0dXMucmVhZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub25Db21wbGV0ZWQocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgZ2xvYmFscy5pbnZhcmlhbnQud2FybihlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW50ZXJuYWxTdGF0ZS5wcm90b3R5cGUudG9BcG9sbG9FcnJvciA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHV0aWxpdGllcy5pc05vbkVtcHR5QXJyYXkocmVzdWx0LmVycm9ycykgP1xuICAgICAgICAgICAgbmV3IGVycm9ycy5BcG9sbG9FcnJvcih7IGdyYXBoUUxFcnJvcnM6IHJlc3VsdC5lcnJvcnMgfSlcbiAgICAgICAgICAgIDogcmVzdWx0LmVycm9yO1xuICAgIH07XG4gICAgSW50ZXJuYWxTdGF0ZS5wcm90b3R5cGUuZ2V0Q3VycmVudFJlc3VsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvck9yQ29tcGxldGVkKCh0aGlzLnJlc3VsdCA9IHRoaXMub2JzZXJ2YWJsZS5nZXRDdXJyZW50UmVzdWx0KCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHQ7XG4gICAgfTtcbiAgICBJbnRlcm5hbFN0YXRlLnByb3RvdHlwZS50b1F1ZXJ5UmVzdWx0ID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICB2YXIgcXVlcnlSZXN1bHQgPSB0aGlzLnRvUXVlcnlSZXN1bHRDYWNoZS5nZXQocmVzdWx0KTtcbiAgICAgICAgaWYgKHF1ZXJ5UmVzdWx0KVxuICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5UmVzdWx0O1xuICAgICAgICB2YXIgZGF0YSA9IHJlc3VsdC5kYXRhOyByZXN1bHQucGFydGlhbDsgdmFyIHJlc3VsdFdpdGhvdXRQYXJ0aWFsID0gdHNsaWIuX19yZXN0KHJlc3VsdCwgW1wiZGF0YVwiLCBcInBhcnRpYWxcIl0pO1xuICAgICAgICB0aGlzLnRvUXVlcnlSZXN1bHRDYWNoZS5zZXQocmVzdWx0LCAocXVlcnlSZXN1bHQgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7IGRhdGE6IGRhdGEgfSwgcmVzdWx0V2l0aG91dFBhcnRpYWwpLCB0aGlzLm9ic1F1ZXJ5RmllbGRzKSwgeyBjbGllbnQ6IHRoaXMuY2xpZW50LCBvYnNlcnZhYmxlOiB0aGlzLm9ic2VydmFibGUsIHZhcmlhYmxlczogdGhpcy5vYnNlcnZhYmxlLnZhcmlhYmxlcywgY2FsbGVkOiAhdGhpcy5xdWVyeUhvb2tPcHRpb25zLnNraXAsIHByZXZpb3VzRGF0YTogdGhpcy5wcmV2aW91c0RhdGEgfSkpKTtcbiAgICAgICAgaWYgKCFxdWVyeVJlc3VsdC5lcnJvciAmJiB1dGlsaXRpZXMuaXNOb25FbXB0eUFycmF5KHJlc3VsdC5lcnJvcnMpKSB7XG4gICAgICAgICAgICBxdWVyeVJlc3VsdC5lcnJvciA9IG5ldyBlcnJvcnMuQXBvbGxvRXJyb3IoeyBncmFwaFFMRXJyb3JzOiByZXN1bHQuZXJyb3JzIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBxdWVyeVJlc3VsdDtcbiAgICB9O1xuICAgIEludGVybmFsU3RhdGUucHJvdG90eXBlLnVuc2FmZUhhbmRsZVBhcnRpYWxSZWZldGNoID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0LnBhcnRpYWwgJiZcbiAgICAgICAgICAgIHRoaXMucXVlcnlIb29rT3B0aW9ucy5wYXJ0aWFsUmVmZXRjaCAmJlxuICAgICAgICAgICAgIXJlc3VsdC5sb2FkaW5nICYmXG4gICAgICAgICAgICAoIXJlc3VsdC5kYXRhIHx8IE9iamVjdC5rZXlzKHJlc3VsdC5kYXRhKS5sZW5ndGggPT09IDApICYmXG4gICAgICAgICAgICB0aGlzLm9ic2VydmFibGUub3B0aW9ucy5mZXRjaFBvbGljeSAhPT0gXCJjYWNoZS1vbmx5XCIpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuZXR3b3JrU3RhdHVzOiBjb3JlLk5ldHdvcmtTdGF0dXMucmVmZXRjaCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZhYmxlLnJlZmV0Y2goKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEludGVybmFsU3RhdGU7XG59KCkpO1xuXG52YXIgRUFHRVJfTUVUSE9EUyA9IFtcbiAgICBcInJlZmV0Y2hcIixcbiAgICBcInJlb2JzZXJ2ZVwiLFxuICAgIFwiZmV0Y2hNb3JlXCIsXG4gICAgXCJ1cGRhdGVRdWVyeVwiLFxuICAgIFwic3RhcnRQb2xsaW5nXCIsXG4gICAgXCJzdWJzY3JpYmVUb01vcmVcIixcbl07XG5mdW5jdGlvbiB1c2VMYXp5UXVlcnkocXVlcnksIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGV4ZWNPcHRpb25zUmVmID0gUmVhY3RfX25hbWVzcGFjZS51c2VSZWYoKTtcbiAgICB2YXIgb3B0aW9uc1JlZiA9IFJlYWN0X19uYW1lc3BhY2UudXNlUmVmKCk7XG4gICAgdmFyIHF1ZXJ5UmVmID0gUmVhY3RfX25hbWVzcGFjZS51c2VSZWYoKTtcbiAgICB2YXIgbWVyZ2VkID0gdXRpbGl0aWVzLm1lcmdlT3B0aW9ucyhvcHRpb25zLCBleGVjT3B0aW9uc1JlZi5jdXJyZW50IHx8IHt9KTtcbiAgICB2YXIgZG9jdW1lbnQgPSAoX2EgPSBtZXJnZWQgPT09IG51bGwgfHwgbWVyZ2VkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtZXJnZWQucXVlcnkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHF1ZXJ5O1xuICAgIG9wdGlvbnNSZWYuY3VycmVudCA9IG1lcmdlZDtcbiAgICBxdWVyeVJlZi5jdXJyZW50ID0gZG9jdW1lbnQ7XG4gICAgdmFyIGludGVybmFsU3RhdGUgPSB1c2VJbnRlcm5hbFN0YXRlKHVzZUFwb2xsb0NsaWVudChvcHRpb25zICYmIG9wdGlvbnMuY2xpZW50KSwgZG9jdW1lbnQpO1xuICAgIHZhciB1c2VRdWVyeVJlc3VsdCA9IGludGVybmFsU3RhdGUudXNlUXVlcnkodHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIG1lcmdlZCksIHsgc2tpcDogIWV4ZWNPcHRpb25zUmVmLmN1cnJlbnQgfSkpO1xuICAgIHZhciBpbml0aWFsRmV0Y2hQb2xpY3kgPSB1c2VRdWVyeVJlc3VsdC5vYnNlcnZhYmxlLm9wdGlvbnMuaW5pdGlhbEZldGNoUG9saWN5IHx8XG4gICAgICAgIGludGVybmFsU3RhdGUuZ2V0RGVmYXVsdEZldGNoUG9saWN5KCk7XG4gICAgdmFyIHJlc3VsdCA9IE9iamVjdC5hc3NpZ24odXNlUXVlcnlSZXN1bHQsIHtcbiAgICAgICAgY2FsbGVkOiAhIWV4ZWNPcHRpb25zUmVmLmN1cnJlbnQsXG4gICAgfSk7XG4gICAgdmFyIGVhZ2VyTWV0aG9kcyA9IFJlYWN0X19uYW1lc3BhY2UudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlYWdlck1ldGhvZHMgPSB7fTtcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kID0gcmVzdWx0W2tleV07XG4gICAgICAgICAgICBlYWdlck1ldGhvZHNba2V5XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWV4ZWNPcHRpb25zUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhlY09wdGlvbnNSZWYuY3VycmVudCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsU3RhdGUuZm9yY2VVcGRhdGVTdGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIEVBR0VSX01FVEhPRFNfMSA9IEVBR0VSX01FVEhPRFM7IF9pIDwgRUFHRVJfTUVUSE9EU18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGtleSA9IEVBR0VSX01FVEhPRFNfMVtfaV07XG4gICAgICAgICAgICBfbG9vcF8xKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVhZ2VyTWV0aG9kcztcbiAgICB9LCBbXSk7XG4gICAgT2JqZWN0LmFzc2lnbihyZXN1bHQsIGVhZ2VyTWV0aG9kcyk7XG4gICAgdmFyIGV4ZWN1dGUgPSBSZWFjdF9fbmFtZXNwYWNlLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChleGVjdXRlT3B0aW9ucykge1xuICAgICAgICBleGVjT3B0aW9uc1JlZi5jdXJyZW50ID1cbiAgICAgICAgICAgIGV4ZWN1dGVPcHRpb25zID8gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGV4ZWN1dGVPcHRpb25zKSwgeyBmZXRjaFBvbGljeTogZXhlY3V0ZU9wdGlvbnMuZmV0Y2hQb2xpY3kgfHwgaW5pdGlhbEZldGNoUG9saWN5IH0pIDoge1xuICAgICAgICAgICAgICAgIGZldGNoUG9saWN5OiBpbml0aWFsRmV0Y2hQb2xpY3ksXG4gICAgICAgICAgICB9O1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHV0aWxpdGllcy5tZXJnZU9wdGlvbnMob3B0aW9uc1JlZi5jdXJyZW50LCB0c2xpYi5fX2Fzc2lnbih7IHF1ZXJ5OiBxdWVyeVJlZi5jdXJyZW50IH0sIGV4ZWNPcHRpb25zUmVmLmN1cnJlbnQpKTtcbiAgICAgICAgdmFyIHByb21pc2UgPSBpbnRlcm5hbFN0YXRlXG4gICAgICAgICAgICAuZXhlY3V0ZVF1ZXJ5KHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBza2lwOiBmYWxzZSB9KSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChxdWVyeVJlc3VsdCkgeyByZXR1cm4gT2JqZWN0LmFzc2lnbihxdWVyeVJlc3VsdCwgZWFnZXJNZXRob2RzKTsgfSk7XG4gICAgICAgIHByb21pc2UuY2F0Y2goZnVuY3Rpb24gKCkgeyB9KTtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBbZXhlY3V0ZSwgcmVzdWx0XTtcbn1cblxuZnVuY3Rpb24gdXNlTXV0YXRpb24obXV0YXRpb24sIG9wdGlvbnMpIHtcbiAgICB2YXIgY2xpZW50ID0gdXNlQXBvbGxvQ2xpZW50KG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jbGllbnQpO1xuICAgIHBhcnNlci52ZXJpZnlEb2N1bWVudFR5cGUobXV0YXRpb24sIHBhcnNlci5Eb2N1bWVudFR5cGUuTXV0YXRpb24pO1xuICAgIHZhciBfYSA9IFJlYWN0X19uYW1lc3BhY2UudXNlU3RhdGUoe1xuICAgICAgICBjYWxsZWQ6IGZhbHNlLFxuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgY2xpZW50OiBjbGllbnQsXG4gICAgfSksIHJlc3VsdCA9IF9hWzBdLCBzZXRSZXN1bHQgPSBfYVsxXTtcbiAgICB2YXIgcmVmID0gUmVhY3RfX25hbWVzcGFjZS51c2VSZWYoe1xuICAgICAgICByZXN1bHQ6IHJlc3VsdCxcbiAgICAgICAgbXV0YXRpb25JZDogMCxcbiAgICAgICAgaXNNb3VudGVkOiB0cnVlLFxuICAgICAgICBjbGllbnQ6IGNsaWVudCxcbiAgICAgICAgbXV0YXRpb246IG11dGF0aW9uLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgIH0pO1xuICAgIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihyZWYuY3VycmVudCwgeyBjbGllbnQ6IGNsaWVudCwgb3B0aW9uczogb3B0aW9ucywgbXV0YXRpb246IG11dGF0aW9uIH0pO1xuICAgIH1cbiAgICB2YXIgZXhlY3V0ZSA9IFJlYWN0X19uYW1lc3BhY2UudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV4ZWN1dGVPcHRpb25zKSB7XG4gICAgICAgIGlmIChleGVjdXRlT3B0aW9ucyA9PT0gdm9pZCAwKSB7IGV4ZWN1dGVPcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIF9hID0gcmVmLmN1cnJlbnQsIG9wdGlvbnMgPSBfYS5vcHRpb25zLCBtdXRhdGlvbiA9IF9hLm11dGF0aW9uO1xuICAgICAgICB2YXIgYmFzZU9wdGlvbnMgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgb3B0aW9ucyksIHsgbXV0YXRpb246IG11dGF0aW9uIH0pO1xuICAgICAgICB2YXIgY2xpZW50ID0gZXhlY3V0ZU9wdGlvbnMuY2xpZW50IHx8IHJlZi5jdXJyZW50LmNsaWVudDtcbiAgICAgICAgaWYgKCFyZWYuY3VycmVudC5yZXN1bHQubG9hZGluZyAmJlxuICAgICAgICAgICAgIWJhc2VPcHRpb25zLmlnbm9yZVJlc3VsdHMgJiZcbiAgICAgICAgICAgIHJlZi5jdXJyZW50LmlzTW91bnRlZCkge1xuICAgICAgICAgICAgc2V0UmVzdWx0KChyZWYuY3VycmVudC5yZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogdm9pZCAwLFxuICAgICAgICAgICAgICAgIGRhdGE6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICBjYWxsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgY2xpZW50OiBjbGllbnQsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG11dGF0aW9uSWQgPSArK3JlZi5jdXJyZW50Lm11dGF0aW9uSWQ7XG4gICAgICAgIHZhciBjbGllbnRPcHRpb25zID0gdXRpbGl0aWVzLm1lcmdlT3B0aW9ucyhiYXNlT3B0aW9ucywgZXhlY3V0ZU9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gY2xpZW50XG4gICAgICAgICAgICAubXV0YXRlKGNsaWVudE9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHJlc3BvbnNlLmRhdGEsIGVycm9ycyQxID0gcmVzcG9uc2UuZXJyb3JzO1xuICAgICAgICAgICAgdmFyIGVycm9yID0gZXJyb3JzJDEgJiYgZXJyb3JzJDEubGVuZ3RoID4gMCA/XG4gICAgICAgICAgICAgICAgbmV3IGVycm9ycy5BcG9sbG9FcnJvcih7IGdyYXBoUUxFcnJvcnM6IGVycm9ycyQxIH0pXG4gICAgICAgICAgICAgICAgOiB2b2lkIDA7XG4gICAgICAgICAgICB2YXIgb25FcnJvciA9IGV4ZWN1dGVPcHRpb25zLm9uRXJyb3IgfHwgKChfYSA9IHJlZi5jdXJyZW50Lm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vbkVycm9yKTtcbiAgICAgICAgICAgIGlmIChlcnJvciAmJiBvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihlcnJvciwgY2xpZW50T3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobXV0YXRpb25JZCA9PT0gcmVmLmN1cnJlbnQubXV0YXRpb25JZCAmJlxuICAgICAgICAgICAgICAgICFjbGllbnRPcHRpb25zLmlnbm9yZVJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0XzEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50OiBjbGllbnQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAocmVmLmN1cnJlbnQuaXNNb3VudGVkICYmICFlcXVhbGl0eS5lcXVhbChyZWYuY3VycmVudC5yZXN1bHQsIHJlc3VsdF8xKSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoKHJlZi5jdXJyZW50LnJlc3VsdCA9IHJlc3VsdF8xKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9uQ29tcGxldGVkID0gZXhlY3V0ZU9wdGlvbnMub25Db21wbGV0ZWQgfHwgKChfYiA9IHJlZi5jdXJyZW50Lm9wdGlvbnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5vbkNvbXBsZXRlZCk7XG4gICAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZWQgPT09IG51bGwgfHwgb25Db21wbGV0ZWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQ29tcGxldGVkKHJlc3BvbnNlLmRhdGEsIGNsaWVudE9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKG11dGF0aW9uSWQgPT09IHJlZi5jdXJyZW50Lm11dGF0aW9uSWQgJiYgcmVmLmN1cnJlbnQuaXNNb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdF8yID0ge1xuICAgICAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50OiBjbGllbnQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoIWVxdWFsaXR5LmVxdWFsKHJlZi5jdXJyZW50LnJlc3VsdCwgcmVzdWx0XzIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdCgocmVmLmN1cnJlbnQucmVzdWx0ID0gcmVzdWx0XzIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgb25FcnJvciA9IGV4ZWN1dGVPcHRpb25zLm9uRXJyb3IgfHwgKChfYSA9IHJlZi5jdXJyZW50Lm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vbkVycm9yKTtcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihlcnJvciwgY2xpZW50T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogdm9pZCAwLCBlcnJvcnM6IGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgfSwgW10pO1xuICAgIHZhciByZXNldCA9IFJlYWN0X19uYW1lc3BhY2UudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocmVmLmN1cnJlbnQuaXNNb3VudGVkKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0XzMgPSB7IGNhbGxlZDogZmFsc2UsIGxvYWRpbmc6IGZhbHNlLCBjbGllbnQ6IGNsaWVudCB9O1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZWYuY3VycmVudCwgeyBtdXRhdGlvbklkOiAwLCByZXN1bHQ6IHJlc3VsdF8zIH0pO1xuICAgICAgICAgICAgc2V0UmVzdWx0KHJlc3VsdF8zKTtcbiAgICAgICAgfVxuICAgIH0sIFtdKTtcbiAgICBSZWFjdF9fbmFtZXNwYWNlLnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlZi5jdXJyZW50LmlzTW91bnRlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZWYuY3VycmVudC5pc01vdW50ZWQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIFtleGVjdXRlLCB0c2xpYi5fX2Fzc2lnbih7IHJlc2V0OiByZXNldCB9LCByZXN1bHQpXTtcbn1cblxuZnVuY3Rpb24gdXNlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbiwgb3B0aW9ucykge1xuICAgIHZhciBoYXNJc3N1ZWREZXByZWNhdGlvbldhcm5pbmdSZWYgPSBSZWFjdF9fbmFtZXNwYWNlLnVzZVJlZihmYWxzZSk7XG4gICAgdmFyIGNsaWVudCA9IHVzZUFwb2xsb0NsaWVudChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY2xpZW50KTtcbiAgICBwYXJzZXIudmVyaWZ5RG9jdW1lbnRUeXBlKHN1YnNjcmlwdGlvbiwgcGFyc2VyLkRvY3VtZW50VHlwZS5TdWJzY3JpcHRpb24pO1xuICAgIHZhciBfYSA9IFJlYWN0X19uYW1lc3BhY2UudXNlU3RhdGUoe1xuICAgICAgICBsb2FkaW5nOiAhKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwKSxcbiAgICAgICAgZXJyb3I6IHZvaWQgMCxcbiAgICAgICAgZGF0YTogdm9pZCAwLFxuICAgICAgICB2YXJpYWJsZXM6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy52YXJpYWJsZXMsXG4gICAgfSksIHJlc3VsdCA9IF9hWzBdLCBzZXRSZXN1bHQgPSBfYVsxXTtcbiAgICBpZiAoIWhhc0lzc3VlZERlcHJlY2F0aW9uV2FybmluZ1JlZi5jdXJyZW50KSB7XG4gICAgICAgIGhhc0lzc3VlZERlcHJlY2F0aW9uV2FybmluZ1JlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5vblN1YnNjcmlwdGlvbkRhdGEpIHtcbiAgICAgICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgZ2xvYmFscy5pbnZhcmlhbnQud2FybihvcHRpb25zLm9uRGF0YSA/IDUyIDogNTMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub25TdWJzY3JpcHRpb25Db21wbGV0ZSkge1xuICAgICAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBnbG9iYWxzLmludmFyaWFudC53YXJuKG9wdGlvbnMub25Db21wbGV0ZSA/IDU0IDogNTUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBfYiA9IFJlYWN0X19uYW1lc3BhY2UudXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNraXApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbGllbnQuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIHF1ZXJ5OiBzdWJzY3JpcHRpb24sXG4gICAgICAgICAgICB2YXJpYWJsZXM6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy52YXJpYWJsZXMsXG4gICAgICAgICAgICBmZXRjaFBvbGljeTogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZldGNoUG9saWN5LFxuICAgICAgICAgICAgY29udGV4dDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNvbnRleHQsXG4gICAgICAgIH0pO1xuICAgIH0pLCBvYnNlcnZhYmxlID0gX2JbMF0sIHNldE9ic2VydmFibGUgPSBfYlsxXTtcbiAgICB2YXIgY2FuUmVzZXRPYnNlcnZhYmxlUmVmID0gUmVhY3RfX25hbWVzcGFjZS51c2VSZWYoZmFsc2UpO1xuICAgIFJlYWN0X19uYW1lc3BhY2UudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNhblJlc2V0T2JzZXJ2YWJsZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICB9LCBbXSk7XG4gICAgdmFyIHJlZiA9IFJlYWN0X19uYW1lc3BhY2UudXNlUmVmKHsgY2xpZW50OiBjbGllbnQsIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uLCBvcHRpb25zOiBvcHRpb25zIH0pO1xuICAgIFJlYWN0X19uYW1lc3BhY2UudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICB2YXIgc2hvdWxkUmVzdWJzY3JpYmUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2hvdWxkUmVzdWJzY3JpYmU7XG4gICAgICAgIGlmICh0eXBlb2Ygc2hvdWxkUmVzdWJzY3JpYmUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgc2hvdWxkUmVzdWJzY3JpYmUgPSAhIXNob3VsZFJlc3Vic2NyaWJlKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2tpcCkge1xuICAgICAgICAgICAgaWYgKCEob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNraXApICE9PSAhKChfYSA9IHJlZi5jdXJyZW50Lm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5za2lwKSB8fFxuICAgICAgICAgICAgICAgIGNhblJlc2V0T2JzZXJ2YWJsZVJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgc2V0UmVzdWx0KHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudmFyaWFibGVzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNldE9ic2VydmFibGUobnVsbCk7XG4gICAgICAgICAgICAgICAgY2FuUmVzZXRPYnNlcnZhYmxlUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoc2hvdWxkUmVzdWJzY3JpYmUgIT09IGZhbHNlICYmXG4gICAgICAgICAgICAoY2xpZW50ICE9PSByZWYuY3VycmVudC5jbGllbnQgfHxcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gIT09IHJlZi5jdXJyZW50LnN1YnNjcmlwdGlvbiB8fFxuICAgICAgICAgICAgICAgIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmV0Y2hQb2xpY3kpICE9PSAoKF9iID0gcmVmLmN1cnJlbnQub3B0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmZldGNoUG9saWN5KSB8fFxuICAgICAgICAgICAgICAgICEob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNraXApICE9PSAhKChfYyA9IHJlZi5jdXJyZW50Lm9wdGlvbnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5za2lwKSB8fFxuICAgICAgICAgICAgICAgICFlcXVhbGl0eS5lcXVhbChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudmFyaWFibGVzLCAoX2QgPSByZWYuY3VycmVudC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QudmFyaWFibGVzKSkpIHx8XG4gICAgICAgICAgICBjYW5SZXNldE9ic2VydmFibGVSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgc2V0UmVzdWx0KHtcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRhdGE6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICBlcnJvcjogdm9pZCAwLFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlczogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnZhcmlhYmxlcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2V0T2JzZXJ2YWJsZShjbGllbnQuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBxdWVyeTogc3Vic2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlczogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICBmZXRjaFBvbGljeTogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZldGNoUG9saWN5LFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jb250ZXh0LFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgY2FuUmVzZXRPYnNlcnZhYmxlUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuYXNzaWduKHJlZi5jdXJyZW50LCB7IGNsaWVudDogY2xpZW50LCBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvbiwgb3B0aW9uczogb3B0aW9ucyB9KTtcbiAgICB9LCBbY2xpZW50LCBzdWJzY3JpcHRpb24sIG9wdGlvbnMsIGNhblJlc2V0T2JzZXJ2YWJsZVJlZi5jdXJyZW50XSk7XG4gICAgUmVhY3RfX25hbWVzcGFjZS51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIW9ic2VydmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gb2JzZXJ2YWJsZS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKGZldGNoUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBmZXRjaFJlc3VsdC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogdm9pZCAwLFxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy52YXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzZXRSZXN1bHQocmVzdWx0KTtcbiAgICAgICAgICAgICAgICBpZiAoKF9hID0gcmVmLmN1cnJlbnQub3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9uRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICByZWYuY3VycmVudC5vcHRpb25zLm9uRGF0YSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGllbnQ6IGNsaWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChfYiA9IHJlZi5jdXJyZW50Lm9wdGlvbnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5vblN1YnNjcmlwdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmLmN1cnJlbnQub3B0aW9ucy5vblN1YnNjcmlwdGlvbkRhdGEoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50OiBjbGllbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25EYXRhOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmlwdGlvblN0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogdm9pZCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgKF9iID0gKF9hID0gcmVmLmN1cnJlbnQub3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9uRXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmlwdGlvblN0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChfYSA9IHJlZi5jdXJyZW50Lm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vbkNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWYuY3VycmVudC5vcHRpb25zLm9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgoX2IgPSByZWYuY3VycmVudC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iub25TdWJzY3JpcHRpb25Db21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmLmN1cnJlbnQub3B0aW9ucy5vblN1YnNjcmlwdGlvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvblN0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9LCBbb2JzZXJ2YWJsZV0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHVzZVJlYWN0aXZlVmFyKHJ2KSB7XG4gICAgcmV0dXJuIHVzZVN5bmNFeHRlcm5hbFN0b3JlKFJlYWN0X19uYW1lc3BhY2UudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgICByZXR1cm4gcnYub25OZXh0Q2hhbmdlKGZ1bmN0aW9uIG9uTmV4dCgpIHtcbiAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgcnYub25OZXh0Q2hhbmdlKG9uTmV4dCk7XG4gICAgICAgIH0pO1xuICAgIH0sIFtydl0pLCBydiwgcnYpO1xufVxuXG5mdW5jdGlvbiB1c2VEZWVwTWVtbyhtZW1vRm4sIGRlcHMpIHtcbiAgICB2YXIgcmVmID0gUmVhY3RfX25hbWVzcGFjZS51c2VSZWYoKTtcbiAgICBpZiAoIXJlZi5jdXJyZW50IHx8ICFlcXVhbGl0eS5lcXVhbChyZWYuY3VycmVudC5kZXBzLCBkZXBzKSkge1xuICAgICAgICByZWYuY3VycmVudCA9IHsgdmFsdWU6IG1lbW9GbigpLCBkZXBzOiBkZXBzIH07XG4gICAgfVxuICAgIHJldHVybiByZWYuY3VycmVudC52YWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVuZGVyRGlzcGF0Y2hlcigpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHJldHVybiAoX2IgPSAoX2EgPSBSZWFjdF9fbmFtZXNwYWNlLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmN1cnJlbnQ7XG59XG52YXIgUmVuZGVyRGlzcGF0Y2hlciA9IG51bGw7XG5mdW5jdGlvbiB1c2VSZW5kZXJHdWFyZCgpIHtcbiAgICBSZW5kZXJEaXNwYXRjaGVyID0gZ2V0UmVuZGVyRGlzcGF0Y2hlcigpO1xuICAgIHJldHVybiBSZWFjdF9fbmFtZXNwYWNlLnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChSZW5kZXJEaXNwYXRjaGVyICE9PSBudWxsICYmIFJlbmRlckRpc3BhdGNoZXIgPT09IGdldFJlbmRlckRpc3BhdGNoZXIoKSk7XG4gICAgfSwgW10pO1xufVxuXG52YXIgSU5JVCA9IHt9O1xuZnVuY3Rpb24gdXNlTGF6eVJlZihnZXRJbml0aWFsVmFsdWUpIHtcbiAgICB2YXIgcmVmID0gUmVhY3RfX25hbWVzcGFjZS51c2VSZWYoSU5JVCk7XG4gICAgaWYgKHJlZi5jdXJyZW50ID09PSBJTklUKSB7XG4gICAgICAgIHJlZi5jdXJyZW50ID0gZ2V0SW5pdGlhbFZhbHVlKCk7XG4gICAgfVxuICAgIHJldHVybiByZWY7XG59XG5cbnZhciB1c2VLZXkgPSBcInVzZVwiO1xudmFyIHJlYWxIb29rID0gUmVhY3RfX25hbWVzcGFjZVt1c2VLZXldO1xudmFyIF9fdXNlID0gcmVhbEhvb2sgfHxcbiAgICBmdW5jdGlvbiBfX3VzZShwcm9taXNlKSB7XG4gICAgICAgIHZhciBzdGF0ZWZ1bFByb21pc2UgPSB1dGlsaXRpZXMud3JhcFByb21pc2VXaXRoU3RhdGUocHJvbWlzZSk7XG4gICAgICAgIHN3aXRjaCAoc3RhdGVmdWxQcm9taXNlLnN0YXR1cykge1xuICAgICAgICAgICAgY2FzZSBcInBlbmRpbmdcIjpcbiAgICAgICAgICAgICAgICB0aHJvdyBzdGF0ZWZ1bFByb21pc2U7XG4gICAgICAgICAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgICAgICAgICAgICB0aHJvdyBzdGF0ZWZ1bFByb21pc2UucmVhc29uO1xuICAgICAgICAgICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZWZ1bFByb21pc2UudmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuXG5mdW5jdGlvbiB1c2VGcmFnbWVudChvcHRpb25zKSB7XG4gICAgdmFyIGNhY2hlID0gdXNlQXBvbGxvQ2xpZW50KCkuY2FjaGU7XG4gICAgdmFyIGRpZmZPcHRpb25zID0gdXNlRGVlcE1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZnJhZ21lbnQgPSBvcHRpb25zLmZyYWdtZW50LCBmcmFnbWVudE5hbWUgPSBvcHRpb25zLmZyYWdtZW50TmFtZSwgZnJvbSA9IG9wdGlvbnMuZnJvbSwgX2EgPSBvcHRpb25zLm9wdGltaXN0aWMsIG9wdGltaXN0aWMgPSBfYSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9hLCByZXN0ID0gdHNsaWIuX19yZXN0KG9wdGlvbnMsIFtcImZyYWdtZW50XCIsIFwiZnJhZ21lbnROYW1lXCIsIFwiZnJvbVwiLCBcIm9wdGltaXN0aWNcIl0pO1xuICAgICAgICByZXR1cm4gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIHJlc3QpLCB7IHJldHVyblBhcnRpYWxEYXRhOiB0cnVlLCBpZDogdHlwZW9mIGZyb20gPT09IFwic3RyaW5nXCIgPyBmcm9tIDogY2FjaGUuaWRlbnRpZnkoZnJvbSksIHF1ZXJ5OiBjYWNoZVtcImdldEZyYWdtZW50RG9jXCJdKGZyYWdtZW50LCBmcmFnbWVudE5hbWUpLCBvcHRpbWlzdGljOiBvcHRpbWlzdGljIH0pO1xuICAgIH0sIFtvcHRpb25zXSk7XG4gICAgdmFyIHJlc3VsdFJlZiA9IHVzZUxhenlSZWYoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZGlmZlRvUmVzdWx0KGNhY2hlLmRpZmYoZGlmZk9wdGlvbnMpKTtcbiAgICB9KTtcbiAgICB2YXIgZ2V0U25hcHNob3QgPSBSZWFjdF9fbmFtZXNwYWNlLnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc3VsdFJlZi5jdXJyZW50OyB9LCBbXSk7XG4gICAgcmV0dXJuIHVzZVN5bmNFeHRlcm5hbFN0b3JlKFJlYWN0X19uYW1lc3BhY2UudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGZvcmNlVXBkYXRlKSB7XG4gICAgICAgIHZhciBsYXN0VGltZW91dCA9IDA7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IGNhY2hlLndhdGNoKHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBkaWZmT3B0aW9ucyksIHsgaW1tZWRpYXRlOiB0cnVlLCBjYWxsYmFjazogZnVuY3Rpb24gKGRpZmYpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVxdWFsaXR5LmVxdWFsKGRpZmYucmVzdWx0LCByZXN1bHRSZWYuY3VycmVudC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRSZWYuY3VycmVudCA9IGRpZmZUb1Jlc3VsdChkaWZmKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGxhc3RUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZvcmNlVXBkYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IH0pKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQobGFzdFRpbWVvdXQpO1xuICAgICAgICB9O1xuICAgIH0sIFtjYWNoZSwgZGlmZk9wdGlvbnNdKSwgZ2V0U25hcHNob3QsIGdldFNuYXBzaG90KTtcbn1cbmZ1bmN0aW9uIGRpZmZUb1Jlc3VsdChkaWZmKSB7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgZGF0YTogZGlmZi5yZXN1bHQsXG4gICAgICAgIGNvbXBsZXRlOiAhIWRpZmYuY29tcGxldGUsXG4gICAgfTtcbiAgICBpZiAoZGlmZi5taXNzaW5nKSB7XG4gICAgICAgIHJlc3VsdC5taXNzaW5nID0gdXRpbGl0aWVzLm1lcmdlRGVlcEFycmF5KGRpZmYubWlzc2luZy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7IHJldHVybiBlcnJvci5taXNzaW5nOyB9KSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBza2lwVG9rZW4gPSBTeW1ib2wuZm9yKFwiYXBvbGxvLnNraXBUb2tlblwiKTtcblxuZnVuY3Rpb24gdXNlU3VzcGVuc2VRdWVyeShxdWVyeSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7IH1cbiAgICB2YXIgY2xpZW50ID0gdXNlQXBvbGxvQ2xpZW50KG9wdGlvbnMuY2xpZW50KTtcbiAgICB2YXIgc3VzcGVuc2VDYWNoZSA9IGludGVybmFsLmdldFN1c3BlbnNlQ2FjaGUoY2xpZW50KTtcbiAgICB2YXIgd2F0Y2hRdWVyeU9wdGlvbnMgPSB1c2VXYXRjaFF1ZXJ5T3B0aW9ucyh7XG4gICAgICAgIGNsaWVudDogY2xpZW50LFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgfSk7XG4gICAgdmFyIGZldGNoUG9saWN5ID0gd2F0Y2hRdWVyeU9wdGlvbnMuZmV0Y2hQb2xpY3ksIHZhcmlhYmxlcyA9IHdhdGNoUXVlcnlPcHRpb25zLnZhcmlhYmxlcztcbiAgICB2YXIgX2EgPSBvcHRpb25zLnF1ZXJ5S2V5LCBxdWVyeUtleSA9IF9hID09PSB2b2lkIDAgPyBbXSA6IF9hO1xuICAgIHZhciBjYWNoZUtleSA9IHRzbGliLl9fc3ByZWFkQXJyYXkoW1xuICAgICAgICBxdWVyeSxcbiAgICAgICAgY2FjaGUuY2Fub25pY2FsU3RyaW5naWZ5KHZhcmlhYmxlcylcbiAgICBdLCBbXS5jb25jYXQocXVlcnlLZXkpLCB0cnVlKTtcbiAgICB2YXIgcXVlcnlSZWYgPSBzdXNwZW5zZUNhY2hlLmdldFF1ZXJ5UmVmKGNhY2hlS2V5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjbGllbnQud2F0Y2hRdWVyeSh3YXRjaFF1ZXJ5T3B0aW9ucyk7XG4gICAgfSk7XG4gICAgdmFyIF9iID0gUmVhY3RfX25hbWVzcGFjZS51c2VTdGF0ZShbcXVlcnlSZWYua2V5LCBxdWVyeVJlZi5wcm9taXNlXSksIGN1cnJlbnQgPSBfYlswXSwgc2V0UHJvbWlzZSA9IF9iWzFdO1xuICAgIGlmIChjdXJyZW50WzBdICE9PSBxdWVyeVJlZi5rZXkpIHtcbiAgICAgICAgY3VycmVudFswXSA9IHF1ZXJ5UmVmLmtleTtcbiAgICAgICAgY3VycmVudFsxXSA9IHF1ZXJ5UmVmLnByb21pc2U7XG4gICAgfVxuICAgIHZhciBwcm9taXNlID0gY3VycmVudFsxXTtcbiAgICBpZiAocXVlcnlSZWYuZGlkQ2hhbmdlT3B0aW9ucyh3YXRjaFF1ZXJ5T3B0aW9ucykpIHtcbiAgICAgICAgY3VycmVudFsxXSA9IHByb21pc2UgPSBxdWVyeVJlZi5hcHBseU9wdGlvbnMod2F0Y2hRdWVyeU9wdGlvbnMpO1xuICAgIH1cbiAgICBSZWFjdF9fbmFtZXNwYWNlLnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkaXNwb3NlID0gcXVlcnlSZWYucmV0YWluKCk7XG4gICAgICAgIHZhciByZW1vdmVMaXN0ZW5lciA9IHF1ZXJ5UmVmLmxpc3RlbihmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAgICAgc2V0UHJvbWlzZShbcXVlcnlSZWYua2V5LCBwcm9taXNlXSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIGRpc3Bvc2UoKTtcbiAgICAgICAgfTtcbiAgICB9LCBbcXVlcnlSZWZdKTtcbiAgICB2YXIgc2tpcFJlc3VsdCA9IFJlYWN0X19uYW1lc3BhY2UudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHRvQXBvbGxvRXJyb3IocXVlcnlSZWYucmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgZGF0YTogcXVlcnlSZWYucmVzdWx0LmRhdGEsXG4gICAgICAgICAgICBuZXR3b3JrU3RhdHVzOiBlcnJvciA/IGNvcmUuTmV0d29ya1N0YXR1cy5lcnJvciA6IGNvcmUuTmV0d29ya1N0YXR1cy5yZWFkeSxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgfTtcbiAgICB9LCBbcXVlcnlSZWYucmVzdWx0XSk7XG4gICAgdmFyIHJlc3VsdCA9IGZldGNoUG9saWN5ID09PSBcInN0YW5kYnlcIiA/IHNraXBSZXN1bHQgOiBfX3VzZShwcm9taXNlKTtcbiAgICB2YXIgZmV0Y2hNb3JlID0gUmVhY3RfX25hbWVzcGFjZS51c2VDYWxsYmFjaygoZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSBxdWVyeVJlZi5mZXRjaE1vcmUob3B0aW9ucyk7XG4gICAgICAgIHNldFByb21pc2UoW3F1ZXJ5UmVmLmtleSwgcXVlcnlSZWYucHJvbWlzZV0pO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9KSwgW3F1ZXJ5UmVmXSk7XG4gICAgdmFyIHJlZmV0Y2ggPSBSZWFjdF9fbmFtZXNwYWNlLnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh2YXJpYWJsZXMpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSBxdWVyeVJlZi5yZWZldGNoKHZhcmlhYmxlcyk7XG4gICAgICAgIHNldFByb21pc2UoW3F1ZXJ5UmVmLmtleSwgcXVlcnlSZWYucHJvbWlzZV0pO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9LCBbcXVlcnlSZWZdKTtcbiAgICB2YXIgc3Vic2NyaWJlVG9Nb3JlID0gUmVhY3RfX25hbWVzcGFjZS51c2VDYWxsYmFjayhmdW5jdGlvbiAob3B0aW9ucykgeyByZXR1cm4gcXVlcnlSZWYub2JzZXJ2YWJsZS5zdWJzY3JpYmVUb01vcmUob3B0aW9ucyk7IH0sIFtxdWVyeVJlZl0pO1xuICAgIHJldHVybiBSZWFjdF9fbmFtZXNwYWNlLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2xpZW50OiBjbGllbnQsXG4gICAgICAgICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgICAgICAgIGVycm9yOiB0b0Fwb2xsb0Vycm9yKHJlc3VsdCksXG4gICAgICAgICAgICBuZXR3b3JrU3RhdHVzOiByZXN1bHQubmV0d29ya1N0YXR1cyxcbiAgICAgICAgICAgIGZldGNoTW9yZTogZmV0Y2hNb3JlLFxuICAgICAgICAgICAgcmVmZXRjaDogcmVmZXRjaCxcbiAgICAgICAgICAgIHN1YnNjcmliZVRvTW9yZTogc3Vic2NyaWJlVG9Nb3JlLFxuICAgICAgICB9O1xuICAgIH0sIFtjbGllbnQsIGZldGNoTW9yZSwgcmVmZXRjaCwgcmVzdWx0LCBzdWJzY3JpYmVUb01vcmVdKTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdmFyIHF1ZXJ5ID0gb3B0aW9ucy5xdWVyeSwgZmV0Y2hQb2xpY3kgPSBvcHRpb25zLmZldGNoUG9saWN5LCByZXR1cm5QYXJ0aWFsRGF0YSA9IG9wdGlvbnMucmV0dXJuUGFydGlhbERhdGE7XG4gICAgcGFyc2VyLnZlcmlmeURvY3VtZW50VHlwZShxdWVyeSwgcGFyc2VyLkRvY3VtZW50VHlwZS5RdWVyeSk7XG4gICAgdmFsaWRhdGVGZXRjaFBvbGljeShmZXRjaFBvbGljeSk7XG4gICAgdmFsaWRhdGVQYXJ0aWFsRGF0YVJldHVybihmZXRjaFBvbGljeSwgcmV0dXJuUGFydGlhbERhdGEpO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVGZXRjaFBvbGljeShmZXRjaFBvbGljeSkge1xuICAgIGlmIChmZXRjaFBvbGljeSA9PT0gdm9pZCAwKSB7IGZldGNoUG9saWN5ID0gXCJjYWNoZS1maXJzdFwiOyB9XG4gICAgdmFyIHN1cHBvcnRlZEZldGNoUG9saWNpZXMgPSBbXG4gICAgICAgIFwiY2FjaGUtZmlyc3RcIixcbiAgICAgICAgXCJuZXR3b3JrLW9ubHlcIixcbiAgICAgICAgXCJuby1jYWNoZVwiLFxuICAgICAgICBcImNhY2hlLWFuZC1uZXR3b3JrXCIsXG4gICAgXTtcbiAgICBnbG9iYWxzLmludmFyaWFudChzdXBwb3J0ZWRGZXRjaFBvbGljaWVzLmluY2x1ZGVzKGZldGNoUG9saWN5KSwgNTYsIGZldGNoUG9saWN5KTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlUGFydGlhbERhdGFSZXR1cm4oZmV0Y2hQb2xpY3ksIHJldHVyblBhcnRpYWxEYXRhKSB7XG4gICAgaWYgKGZldGNoUG9saWN5ID09PSBcIm5vLWNhY2hlXCIgJiYgcmV0dXJuUGFydGlhbERhdGEpIHtcbiAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBnbG9iYWxzLmludmFyaWFudC53YXJuKDU3KTtcbiAgICB9XG59XG5mdW5jdGlvbiB0b0Fwb2xsb0Vycm9yKHJlc3VsdCkge1xuICAgIHJldHVybiB1dGlsaXRpZXMuaXNOb25FbXB0eUFycmF5KHJlc3VsdC5lcnJvcnMpID9cbiAgICAgICAgbmV3IGNvcmUuQXBvbGxvRXJyb3IoeyBncmFwaFFMRXJyb3JzOiByZXN1bHQuZXJyb3JzIH0pXG4gICAgICAgIDogcmVzdWx0LmVycm9yO1xufVxuZnVuY3Rpb24gdXNlV2F0Y2hRdWVyeU9wdGlvbnMoX2EpIHtcbiAgICB2YXIgY2xpZW50ID0gX2EuY2xpZW50LCBxdWVyeSA9IF9hLnF1ZXJ5LCBvcHRpb25zID0gX2Eub3B0aW9ucztcbiAgICByZXR1cm4gdXNlRGVlcE1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChvcHRpb25zID09PSBza2lwVG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB7IHF1ZXJ5OiBxdWVyeSwgZmV0Y2hQb2xpY3k6IFwic3RhbmRieVwiIH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZldGNoUG9saWN5ID0gb3B0aW9ucy5mZXRjaFBvbGljeSB8fFxuICAgICAgICAgICAgKChfYSA9IGNsaWVudC5kZWZhdWx0T3B0aW9ucy53YXRjaFF1ZXJ5KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmV0Y2hQb2xpY3kpIHx8XG4gICAgICAgICAgICBcImNhY2hlLWZpcnN0XCI7XG4gICAgICAgIHZhciB3YXRjaFF1ZXJ5T3B0aW9ucyA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBmZXRjaFBvbGljeTogZmV0Y2hQb2xpY3ksIHF1ZXJ5OiBxdWVyeSwgbm90aWZ5T25OZXR3b3JrU3RhdHVzQ2hhbmdlOiBmYWxzZSwgbmV4dEZldGNoUG9saWN5OiB2b2lkIDAgfSk7XG4gICAgICAgIGlmIChnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZU9wdGlvbnMod2F0Y2hRdWVyeU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnNraXApIHtcbiAgICAgICAgICAgIHdhdGNoUXVlcnlPcHRpb25zLmZldGNoUG9saWN5ID0gXCJzdGFuZGJ5XCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdhdGNoUXVlcnlPcHRpb25zO1xuICAgIH0sIFtjbGllbnQsIG9wdGlvbnMsIHF1ZXJ5XSk7XG59XG5cbmZ1bmN0aW9uIHVzZUJhY2tncm91bmRRdWVyeShxdWVyeSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7IH1cbiAgICB2YXIgY2xpZW50ID0gdXNlQXBvbGxvQ2xpZW50KG9wdGlvbnMuY2xpZW50KTtcbiAgICB2YXIgc3VzcGVuc2VDYWNoZSA9IGludGVybmFsLmdldFN1c3BlbnNlQ2FjaGUoY2xpZW50KTtcbiAgICB2YXIgd2F0Y2hRdWVyeU9wdGlvbnMgPSB1c2VXYXRjaFF1ZXJ5T3B0aW9ucyh7IGNsaWVudDogY2xpZW50LCBxdWVyeTogcXVlcnksIG9wdGlvbnM6IG9wdGlvbnMgfSk7XG4gICAgdmFyIGZldGNoUG9saWN5ID0gd2F0Y2hRdWVyeU9wdGlvbnMuZmV0Y2hQb2xpY3ksIHZhcmlhYmxlcyA9IHdhdGNoUXVlcnlPcHRpb25zLnZhcmlhYmxlcztcbiAgICB2YXIgX2EgPSBvcHRpb25zLnF1ZXJ5S2V5LCBxdWVyeUtleSA9IF9hID09PSB2b2lkIDAgPyBbXSA6IF9hO1xuICAgIHZhciBkaWRGZXRjaFJlc3VsdCA9IFJlYWN0X19uYW1lc3BhY2UudXNlUmVmKGZldGNoUG9saWN5ICE9PSBcInN0YW5kYnlcIik7XG4gICAgZGlkRmV0Y2hSZXN1bHQuY3VycmVudCB8fCAoZGlkRmV0Y2hSZXN1bHQuY3VycmVudCA9IGZldGNoUG9saWN5ICE9PSBcInN0YW5kYnlcIik7XG4gICAgdmFyIGNhY2hlS2V5ID0gdHNsaWIuX19zcHJlYWRBcnJheShbXG4gICAgICAgIHF1ZXJ5LFxuICAgICAgICBjYWNoZS5jYW5vbmljYWxTdHJpbmdpZnkodmFyaWFibGVzKVxuICAgIF0sIFtdLmNvbmNhdChxdWVyeUtleSksIHRydWUpO1xuICAgIHZhciBxdWVyeVJlZiA9IHN1c3BlbnNlQ2FjaGUuZ2V0UXVlcnlSZWYoY2FjaGVLZXksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNsaWVudC53YXRjaFF1ZXJ5KHdhdGNoUXVlcnlPcHRpb25zKTtcbiAgICB9KTtcbiAgICB2YXIgX2IgPSBSZWFjdF9fbmFtZXNwYWNlLnVzZVN0YXRlKGludGVybmFsLndyYXBRdWVyeVJlZihxdWVyeVJlZikpLCB3cmFwcGVkUXVlcnlSZWYgPSBfYlswXSwgc2V0V3JhcHBlZFF1ZXJ5UmVmID0gX2JbMV07XG4gICAgaWYgKGludGVybmFsLnVud3JhcFF1ZXJ5UmVmKHdyYXBwZWRRdWVyeVJlZikgIT09IHF1ZXJ5UmVmKSB7XG4gICAgICAgIHNldFdyYXBwZWRRdWVyeVJlZihpbnRlcm5hbC53cmFwUXVlcnlSZWYocXVlcnlSZWYpKTtcbiAgICB9XG4gICAgaWYgKHF1ZXJ5UmVmLmRpZENoYW5nZU9wdGlvbnMod2F0Y2hRdWVyeU9wdGlvbnMpKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gcXVlcnlSZWYuYXBwbHlPcHRpb25zKHdhdGNoUXVlcnlPcHRpb25zKTtcbiAgICAgICAgaW50ZXJuYWwudXBkYXRlV3JhcHBlZFF1ZXJ5UmVmKHdyYXBwZWRRdWVyeVJlZiwgcHJvbWlzZSk7XG4gICAgfVxuICAgIHZhciBmZXRjaE1vcmUgPSBSZWFjdF9fbmFtZXNwYWNlLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gcXVlcnlSZWYuZmV0Y2hNb3JlKG9wdGlvbnMpO1xuICAgICAgICBzZXRXcmFwcGVkUXVlcnlSZWYoaW50ZXJuYWwud3JhcFF1ZXJ5UmVmKHF1ZXJ5UmVmKSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH0sIFtxdWVyeVJlZl0pO1xuICAgIHZhciByZWZldGNoID0gUmVhY3RfX25hbWVzcGFjZS51c2VDYWxsYmFjayhmdW5jdGlvbiAodmFyaWFibGVzKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gcXVlcnlSZWYucmVmZXRjaCh2YXJpYWJsZXMpO1xuICAgICAgICBzZXRXcmFwcGVkUXVlcnlSZWYoaW50ZXJuYWwud3JhcFF1ZXJ5UmVmKHF1ZXJ5UmVmKSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH0sIFtxdWVyeVJlZl0pO1xuICAgIHJldHVybiBbXG4gICAgICAgIGRpZEZldGNoUmVzdWx0LmN1cnJlbnQgPyB3cmFwcGVkUXVlcnlSZWYgOiB2b2lkIDAsXG4gICAgICAgIHsgZmV0Y2hNb3JlOiBmZXRjaE1vcmUsIHJlZmV0Y2g6IHJlZmV0Y2ggfSxcbiAgICBdO1xufVxuXG5mdW5jdGlvbiB1c2VMb2FkYWJsZVF1ZXJ5KHF1ZXJ5LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgfVxuICAgIHZhciBjbGllbnQgPSB1c2VBcG9sbG9DbGllbnQob3B0aW9ucy5jbGllbnQpO1xuICAgIHZhciBzdXNwZW5zZUNhY2hlID0gaW50ZXJuYWwuZ2V0U3VzcGVuc2VDYWNoZShjbGllbnQpO1xuICAgIHZhciB3YXRjaFF1ZXJ5T3B0aW9ucyA9IHVzZVdhdGNoUXVlcnlPcHRpb25zKHsgY2xpZW50OiBjbGllbnQsIHF1ZXJ5OiBxdWVyeSwgb3B0aW9uczogb3B0aW9ucyB9KTtcbiAgICB2YXIgX2EgPSBvcHRpb25zLnF1ZXJ5S2V5LCBxdWVyeUtleSA9IF9hID09PSB2b2lkIDAgPyBbXSA6IF9hO1xuICAgIHZhciBfYiA9IFJlYWN0X19uYW1lc3BhY2UudXNlU3RhdGUobnVsbCksIHF1ZXJ5UmVmID0gX2JbMF0sIHNldFF1ZXJ5UmVmID0gX2JbMV07XG4gICAgdmFyIGludGVybmFsUXVlcnlSZWYgPSBxdWVyeVJlZiAmJiBpbnRlcm5hbC51bndyYXBRdWVyeVJlZihxdWVyeVJlZik7XG4gICAgaWYgKHF1ZXJ5UmVmICYmIChpbnRlcm5hbFF1ZXJ5UmVmID09PSBudWxsIHx8IGludGVybmFsUXVlcnlSZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGludGVybmFsUXVlcnlSZWYuZGlkQ2hhbmdlT3B0aW9ucyh3YXRjaFF1ZXJ5T3B0aW9ucykpKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gaW50ZXJuYWxRdWVyeVJlZi5hcHBseU9wdGlvbnMod2F0Y2hRdWVyeU9wdGlvbnMpO1xuICAgICAgICBpbnRlcm5hbC51cGRhdGVXcmFwcGVkUXVlcnlSZWYocXVlcnlSZWYsIHByb21pc2UpO1xuICAgIH1cbiAgICB2YXIgY2FsbGVkRHVyaW5nUmVuZGVyID0gdXNlUmVuZGVyR3VhcmQoKTtcbiAgICB2YXIgZmV0Y2hNb3JlID0gUmVhY3RfX25hbWVzcGFjZS51c2VDYWxsYmFjayhmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBpZiAoIWludGVybmFsUXVlcnlSZWYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBxdWVyeSBoYXMgbm90IGJlZW4gbG9hZGVkLiBQbGVhc2UgbG9hZCB0aGUgcXVlcnkuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcm9taXNlID0gaW50ZXJuYWxRdWVyeVJlZi5mZXRjaE1vcmUob3B0aW9ucyk7XG4gICAgICAgIHNldFF1ZXJ5UmVmKGludGVybmFsLndyYXBRdWVyeVJlZihpbnRlcm5hbFF1ZXJ5UmVmKSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH0sIFtpbnRlcm5hbFF1ZXJ5UmVmXSk7XG4gICAgdmFyIHJlZmV0Y2ggPSBSZWFjdF9fbmFtZXNwYWNlLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIGlmICghaW50ZXJuYWxRdWVyeVJlZikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHF1ZXJ5IGhhcyBub3QgYmVlbiBsb2FkZWQuIFBsZWFzZSBsb2FkIHRoZSBxdWVyeS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByb21pc2UgPSBpbnRlcm5hbFF1ZXJ5UmVmLnJlZmV0Y2gob3B0aW9ucyk7XG4gICAgICAgIHNldFF1ZXJ5UmVmKGludGVybmFsLndyYXBRdWVyeVJlZihpbnRlcm5hbFF1ZXJ5UmVmKSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH0sIFtpbnRlcm5hbFF1ZXJ5UmVmXSk7XG4gICAgdmFyIGxvYWRRdWVyeSA9IFJlYWN0X19uYW1lc3BhY2UudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGdsb2JhbHMuaW52YXJpYW50KCFjYWxsZWREdXJpbmdSZW5kZXIoKSwgNTApO1xuICAgICAgICB2YXIgdmFyaWFibGVzID0gYXJnc1swXTtcbiAgICAgICAgdmFyIGNhY2hlS2V5ID0gdHNsaWIuX19zcHJlYWRBcnJheShbXG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIGNhY2hlLmNhbm9uaWNhbFN0cmluZ2lmeSh2YXJpYWJsZXMpXG4gICAgICAgIF0sIFtdLmNvbmNhdChxdWVyeUtleSksIHRydWUpO1xuICAgICAgICB2YXIgcXVlcnlSZWYgPSBzdXNwZW5zZUNhY2hlLmdldFF1ZXJ5UmVmKGNhY2hlS2V5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50LndhdGNoUXVlcnkodHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIHdhdGNoUXVlcnlPcHRpb25zKSwgeyB2YXJpYWJsZXM6IHZhcmlhYmxlcyB9KSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRRdWVyeVJlZihpbnRlcm5hbC53cmFwUXVlcnlSZWYocXVlcnlSZWYpKTtcbiAgICB9LCBbcXVlcnksIHF1ZXJ5S2V5LCBzdXNwZW5zZUNhY2hlLCB3YXRjaFF1ZXJ5T3B0aW9ucywgY2FsbGVkRHVyaW5nUmVuZGVyXSk7XG4gICAgdmFyIHJlc2V0ID0gUmVhY3RfX25hbWVzcGFjZS51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldFF1ZXJ5UmVmKG51bGwpO1xuICAgIH0sIFtxdWVyeVJlZl0pO1xuICAgIHJldHVybiBbbG9hZFF1ZXJ5LCBxdWVyeVJlZiwgeyBmZXRjaE1vcmU6IGZldGNoTW9yZSwgcmVmZXRjaDogcmVmZXRjaCwgcmVzZXQ6IHJlc2V0IH1dO1xufVxuXG5mdW5jdGlvbiB1c2VRdWVyeVJlZkhhbmRsZXJzKHF1ZXJ5UmVmKSB7XG4gICAgdmFyIF9hID0gUmVhY3RfX25hbWVzcGFjZS51c2VTdGF0ZShxdWVyeVJlZiksIHByZXZpb3VzUXVlcnlSZWYgPSBfYVswXSwgc2V0UHJldmlvdXNRdWVyeVJlZiA9IF9hWzFdO1xuICAgIHZhciBfYiA9IFJlYWN0X19uYW1lc3BhY2UudXNlU3RhdGUocXVlcnlSZWYpLCB3cmFwcGVkUXVlcnlSZWYgPSBfYlswXSwgc2V0V3JhcHBlZFF1ZXJ5UmVmID0gX2JbMV07XG4gICAgdmFyIGludGVybmFsUXVlcnlSZWYgPSBpbnRlcm5hbC51bndyYXBRdWVyeVJlZihxdWVyeVJlZik7XG4gICAgaWYgKHByZXZpb3VzUXVlcnlSZWYgIT09IHF1ZXJ5UmVmKSB7XG4gICAgICAgIHNldFByZXZpb3VzUXVlcnlSZWYocXVlcnlSZWYpO1xuICAgICAgICBzZXRXcmFwcGVkUXVlcnlSZWYocXVlcnlSZWYpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaW50ZXJuYWwudXBkYXRlV3JhcHBlZFF1ZXJ5UmVmKHF1ZXJ5UmVmLCBpbnRlcm5hbC5nZXRXcmFwcGVkUHJvbWlzZSh3cmFwcGVkUXVlcnlSZWYpKTtcbiAgICB9XG4gICAgdmFyIHJlZmV0Y2ggPSBSZWFjdF9fbmFtZXNwYWNlLnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh2YXJpYWJsZXMpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSBpbnRlcm5hbFF1ZXJ5UmVmLnJlZmV0Y2godmFyaWFibGVzKTtcbiAgICAgICAgc2V0V3JhcHBlZFF1ZXJ5UmVmKGludGVybmFsLndyYXBRdWVyeVJlZihpbnRlcm5hbFF1ZXJ5UmVmKSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH0sIFtpbnRlcm5hbFF1ZXJ5UmVmXSk7XG4gICAgdmFyIGZldGNoTW9yZSA9IFJlYWN0X19uYW1lc3BhY2UudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSBpbnRlcm5hbFF1ZXJ5UmVmLmZldGNoTW9yZShvcHRpb25zKTtcbiAgICAgICAgc2V0V3JhcHBlZFF1ZXJ5UmVmKGludGVybmFsLndyYXBRdWVyeVJlZihpbnRlcm5hbFF1ZXJ5UmVmKSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH0sIFtpbnRlcm5hbFF1ZXJ5UmVmXSk7XG4gICAgcmV0dXJuIHsgcmVmZXRjaDogcmVmZXRjaCwgZmV0Y2hNb3JlOiBmZXRjaE1vcmUgfTtcbn1cblxuZnVuY3Rpb24gdXNlUmVhZFF1ZXJ5KHF1ZXJ5UmVmKSB7XG4gICAgdmFyIGludGVybmFsUXVlcnlSZWYgPSBSZWFjdF9fbmFtZXNwYWNlLnVzZU1lbW8oZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWwudW53cmFwUXVlcnlSZWYocXVlcnlSZWYpOyB9LCBbcXVlcnlSZWZdKTtcbiAgICB2YXIgZ2V0UHJvbWlzZSA9IFJlYWN0X19uYW1lc3BhY2UudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWwuZ2V0V3JhcHBlZFByb21pc2UocXVlcnlSZWYpOyB9LCBbcXVlcnlSZWZdKTtcbiAgICBpZiAoaW50ZXJuYWxRdWVyeVJlZi5kaXNwb3NlZCkge1xuICAgICAgICBpbnRlcm5hbFF1ZXJ5UmVmLnJlaW5pdGlhbGl6ZSgpO1xuICAgICAgICBpbnRlcm5hbC51cGRhdGVXcmFwcGVkUXVlcnlSZWYocXVlcnlSZWYsIGludGVybmFsUXVlcnlSZWYucHJvbWlzZSk7XG4gICAgfVxuICAgIFJlYWN0X19uYW1lc3BhY2UudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsUXVlcnlSZWYucmV0YWluKCk7IH0sIFtpbnRlcm5hbFF1ZXJ5UmVmXSk7XG4gICAgdmFyIHByb21pc2UgPSB1c2VTeW5jRXh0ZXJuYWxTdG9yZShSZWFjdF9fbmFtZXNwYWNlLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChmb3JjZVVwZGF0ZSkge1xuICAgICAgICByZXR1cm4gaW50ZXJuYWxRdWVyeVJlZi5saXN0ZW4oZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgICAgIGludGVybmFsLnVwZGF0ZVdyYXBwZWRRdWVyeVJlZihxdWVyeVJlZiwgcHJvbWlzZSk7XG4gICAgICAgICAgICBmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICB9LCBbaW50ZXJuYWxRdWVyeVJlZl0pLCBnZXRQcm9taXNlLCBnZXRQcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0ID0gX191c2UocHJvbWlzZSk7XG4gICAgcmV0dXJuIFJlYWN0X19uYW1lc3BhY2UudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgICAgICAgIG5ldHdvcmtTdGF0dXM6IHJlc3VsdC5uZXR3b3JrU3RhdHVzLFxuICAgICAgICAgICAgZXJyb3I6IHRvQXBvbGxvRXJyb3IocmVzdWx0KSxcbiAgICAgICAgfTtcbiAgICB9LCBbcmVzdWx0XSk7XG59XG5cbmV4cG9ydHMuc2tpcFRva2VuID0gc2tpcFRva2VuO1xuZXhwb3J0cy51c2VBcG9sbG9DbGllbnQgPSB1c2VBcG9sbG9DbGllbnQ7XG5leHBvcnRzLnVzZUJhY2tncm91bmRRdWVyeSA9IHVzZUJhY2tncm91bmRRdWVyeTtcbmV4cG9ydHMudXNlRnJhZ21lbnQgPSB1c2VGcmFnbWVudDtcbmV4cG9ydHMudXNlTGF6eVF1ZXJ5ID0gdXNlTGF6eVF1ZXJ5O1xuZXhwb3J0cy51c2VMb2FkYWJsZVF1ZXJ5ID0gdXNlTG9hZGFibGVRdWVyeTtcbmV4cG9ydHMudXNlTXV0YXRpb24gPSB1c2VNdXRhdGlvbjtcbmV4cG9ydHMudXNlUXVlcnkgPSB1c2VRdWVyeTtcbmV4cG9ydHMudXNlUXVlcnlSZWZIYW5kbGVycyA9IHVzZVF1ZXJ5UmVmSGFuZGxlcnM7XG5leHBvcnRzLnVzZVJlYWN0aXZlVmFyID0gdXNlUmVhY3RpdmVWYXI7XG5leHBvcnRzLnVzZVJlYWRRdWVyeSA9IHVzZVJlYWRRdWVyeTtcbmV4cG9ydHMudXNlU3Vic2NyaXB0aW9uID0gdXNlU3Vic2NyaXB0aW9uO1xuZXhwb3J0cy51c2VTdXNwZW5zZVF1ZXJ5ID0gdXNlU3VzcGVuc2VRdWVyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhvb2tzLmNqcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/hooks.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/internal/internal.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/react/internal/internal.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar trie = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/bundle.cjs\");\nvar utilities = __webpack_require__(/*! ../../utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs\");\nvar tslib = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nvar equality = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/bundle.cjs\");\n\nvar QUERY_REFERENCE_SYMBOL = Symbol();\nvar PROMISE_SYMBOL = Symbol();\nfunction wrapQueryRef(internalQueryRef) {\n    var _a;\n    var ref = (_a = {\n            toPromise: function () {\n                return getWrappedPromise(ref).then(function () { return ref; });\n            }\n        },\n        _a[QUERY_REFERENCE_SYMBOL] = internalQueryRef,\n        _a[PROMISE_SYMBOL] = internalQueryRef.promise,\n        _a);\n    return ref;\n}\nfunction getWrappedPromise(queryRef) {\n    var internalQueryRef = unwrapQueryRef(queryRef);\n    return internalQueryRef.promise.status === \"fulfilled\" ?\n        internalQueryRef.promise\n        : queryRef[PROMISE_SYMBOL];\n}\nfunction unwrapQueryRef(queryRef) {\n    return queryRef[QUERY_REFERENCE_SYMBOL];\n}\nfunction updateWrappedQueryRef(queryRef, promise) {\n    queryRef[PROMISE_SYMBOL] = promise;\n}\nvar OBSERVED_CHANGED_OPTIONS = [\n    \"canonizeResults\",\n    \"context\",\n    \"errorPolicy\",\n    \"fetchPolicy\",\n    \"refetchWritePolicy\",\n    \"returnPartialData\",\n];\nvar InternalQueryReference =  (function () {\n    function InternalQueryReference(observable, options) {\n        var _this = this;\n        this.key = {};\n        this.listeners = new Set();\n        this.references = 0;\n        this.handleNext = this.handleNext.bind(this);\n        this.handleError = this.handleError.bind(this);\n        this.dispose = this.dispose.bind(this);\n        this.observable = observable;\n        if (options.onDispose) {\n            this.onDispose = options.onDispose;\n        }\n        this.setResult();\n        this.subscribeToQuery();\n        var startDisposeTimer = function () {\n            var _a;\n            if (!_this.references) {\n                _this.autoDisposeTimeoutId = setTimeout(_this.dispose, (_a = options.autoDisposeTimeoutMs) !== null && _a !== void 0 ? _a : 30000);\n            }\n        };\n        this.promise.then(startDisposeTimer, startDisposeTimer);\n    }\n    Object.defineProperty(InternalQueryReference.prototype, \"disposed\", {\n        get: function () {\n            return this.subscription.closed;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(InternalQueryReference.prototype, \"watchQueryOptions\", {\n        get: function () {\n            return this.observable.options;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    InternalQueryReference.prototype.reinitialize = function () {\n        var observable = this.observable;\n        var originalFetchPolicy = this.watchQueryOptions.fetchPolicy;\n        try {\n            if (originalFetchPolicy !== \"no-cache\") {\n                observable.resetLastResults();\n                observable.silentSetOptions({ fetchPolicy: \"cache-first\" });\n            }\n            else {\n                observable.silentSetOptions({ fetchPolicy: \"standby\" });\n            }\n            this.subscribeToQuery();\n            if (originalFetchPolicy === \"no-cache\") {\n                return;\n            }\n            observable.resetDiff();\n            this.setResult();\n        }\n        finally {\n            observable.silentSetOptions({ fetchPolicy: originalFetchPolicy });\n        }\n    };\n    InternalQueryReference.prototype.retain = function () {\n        var _this = this;\n        this.references++;\n        clearTimeout(this.autoDisposeTimeoutId);\n        var disposed = false;\n        return function () {\n            if (disposed) {\n                return;\n            }\n            disposed = true;\n            _this.references--;\n            setTimeout(function () {\n                if (!_this.references) {\n                    _this.dispose();\n                }\n            });\n        };\n    };\n    InternalQueryReference.prototype.didChangeOptions = function (watchQueryOptions) {\n        var _this = this;\n        return OBSERVED_CHANGED_OPTIONS.some(function (option) {\n            return !equality.equal(_this.watchQueryOptions[option], watchQueryOptions[option]);\n        });\n    };\n    InternalQueryReference.prototype.applyOptions = function (watchQueryOptions) {\n        var _a = this.watchQueryOptions, currentFetchPolicy = _a.fetchPolicy, currentCanonizeResults = _a.canonizeResults;\n        if (currentFetchPolicy === \"standby\" &&\n            currentFetchPolicy !== watchQueryOptions.fetchPolicy) {\n            this.initiateFetch(this.observable.reobserve(watchQueryOptions));\n        }\n        else {\n            this.observable.silentSetOptions(watchQueryOptions);\n            if (currentCanonizeResults !== watchQueryOptions.canonizeResults) {\n                this.result = tslib.__assign(tslib.__assign({}, this.result), this.observable.getCurrentResult());\n                this.promise = utilities.createFulfilledPromise(this.result);\n            }\n        }\n        return this.promise;\n    };\n    InternalQueryReference.prototype.listen = function (listener) {\n        var _this = this;\n        this.listeners.add(listener);\n        return function () {\n            _this.listeners.delete(listener);\n        };\n    };\n    InternalQueryReference.prototype.refetch = function (variables) {\n        return this.initiateFetch(this.observable.refetch(variables));\n    };\n    InternalQueryReference.prototype.fetchMore = function (options) {\n        return this.initiateFetch(this.observable.fetchMore(options));\n    };\n    InternalQueryReference.prototype.dispose = function () {\n        this.subscription.unsubscribe();\n        this.onDispose();\n    };\n    InternalQueryReference.prototype.onDispose = function () {\n    };\n    InternalQueryReference.prototype.handleNext = function (result) {\n        var _a;\n        switch (this.promise.status) {\n            case \"pending\": {\n                if (result.data === void 0) {\n                    result.data = this.result.data;\n                }\n                this.result = result;\n                (_a = this.resolve) === null || _a === void 0 ? void 0 : _a.call(this, result);\n                break;\n            }\n            default: {\n                if (result.data === this.result.data &&\n                    result.networkStatus === this.result.networkStatus) {\n                    return;\n                }\n                if (result.data === void 0) {\n                    result.data = this.result.data;\n                }\n                this.result = result;\n                this.promise = utilities.createFulfilledPromise(result);\n                this.deliver(this.promise);\n                break;\n            }\n        }\n    };\n    InternalQueryReference.prototype.handleError = function (error) {\n        var _a;\n        this.subscription.unsubscribe();\n        this.subscription = this.observable.resubscribeAfterError(this.handleNext, this.handleError);\n        switch (this.promise.status) {\n            case \"pending\": {\n                (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, error);\n                break;\n            }\n            default: {\n                this.promise = utilities.createRejectedPromise(error);\n                this.deliver(this.promise);\n            }\n        }\n    };\n    InternalQueryReference.prototype.deliver = function (promise) {\n        this.listeners.forEach(function (listener) { return listener(promise); });\n    };\n    InternalQueryReference.prototype.initiateFetch = function (returnedPromise) {\n        var _this = this;\n        this.promise = this.createPendingPromise();\n        this.promise.catch(function () { });\n        returnedPromise\n            .then(function (result) {\n            var _a;\n            if (_this.promise.status === \"pending\") {\n                _this.result = result;\n                (_a = _this.resolve) === null || _a === void 0 ? void 0 : _a.call(_this, result);\n            }\n        })\n            .catch(function () { });\n        return returnedPromise;\n    };\n    InternalQueryReference.prototype.subscribeToQuery = function () {\n        var _this = this;\n        this.subscription = this.observable\n            .filter(function (result) { return !equality.equal(result.data, {}) && !equality.equal(result, _this.result); })\n            .subscribe(this.handleNext, this.handleError);\n    };\n    InternalQueryReference.prototype.setResult = function () {\n        var result = this.observable.getCurrentResult(false);\n        if (equality.equal(result, this.result)) {\n            return;\n        }\n        this.result = result;\n        this.promise =\n            (result.data &&\n                (!result.partial || this.watchQueryOptions.returnPartialData)) ?\n                utilities.createFulfilledPromise(result)\n                : this.createPendingPromise();\n    };\n    InternalQueryReference.prototype.createPendingPromise = function () {\n        var _this = this;\n        return utilities.wrapPromiseWithState(new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        }));\n    };\n    return InternalQueryReference;\n}());\n\nvar SuspenseCache =  (function () {\n    function SuspenseCache(options) {\n        if (options === void 0) { options = Object.create(null); }\n        this.queryRefs = new trie.Trie(utilities.canUseWeakMap);\n        this.options = options;\n    }\n    SuspenseCache.prototype.getQueryRef = function (cacheKey, createObservable) {\n        var ref = this.queryRefs.lookupArray(cacheKey);\n        if (!ref.current) {\n            ref.current = new InternalQueryReference(createObservable(), {\n                autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n                onDispose: function () {\n                    delete ref.current;\n                },\n            });\n        }\n        return ref.current;\n    };\n    return SuspenseCache;\n}());\n\nvar suspenseCacheSymbol = Symbol.for(\"apollo.suspenseCache\");\nfunction getSuspenseCache(client) {\n    var _a;\n    if (!client[suspenseCacheSymbol]) {\n        client[suspenseCacheSymbol] = new SuspenseCache((_a = client.defaultOptions.react) === null || _a === void 0 ? void 0 : _a.suspense);\n    }\n    return client[suspenseCacheSymbol];\n}\n\nexports.InternalQueryReference = InternalQueryReference;\nexports.getSuspenseCache = getSuspenseCache;\nexports.getWrappedPromise = getWrappedPromise;\nexports.unwrapQueryRef = unwrapQueryRef;\nexports.updateWrappedQueryRef = updateWrappedQueryRef;\nexports.wrapQueryRef = wrapQueryRef;\n//# sourceMappingURL=internal.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/internal/internal.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/parser/parser.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/react/parser/parser.cjs ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar globals = __webpack_require__(/*! ../../utilities/globals */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/globals.cjs\");\nvar utilities = __webpack_require__(/*! ../../utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs\");\n__webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\nvar globalCaches = {};\nfunction registerGlobalCache(name, getSize) {\n    globalCaches[name] = getSize;\n}\n\nexports.DocumentType = void 0;\n(function (DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(exports.DocumentType || (exports.DocumentType = {}));\nvar cache;\nfunction operationName(type) {\n    var name;\n    switch (type) {\n        case exports.DocumentType.Query:\n            name = \"Query\";\n            break;\n        case exports.DocumentType.Mutation:\n            name = \"Mutation\";\n            break;\n        case exports.DocumentType.Subscription:\n            name = \"Subscription\";\n            break;\n    }\n    return name;\n}\nfunction parser(document) {\n    if (!cache) {\n        cache = new utilities.AutoCleanedWeakCache(utilities.cacheSizes.parser || 1000 );\n    }\n    var cached = cache.get(document);\n    if (cached)\n        return cached;\n    var variables, type, name;\n    globals.invariant(!!document && !!document.kind, 59, document);\n    var fragments = [];\n    var queries = [];\n    var mutations = [];\n    var subscriptions = [];\n    for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n        var x = _a[_i];\n        if (x.kind === \"FragmentDefinition\") {\n            fragments.push(x);\n            continue;\n        }\n        if (x.kind === \"OperationDefinition\") {\n            switch (x.operation) {\n                case \"query\":\n                    queries.push(x);\n                    break;\n                case \"mutation\":\n                    mutations.push(x);\n                    break;\n                case \"subscription\":\n                    subscriptions.push(x);\n                    break;\n            }\n        }\n    }\n    globals.invariant(!fragments.length ||\n        queries.length ||\n        mutations.length ||\n        subscriptions.length, 60);\n    globals.invariant(\n        queries.length + mutations.length + subscriptions.length <= 1,\n        61,\n        document,\n        queries.length,\n        subscriptions.length,\n        mutations.length\n    );\n    type = queries.length ? exports.DocumentType.Query : exports.DocumentType.Mutation;\n    if (!queries.length && !mutations.length)\n        type = exports.DocumentType.Subscription;\n    var definitions = queries.length ? queries\n        : mutations.length ? mutations\n            : subscriptions;\n    globals.invariant(definitions.length === 1, 62, document, definitions.length);\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === \"Name\") {\n        name = definition.name.value;\n    }\n    else {\n        name = \"data\";\n    }\n    var payload = { name: name, type: type, variables: variables };\n    cache.set(document, payload);\n    return payload;\n}\nparser.resetCache = function () {\n    cache = undefined;\n};\nif (globalThis.__DEV__ !== false) {\n    registerGlobalCache(\"parser\", function () { return (cache ? cache.size : 0); });\n}\nfunction verifyDocumentType(document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    globals.invariant(\n        operation.type === type,\n        63,\n        requiredOperationName,\n        requiredOperationName,\n        usedOperationName\n    );\n}\n\nexports.operationName = operationName;\nexports.parser = parser;\nexports.verifyDocumentType = verifyDocumentType;\n//# sourceMappingURL=parser.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvcGFyc2VyL3BhcnNlci5janMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxjQUFjLG1CQUFPLENBQUMsa0dBQXlCO0FBQy9DLGdCQUFnQixtQkFBTyxDQUFDLG9GQUFpQjtBQUN6QyxtQkFBTyxDQUFDLHVEQUFPOztBQUVmO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMkJBQTJCLG9CQUFvQixLQUFLO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsZ0JBQWdCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGtDQUFrQztBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckIsY0FBYztBQUNkLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2F6dXJvLWJldHRpbmctYXBwLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3JlYWN0L3BhcnNlci9wYXJzZXIuY2pzPzJmMGMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgZ2xvYmFscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy9nbG9iYWxzJyk7XG52YXIgdXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzJyk7XG5yZXF1aXJlKCd0c2xpYicpO1xuXG52YXIgZ2xvYmFsQ2FjaGVzID0ge307XG5mdW5jdGlvbiByZWdpc3Rlckdsb2JhbENhY2hlKG5hbWUsIGdldFNpemUpIHtcbiAgICBnbG9iYWxDYWNoZXNbbmFtZV0gPSBnZXRTaXplO1xufVxuXG5leHBvcnRzLkRvY3VtZW50VHlwZSA9IHZvaWQgMDtcbihmdW5jdGlvbiAoRG9jdW1lbnRUeXBlKSB7XG4gICAgRG9jdW1lbnRUeXBlW0RvY3VtZW50VHlwZVtcIlF1ZXJ5XCJdID0gMF0gPSBcIlF1ZXJ5XCI7XG4gICAgRG9jdW1lbnRUeXBlW0RvY3VtZW50VHlwZVtcIk11dGF0aW9uXCJdID0gMV0gPSBcIk11dGF0aW9uXCI7XG4gICAgRG9jdW1lbnRUeXBlW0RvY3VtZW50VHlwZVtcIlN1YnNjcmlwdGlvblwiXSA9IDJdID0gXCJTdWJzY3JpcHRpb25cIjtcbn0pKGV4cG9ydHMuRG9jdW1lbnRUeXBlIHx8IChleHBvcnRzLkRvY3VtZW50VHlwZSA9IHt9KSk7XG52YXIgY2FjaGU7XG5mdW5jdGlvbiBvcGVyYXRpb25OYW1lKHR5cGUpIHtcbiAgICB2YXIgbmFtZTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBleHBvcnRzLkRvY3VtZW50VHlwZS5RdWVyeTpcbiAgICAgICAgICAgIG5hbWUgPSBcIlF1ZXJ5XCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBleHBvcnRzLkRvY3VtZW50VHlwZS5NdXRhdGlvbjpcbiAgICAgICAgICAgIG5hbWUgPSBcIk11dGF0aW9uXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBleHBvcnRzLkRvY3VtZW50VHlwZS5TdWJzY3JpcHRpb246XG4gICAgICAgICAgICBuYW1lID0gXCJTdWJzY3JpcHRpb25cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbn1cbmZ1bmN0aW9uIHBhcnNlcihkb2N1bWVudCkge1xuICAgIGlmICghY2FjaGUpIHtcbiAgICAgICAgY2FjaGUgPSBuZXcgdXRpbGl0aWVzLkF1dG9DbGVhbmVkV2Vha0NhY2hlKHV0aWxpdGllcy5jYWNoZVNpemVzLnBhcnNlciB8fCAxMDAwICk7XG4gICAgfVxuICAgIHZhciBjYWNoZWQgPSBjYWNoZS5nZXQoZG9jdW1lbnQpO1xuICAgIGlmIChjYWNoZWQpXG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgdmFyIHZhcmlhYmxlcywgdHlwZSwgbmFtZTtcbiAgICBnbG9iYWxzLmludmFyaWFudCghIWRvY3VtZW50ICYmICEhZG9jdW1lbnQua2luZCwgNTksIGRvY3VtZW50KTtcbiAgICB2YXIgZnJhZ21lbnRzID0gW107XG4gICAgdmFyIHF1ZXJpZXMgPSBbXTtcbiAgICB2YXIgbXV0YXRpb25zID0gW107XG4gICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gZG9jdW1lbnQuZGVmaW5pdGlvbnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciB4ID0gX2FbX2ldO1xuICAgICAgICBpZiAoeC5raW5kID09PSBcIkZyYWdtZW50RGVmaW5pdGlvblwiKSB7XG4gICAgICAgICAgICBmcmFnbWVudHMucHVzaCh4KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh4LmtpbmQgPT09IFwiT3BlcmF0aW9uRGVmaW5pdGlvblwiKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHgub3BlcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInF1ZXJ5XCI6XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJpZXMucHVzaCh4KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm11dGF0aW9uXCI6XG4gICAgICAgICAgICAgICAgICAgIG11dGF0aW9ucy5wdXNoKHgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwic3Vic2NyaXB0aW9uXCI6XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaCh4KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2xvYmFscy5pbnZhcmlhbnQoIWZyYWdtZW50cy5sZW5ndGggfHxcbiAgICAgICAgcXVlcmllcy5sZW5ndGggfHxcbiAgICAgICAgbXV0YXRpb25zLmxlbmd0aCB8fFxuICAgICAgICBzdWJzY3JpcHRpb25zLmxlbmd0aCwgNjApO1xuICAgIGdsb2JhbHMuaW52YXJpYW50KFxuICAgICAgICBxdWVyaWVzLmxlbmd0aCArIG11dGF0aW9ucy5sZW5ndGggKyBzdWJzY3JpcHRpb25zLmxlbmd0aCA8PSAxLFxuICAgICAgICA2MSxcbiAgICAgICAgZG9jdW1lbnQsXG4gICAgICAgIHF1ZXJpZXMubGVuZ3RoLFxuICAgICAgICBzdWJzY3JpcHRpb25zLmxlbmd0aCxcbiAgICAgICAgbXV0YXRpb25zLmxlbmd0aFxuICAgICk7XG4gICAgdHlwZSA9IHF1ZXJpZXMubGVuZ3RoID8gZXhwb3J0cy5Eb2N1bWVudFR5cGUuUXVlcnkgOiBleHBvcnRzLkRvY3VtZW50VHlwZS5NdXRhdGlvbjtcbiAgICBpZiAoIXF1ZXJpZXMubGVuZ3RoICYmICFtdXRhdGlvbnMubGVuZ3RoKVxuICAgICAgICB0eXBlID0gZXhwb3J0cy5Eb2N1bWVudFR5cGUuU3Vic2NyaXB0aW9uO1xuICAgIHZhciBkZWZpbml0aW9ucyA9IHF1ZXJpZXMubGVuZ3RoID8gcXVlcmllc1xuICAgICAgICA6IG11dGF0aW9ucy5sZW5ndGggPyBtdXRhdGlvbnNcbiAgICAgICAgICAgIDogc3Vic2NyaXB0aW9ucztcbiAgICBnbG9iYWxzLmludmFyaWFudChkZWZpbml0aW9ucy5sZW5ndGggPT09IDEsIDYyLCBkb2N1bWVudCwgZGVmaW5pdGlvbnMubGVuZ3RoKTtcbiAgICB2YXIgZGVmaW5pdGlvbiA9IGRlZmluaXRpb25zWzBdO1xuICAgIHZhcmlhYmxlcyA9IGRlZmluaXRpb24udmFyaWFibGVEZWZpbml0aW9ucyB8fCBbXTtcbiAgICBpZiAoZGVmaW5pdGlvbi5uYW1lICYmIGRlZmluaXRpb24ubmFtZS5raW5kID09PSBcIk5hbWVcIikge1xuICAgICAgICBuYW1lID0gZGVmaW5pdGlvbi5uYW1lLnZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbmFtZSA9IFwiZGF0YVwiO1xuICAgIH1cbiAgICB2YXIgcGF5bG9hZCA9IHsgbmFtZTogbmFtZSwgdHlwZTogdHlwZSwgdmFyaWFibGVzOiB2YXJpYWJsZXMgfTtcbiAgICBjYWNoZS5zZXQoZG9jdW1lbnQsIHBheWxvYWQpO1xuICAgIHJldHVybiBwYXlsb2FkO1xufVxucGFyc2VyLnJlc2V0Q2FjaGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2FjaGUgPSB1bmRlZmluZWQ7XG59O1xuaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpIHtcbiAgICByZWdpc3Rlckdsb2JhbENhY2hlKFwicGFyc2VyXCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIChjYWNoZSA/IGNhY2hlLnNpemUgOiAwKTsgfSk7XG59XG5mdW5jdGlvbiB2ZXJpZnlEb2N1bWVudFR5cGUoZG9jdW1lbnQsIHR5cGUpIHtcbiAgICB2YXIgb3BlcmF0aW9uID0gcGFyc2VyKGRvY3VtZW50KTtcbiAgICB2YXIgcmVxdWlyZWRPcGVyYXRpb25OYW1lID0gb3BlcmF0aW9uTmFtZSh0eXBlKTtcbiAgICB2YXIgdXNlZE9wZXJhdGlvbk5hbWUgPSBvcGVyYXRpb25OYW1lKG9wZXJhdGlvbi50eXBlKTtcbiAgICBnbG9iYWxzLmludmFyaWFudChcbiAgICAgICAgb3BlcmF0aW9uLnR5cGUgPT09IHR5cGUsXG4gICAgICAgIDYzLFxuICAgICAgICByZXF1aXJlZE9wZXJhdGlvbk5hbWUsXG4gICAgICAgIHJlcXVpcmVkT3BlcmF0aW9uTmFtZSxcbiAgICAgICAgdXNlZE9wZXJhdGlvbk5hbWVcbiAgICApO1xufVxuXG5leHBvcnRzLm9wZXJhdGlvbk5hbWUgPSBvcGVyYXRpb25OYW1lO1xuZXhwb3J0cy5wYXJzZXIgPSBwYXJzZXI7XG5leHBvcnRzLnZlcmlmeURvY3VtZW50VHlwZSA9IHZlcmlmeURvY3VtZW50VHlwZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlci5janMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/parser/parser.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/react.cjs":
/*!*****************************************************!*\
  !*** ./node_modules/@apollo/client/react/react.cjs ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n__webpack_require__(/*! ../utilities/globals */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/globals.cjs\");\nvar context = __webpack_require__(/*! ./context */ \"(ssr)/./node_modules/@apollo/client/react/context/context.cjs\");\nvar hooks = __webpack_require__(/*! ./hooks */ \"(ssr)/./node_modules/@apollo/client/react/hooks/hooks.cjs\");\nvar parser = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/@apollo/client/react/parser/parser.cjs\");\nvar tslib = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nvar internal = __webpack_require__(/*! ./internal */ \"(ssr)/./node_modules/@apollo/client/react/internal/internal.cjs\");\n\nfunction createQueryPreloader(client) {\n    return function preloadQuery(query, options) {\n        var _a, _b;\n        if (options === void 0) { options = Object.create(null); }\n        var queryRef = new internal.InternalQueryReference(client.watchQuery(tslib.__assign(tslib.__assign({}, options), { query: query })), {\n            autoDisposeTimeoutMs: (_b = (_a = client.defaultOptions.react) === null || _a === void 0 ? void 0 : _a.suspense) === null || _b === void 0 ? void 0 : _b.autoDisposeTimeoutMs,\n        });\n        return internal.wrapQueryRef(queryRef);\n    };\n}\n\nexports.ApolloConsumer = context.ApolloConsumer;\nexports.ApolloProvider = context.ApolloProvider;\nexports.getApolloContext = context.getApolloContext;\nexports.resetApolloContext = context.resetApolloContext;\nexports.DocumentType = parser.DocumentType;\nexports.operationName = parser.operationName;\nexports.parser = parser.parser;\nexports.createQueryPreloader = createQueryPreloader;\nfor (var k in hooks) {\n    if (k !== 'default' && !exports.hasOwnProperty(k)) exports[k] = hooks[k];\n}\n//# sourceMappingURL=react.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvcmVhY3QuY2pzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsbUJBQU8sQ0FBQywrRkFBc0I7QUFDOUIsY0FBYyxtQkFBTyxDQUFDLGdGQUFXO0FBQ2pDLFlBQVksbUJBQU8sQ0FBQywwRUFBUztBQUM3QixhQUFhLG1CQUFPLENBQUMsNkVBQVU7QUFDL0IsWUFBWSxtQkFBTyxDQUFDLHVEQUFPO0FBQzNCLGVBQWUsbUJBQU8sQ0FBQyxtRkFBWTs7QUFFbkM7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLDZHQUE2RyxjQUFjLGNBQWM7QUFDekk7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEIsd0JBQXdCO0FBQ3hCLDBCQUEwQjtBQUMxQixvQkFBb0I7QUFDcEIscUJBQXFCO0FBQ3JCLGNBQWM7QUFDZCw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9henVyby1iZXR0aW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9yZWFjdC5janM/ZmU3NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnJlcXVpcmUoJy4uL3V0aWxpdGllcy9nbG9iYWxzJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vY29udGV4dCcpO1xudmFyIGhvb2tzID0gcmVxdWlyZSgnLi9ob29rcycpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2VyJyk7XG52YXIgdHNsaWIgPSByZXF1aXJlKCd0c2xpYicpO1xudmFyIGludGVybmFsID0gcmVxdWlyZSgnLi9pbnRlcm5hbCcpO1xuXG5mdW5jdGlvbiBjcmVhdGVRdWVyeVByZWxvYWRlcihjbGllbnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcHJlbG9hZFF1ZXJ5KHF1ZXJ5LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7IH1cbiAgICAgICAgdmFyIHF1ZXJ5UmVmID0gbmV3IGludGVybmFsLkludGVybmFsUXVlcnlSZWZlcmVuY2UoY2xpZW50LndhdGNoUXVlcnkodHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IHF1ZXJ5OiBxdWVyeSB9KSksIHtcbiAgICAgICAgICAgIGF1dG9EaXNwb3NlVGltZW91dE1zOiAoX2IgPSAoX2EgPSBjbGllbnQuZGVmYXVsdE9wdGlvbnMucmVhY3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdXNwZW5zZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmF1dG9EaXNwb3NlVGltZW91dE1zLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGludGVybmFsLndyYXBRdWVyeVJlZihxdWVyeVJlZik7XG4gICAgfTtcbn1cblxuZXhwb3J0cy5BcG9sbG9Db25zdW1lciA9IGNvbnRleHQuQXBvbGxvQ29uc3VtZXI7XG5leHBvcnRzLkFwb2xsb1Byb3ZpZGVyID0gY29udGV4dC5BcG9sbG9Qcm92aWRlcjtcbmV4cG9ydHMuZ2V0QXBvbGxvQ29udGV4dCA9IGNvbnRleHQuZ2V0QXBvbGxvQ29udGV4dDtcbmV4cG9ydHMucmVzZXRBcG9sbG9Db250ZXh0ID0gY29udGV4dC5yZXNldEFwb2xsb0NvbnRleHQ7XG5leHBvcnRzLkRvY3VtZW50VHlwZSA9IHBhcnNlci5Eb2N1bWVudFR5cGU7XG5leHBvcnRzLm9wZXJhdGlvbk5hbWUgPSBwYXJzZXIub3BlcmF0aW9uTmFtZTtcbmV4cG9ydHMucGFyc2VyID0gcGFyc2VyLnBhcnNlcjtcbmV4cG9ydHMuY3JlYXRlUXVlcnlQcmVsb2FkZXIgPSBjcmVhdGVRdWVyeVByZWxvYWRlcjtcbmZvciAodmFyIGsgaW4gaG9va3MpIHtcbiAgICBpZiAoayAhPT0gJ2RlZmF1bHQnICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KGspKSBleHBvcnRzW2tdID0gaG9va3Nba107XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC5janMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/react.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/globals.cjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/globals.cjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar tsInvariant = __webpack_require__(/*! ts-invariant */ \"(ssr)/./node_modules/ts-invariant/lib/invariant.cjs\");\n\nvar version = \"3.9.2\";\n\nfunction maybe(thunk) {\n    try {\n        return thunk();\n    }\n    catch (_a) { }\n}\n\nvar global$1 = (maybe(function () { return globalThis; }) ||\n    maybe(function () { return window; }) ||\n    maybe(function () { return self; }) ||\n    maybe(function () { return global; }) ||\nmaybe(function () {\n    return maybe.constructor(\"return this\")();\n}));\n\nvar prefixCounts = new Map();\nfunction makeUniqueId(prefix) {\n    var count = prefixCounts.get(prefix) || 1;\n    prefixCounts.set(prefix, count + 1);\n    return \"\".concat(prefix, \":\").concat(count, \":\").concat(Math.random().toString(36).slice(2));\n}\n\nfunction stringifyForDisplay(value, space) {\n    if (space === void 0) { space = 0; }\n    var undefId = makeUniqueId(\"stringifyForDisplay\");\n    return JSON.stringify(value, function (key, value) {\n        return value === void 0 ? undefId : value;\n    }, space)\n        .split(JSON.stringify(undefId))\n        .join(\"<undefined>\");\n}\n\nfunction wrap(fn) {\n    return function (message) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof message === \"number\") {\n            var arg0 = message;\n            message = getHandledErrorMsg(arg0);\n            if (!message) {\n                message = getFallbackErrorMsg(arg0, args);\n                args = [];\n            }\n        }\n        fn.apply(void 0, [message].concat(args));\n    };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    if (!condition) {\n        tsInvariant.invariant(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));\n    }\n}, {\n    debug: wrap(tsInvariant.invariant.debug),\n    log: wrap(tsInvariant.invariant.log),\n    warn: wrap(tsInvariant.invariant.warn),\n    error: wrap(tsInvariant.invariant.error),\n});\nfunction newInvariantError(message) {\n    var optionalParams = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        optionalParams[_i - 1] = arguments[_i];\n    }\n    return new tsInvariant.InvariantError(getHandledErrorMsg(message, optionalParams) ||\n        getFallbackErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + version);\nfunction stringify(arg) {\n    return typeof arg == \"string\" ? arg : (stringifyForDisplay(arg, 2).slice(0, 1000));\n}\nfunction getHandledErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) { messageArgs = []; }\n    if (!message)\n        return;\n    return (global$1[ApolloErrorMessageHandler] &&\n        global$1[ApolloErrorMessageHandler](message, messageArgs.map(stringify)));\n}\nfunction getFallbackErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) { messageArgs = []; }\n    if (!message)\n        return;\n    return \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n        version: version,\n        message: message,\n        args: messageArgs.map(stringify),\n    })));\n}\n\nvar DEV = globalThis.__DEV__ !== false;\n\nexports.InvariantError = tsInvariant.InvariantError;\nexports.DEV = DEV;\nexports.__DEV__ = DEV;\nexports.global = global$1;\nexports.invariant = invariant;\nexports.maybe = maybe;\nexports.newInvariantError = newInvariantError;\n//# sourceMappingURL=globals.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvZ2xvYmFscy5janMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBYzs7QUFFeEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DQUFvQyxvQkFBb0I7QUFDeEQsd0JBQXdCLGdCQUFnQjtBQUN4Qyx3QkFBd0IsY0FBYztBQUN0Qyx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1QkFBdUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxxQkFBcUIsdUJBQXVCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7O0FBRUEsc0JBQXNCO0FBQ3RCLFdBQVc7QUFDWCxlQUFlO0FBQ2YsY0FBYztBQUNkLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXp1cm8tYmV0dGluZy1hcHAvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvZ2xvYmFscy5janM/NTQwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciB0c0ludmFyaWFudCA9IHJlcXVpcmUoJ3RzLWludmFyaWFudCcpO1xuXG52YXIgdmVyc2lvbiA9IFwiMy45LjJcIjtcblxuZnVuY3Rpb24gbWF5YmUodGh1bmspIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdGh1bmsoKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7IH1cbn1cblxudmFyIGdsb2JhbCQxID0gKG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdsb2JhbFRoaXM7IH0pIHx8XG4gICAgbWF5YmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gd2luZG93OyB9KSB8fFxuICAgIG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGY7IH0pIHx8XG4gICAgbWF5YmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2xvYmFsOyB9KSB8fFxubWF5YmUoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtYXliZS5jb25zdHJ1Y3RvcihcInJldHVybiB0aGlzXCIpKCk7XG59KSk7XG5cbnZhciBwcmVmaXhDb3VudHMgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBtYWtlVW5pcXVlSWQocHJlZml4KSB7XG4gICAgdmFyIGNvdW50ID0gcHJlZml4Q291bnRzLmdldChwcmVmaXgpIHx8IDE7XG4gICAgcHJlZml4Q291bnRzLnNldChwcmVmaXgsIGNvdW50ICsgMSk7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHByZWZpeCwgXCI6XCIpLmNvbmNhdChjb3VudCwgXCI6XCIpLmNvbmNhdChNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUZvckRpc3BsYXkodmFsdWUsIHNwYWNlKSB7XG4gICAgaWYgKHNwYWNlID09PSB2b2lkIDApIHsgc3BhY2UgPSAwOyB9XG4gICAgdmFyIHVuZGVmSWQgPSBtYWtlVW5pcXVlSWQoXCJzdHJpbmdpZnlGb3JEaXNwbGF5XCIpO1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB2b2lkIDAgPyB1bmRlZklkIDogdmFsdWU7XG4gICAgfSwgc3BhY2UpXG4gICAgICAgIC5zcGxpdChKU09OLnN0cmluZ2lmeSh1bmRlZklkKSlcbiAgICAgICAgLmpvaW4oXCI8dW5kZWZpbmVkPlwiKTtcbn1cblxuZnVuY3Rpb24gd3JhcChmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHZhciBhcmcwID0gbWVzc2FnZTtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBnZXRIYW5kbGVkRXJyb3JNc2coYXJnMCk7XG4gICAgICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gZ2V0RmFsbGJhY2tFcnJvck1zZyhhcmcwLCBhcmdzKTtcbiAgICAgICAgICAgICAgICBhcmdzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm4uYXBwbHkodm9pZCAwLCBbbWVzc2FnZV0uY29uY2F0KGFyZ3MpKTtcbiAgICB9O1xufVxudmFyIGludmFyaWFudCA9IE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgICAgdHNJbnZhcmlhbnQuaW52YXJpYW50KGNvbmRpdGlvbiwgZ2V0SGFuZGxlZEVycm9yTXNnKG1lc3NhZ2UsIGFyZ3MpIHx8IGdldEZhbGxiYWNrRXJyb3JNc2cobWVzc2FnZSwgYXJncykpO1xuICAgIH1cbn0sIHtcbiAgICBkZWJ1Zzogd3JhcCh0c0ludmFyaWFudC5pbnZhcmlhbnQuZGVidWcpLFxuICAgIGxvZzogd3JhcCh0c0ludmFyaWFudC5pbnZhcmlhbnQubG9nKSxcbiAgICB3YXJuOiB3cmFwKHRzSW52YXJpYW50LmludmFyaWFudC53YXJuKSxcbiAgICBlcnJvcjogd3JhcCh0c0ludmFyaWFudC5pbnZhcmlhbnQuZXJyb3IpLFxufSk7XG5mdW5jdGlvbiBuZXdJbnZhcmlhbnRFcnJvcihtZXNzYWdlKSB7XG4gICAgdmFyIG9wdGlvbmFsUGFyYW1zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb3B0aW9uYWxQYXJhbXNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBuZXcgdHNJbnZhcmlhbnQuSW52YXJpYW50RXJyb3IoZ2V0SGFuZGxlZEVycm9yTXNnKG1lc3NhZ2UsIG9wdGlvbmFsUGFyYW1zKSB8fFxuICAgICAgICBnZXRGYWxsYmFja0Vycm9yTXNnKG1lc3NhZ2UsIG9wdGlvbmFsUGFyYW1zKSk7XG59XG52YXIgQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlciA9IFN5bWJvbC5mb3IoXCJBcG9sbG9FcnJvck1lc3NhZ2VIYW5kbGVyX1wiICsgdmVyc2lvbik7XG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBhcmcgPT0gXCJzdHJpbmdcIiA/IGFyZyA6IChzdHJpbmdpZnlGb3JEaXNwbGF5KGFyZywgMikuc2xpY2UoMCwgMTAwMCkpO1xufVxuZnVuY3Rpb24gZ2V0SGFuZGxlZEVycm9yTXNnKG1lc3NhZ2UsIG1lc3NhZ2VBcmdzKSB7XG4gICAgaWYgKG1lc3NhZ2VBcmdzID09PSB2b2lkIDApIHsgbWVzc2FnZUFyZ3MgPSBbXTsgfVxuICAgIGlmICghbWVzc2FnZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHJldHVybiAoZ2xvYmFsJDFbQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlcl0gJiZcbiAgICAgICAgZ2xvYmFsJDFbQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlcl0obWVzc2FnZSwgbWVzc2FnZUFyZ3MubWFwKHN0cmluZ2lmeSkpKTtcbn1cbmZ1bmN0aW9uIGdldEZhbGxiYWNrRXJyb3JNc2cobWVzc2FnZSwgbWVzc2FnZUFyZ3MpIHtcbiAgICBpZiAobWVzc2FnZUFyZ3MgPT09IHZvaWQgMCkgeyBtZXNzYWdlQXJncyA9IFtdOyB9XG4gICAgaWYgKCFtZXNzYWdlKVxuICAgICAgICByZXR1cm47XG4gICAgcmV0dXJuIFwiQW4gZXJyb3Igb2NjdXJyZWQhIEZvciBtb3JlIGRldGFpbHMsIHNlZSB0aGUgZnVsbCBlcnJvciB0ZXh0IGF0IGh0dHBzOi8vZ28uYXBvbGxvLmRldi9jL2VyciNcIi5jb25jYXQoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdmVyc2lvbjogdmVyc2lvbixcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgYXJnczogbWVzc2FnZUFyZ3MubWFwKHN0cmluZ2lmeSksXG4gICAgfSkpKTtcbn1cblxudmFyIERFViA9IGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2U7XG5cbmV4cG9ydHMuSW52YXJpYW50RXJyb3IgPSB0c0ludmFyaWFudC5JbnZhcmlhbnRFcnJvcjtcbmV4cG9ydHMuREVWID0gREVWO1xuZXhwb3J0cy5fX0RFVl9fID0gREVWO1xuZXhwb3J0cy5nbG9iYWwgPSBnbG9iYWwkMTtcbmV4cG9ydHMuaW52YXJpYW50ID0gaW52YXJpYW50O1xuZXhwb3J0cy5tYXliZSA9IG1heWJlO1xuZXhwb3J0cy5uZXdJbnZhcmlhbnRFcnJvciA9IG5ld0ludmFyaWFudEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFscy5janMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/globals.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/utilities.cjs ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar globals = __webpack_require__(/*! ./globals */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/globals.cjs\");\nvar graphql = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/index.js\");\nvar trie = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/bundle.cjs\");\nvar tslib = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nvar caches = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/bundle.cjs\");\nvar optimism = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/bundle.cjs\");\nvar zenObservableTs = __webpack_require__(/*! zen-observable-ts */ \"(ssr)/./node_modules/zen-observable-ts/index.cjs\");\n__webpack_require__(/*! symbol-observable */ \"(ssr)/./node_modules/symbol-observable/lib/index.js\");\n\nfunction shouldInclude(_a, variables) {\n    var directives = _a.directives;\n    if (!directives || !directives.length) {\n        return true;\n    }\n    return getInclusionDirectives(directives).every(function (_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === \"Variable\") {\n            evaledValue =\n                variables && variables[ifArgument.value.name.value];\n            globals.invariant(evaledValue !== void 0, 67, directive.name.value);\n        }\n        else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    });\n}\nfunction getDirectiveNames(root) {\n    var names = [];\n    graphql.visit(root, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nvar hasAnyDirectives = function (names, root) {\n    return hasDirectives(names, root, false);\n};\nvar hasAllDirectives = function (names, root) {\n    return hasDirectives(names, root, true);\n};\nfunction hasDirectives(names, root, all) {\n    var nameSet = new Set(names);\n    var uniqueCount = nameSet.size;\n    graphql.visit(root, {\n        Directive: function (node) {\n            if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n                return graphql.BREAK;\n            }\n        },\n    });\n    return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nfunction hasClientExports(document) {\n    return document && hasDirectives([\"client\", \"export\"], document, true);\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === \"skip\" || value === \"include\";\n}\nfunction getInclusionDirectives(directives) {\n    var result = [];\n    if (directives && directives.length) {\n        directives.forEach(function (directive) {\n            if (!isInclusionDirective(directive))\n                return;\n            var directiveArguments = directive.arguments;\n            var directiveName = directive.name.value;\n            globals.invariant(directiveArguments && directiveArguments.length === 1, 68, directiveName);\n            var ifArgument = directiveArguments[0];\n            globals.invariant(ifArgument.name && ifArgument.name.value === \"if\", 69, directiveName);\n            var ifValue = ifArgument.value;\n            globals.invariant(ifValue &&\n                (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"), 70, directiveName);\n            result.push({ directive: directive, ifArgument: ifArgument });\n        });\n    }\n    return result;\n}\n\nvar canUseWeakMap = typeof WeakMap === \"function\" &&\n    !globals.maybe(function () { return navigator.product == \"ReactNative\" && !global.HermesInternal; });\nvar canUseWeakSet = typeof WeakSet === \"function\";\nvar canUseSymbol = typeof Symbol === \"function\" && typeof Symbol.for === \"function\";\nvar canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\nvar canUseDOM = typeof globals.maybe(function () { return window.document.createElement; }) === \"function\";\nvar usingJSDOM =\nglobals.maybe(function () { return navigator.userAgent.indexOf(\"jsdom\") >= 0; }) || false;\nvar canUseLayoutEffect = canUseDOM && !usingJSDOM;\n\nfunction isNonNullObject(obj) {\n    return obj !== null && typeof obj === \"object\";\n}\nfunction isPlainObject(obj) {\n    return (obj !== null &&\n        typeof obj === \"object\" &&\n        (Object.getPrototypeOf(obj) === Object.prototype ||\n            Object.getPrototypeOf(obj) === null));\n}\n\nfunction getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === \"OperationDefinition\") {\n            throw globals.newInvariantError(\n                71,\n                definition.operation,\n                definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\"\n            );\n        }\n        if (definition.kind === \"FragmentDefinition\") {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === \"undefined\") {\n        globals.invariant(fragments.length === 1, 72, fragments.length);\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = tslib.__assign(tslib.__assign({}, document), { definitions: tslib.__spreadArray([\n            {\n                kind: \"OperationDefinition\",\n                operation: \"query\",\n                selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                        {\n                            kind: \"FragmentSpread\",\n                            name: {\n                                kind: \"Name\",\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ], document.definitions, true) });\n    return query;\n}\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nfunction getFragmentFromSelection(selection, fragmentMap) {\n    switch (selection.kind) {\n        case \"InlineFragment\":\n            return selection;\n        case \"FragmentSpread\": {\n            var fragmentName = selection.name.value;\n            if (typeof fragmentMap === \"function\") {\n                return fragmentMap(fragmentName);\n            }\n            var fragment = fragmentMap && fragmentMap[fragmentName];\n            globals.invariant(fragment, 73, fragmentName);\n            return fragment || null;\n        }\n        default:\n            return null;\n    }\n}\n\nvar scheduledCleanup = new WeakSet();\nfunction schedule(cache) {\n    if (!scheduledCleanup.has(cache)) {\n        scheduledCleanup.add(cache);\n        setTimeout(function () {\n            cache.clean();\n            scheduledCleanup.delete(cache);\n        }, 100);\n    }\n}\nvar AutoCleanedWeakCache = function (max, dispose) {\n    var cache = new caches.WeakCache(max, dispose);\n    cache.set = function (key, value) {\n        schedule(this);\n        return caches.WeakCache.prototype.set.call(this, key, value);\n    };\n    return cache;\n};\nvar AutoCleanedStrongCache = function (max, dispose) {\n    var cache = new caches.StrongCache(max, dispose);\n    cache.set = function (key, value) {\n        schedule(this);\n        return caches.StrongCache.prototype.set.call(this, key, value);\n    };\n    return cache;\n};\n\nvar cacheSizeSymbol = Symbol.for(\"apollo.cacheSize\");\nvar cacheSizes = tslib.__assign({}, globals.global[cacheSizeSymbol]);\n\nvar globalCaches = {};\nfunction registerGlobalCache(name, getSize) {\n    globalCaches[name] = getSize;\n}\n\nvar canonicalStringify = Object.assign(function canonicalStringify(value) {\n    return JSON.stringify(value, stableObjectReplacer);\n}, {\n    reset: function () {\n        sortingMap = new AutoCleanedStrongCache(cacheSizes.canonicalStringify || 1000 );\n    },\n});\nif (globalThis.__DEV__ !== false) {\n    registerGlobalCache(\"canonicalStringify\", function () { return sortingMap.size; });\n}\nvar sortingMap;\ncanonicalStringify.reset();\nfunction stableObjectReplacer(key, value) {\n    if (value && typeof value === \"object\") {\n        var proto = Object.getPrototypeOf(value);\n        if (proto === Object.prototype || proto === null) {\n            var keys = Object.keys(value);\n            if (keys.every(everyKeyInOrder))\n                return value;\n            var unsortedKey = JSON.stringify(keys);\n            var sortedKeys = sortingMap.get(unsortedKey);\n            if (!sortedKeys) {\n                keys.sort();\n                var sortedKey = JSON.stringify(keys);\n                sortedKeys = sortingMap.get(sortedKey) || keys;\n                sortingMap.set(unsortedKey, sortedKeys);\n                sortingMap.set(sortedKey, sortedKeys);\n            }\n            var sortedObject_1 = Object.create(proto);\n            sortedKeys.forEach(function (key) {\n                sortedObject_1[key] = value[key];\n            });\n            return sortedObject_1;\n        }\n    }\n    return value;\n}\nfunction everyKeyInOrder(key, i, keys) {\n    return i === 0 || keys[i - 1] <= key;\n}\n\nfunction makeReference(id) {\n    return { __ref: String(id) };\n}\nfunction isReference(obj) {\n    return Boolean(obj && typeof obj === \"object\" && typeof obj.__ref === \"string\");\n}\nfunction isDocumentNode(value) {\n    return (isNonNullObject(value) &&\n        value.kind === \"Document\" &&\n        Array.isArray(value.definitions));\n}\nfunction isStringValue(value) {\n    return value.kind === \"StringValue\";\n}\nfunction isBooleanValue(value) {\n    return value.kind === \"BooleanValue\";\n}\nfunction isIntValue(value) {\n    return value.kind === \"IntValue\";\n}\nfunction isFloatValue(value) {\n    return value.kind === \"FloatValue\";\n}\nfunction isVariable(value) {\n    return value.kind === \"Variable\";\n}\nfunction isObjectValue(value) {\n    return value.kind === \"ObjectValue\";\n}\nfunction isListValue(value) {\n    return value.kind === \"ListValue\";\n}\nfunction isEnumValue(value) {\n    return value.kind === \"EnumValue\";\n}\nfunction isNullValue(value) {\n    return value.kind === \"NullValue\";\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw globals.newInvariantError(82, name.value, value.kind);\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    \"connection\",\n    \"include\",\n    \"skip\",\n    \"client\",\n    \"rest\",\n    \"export\",\n    \"nonreactive\",\n];\nvar storeKeyNameStringify = canonicalStringify;\nvar getStoreKeyName = Object.assign(function (fieldName, args, directives) {\n    if (args &&\n        directives &&\n        directives[\"connection\"] &&\n        directives[\"connection\"][\"key\"]) {\n        if (directives[\"connection\"][\"filter\"] &&\n            directives[\"connection\"][\"filter\"].length > 0) {\n            var filterKeys = directives[\"connection\"][\"filter\"] ?\n                directives[\"connection\"][\"filter\"]\n                : [];\n            filterKeys.sort();\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = args[key];\n            });\n            return \"\".concat(directives[\"connection\"][\"key\"], \"(\").concat(storeKeyNameStringify(filteredArgs_1), \")\");\n        }\n        else {\n            return directives[\"connection\"][\"key\"];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        var stringifiedArgs = storeKeyNameStringify(args);\n        completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\".concat(key, \"(\").concat(storeKeyNameStringify(directives[key]), \")\");\n            }\n            else {\n                completeFieldName += \"@\".concat(key);\n            }\n        });\n    }\n    return completeFieldName;\n}, {\n    setStringify: function (s) {\n        var previous = storeKeyNameStringify;\n        storeKeyNameStringify = s;\n        return previous;\n    },\n});\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nfunction resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nfunction getTypenameFromResult(result, selectionSet, fragmentMap) {\n    var fragments;\n    for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {\n        var selection = _a[_i];\n        if (isField(selection)) {\n            if (selection.name.value === \"__typename\") {\n                return result[resultKeyNameFromField(selection)];\n            }\n        }\n        else if (fragments) {\n            fragments.push(selection);\n        }\n        else {\n            fragments = [selection];\n        }\n    }\n    if (typeof result.__typename === \"string\") {\n        return result.__typename;\n    }\n    if (fragments) {\n        for (var _b = 0, fragments_1 = fragments; _b < fragments_1.length; _b++) {\n            var selection = fragments_1[_b];\n            var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);\n            if (typeof typename === \"string\") {\n                return typename;\n            }\n        }\n    }\n}\nfunction isField(selection) {\n    return selection.kind === \"Field\";\n}\nfunction isInlineFragment(selection) {\n    return selection.kind === \"InlineFragment\";\n}\n\nfunction checkDocument(doc) {\n    globals.invariant(doc && doc.kind === \"Document\", 74);\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== \"FragmentDefinition\"; })\n        .map(function (definition) {\n        if (definition.kind !== \"OperationDefinition\") {\n            throw globals.newInvariantError(75, definition.kind);\n        }\n        return definition;\n    });\n    globals.invariant(operations.length <= 1, 76, operations.length);\n    return doc;\n}\nfunction getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) {\n        return definition.kind === \"OperationDefinition\";\n    })[0];\n}\nfunction getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === \"OperationDefinition\" && !!definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nfunction getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) {\n        return definition.kind === \"FragmentDefinition\";\n    });\n}\nfunction getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    globals.invariant(queryDef && queryDef.operation === \"query\", 77);\n    return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n    globals.invariant(doc.kind === \"Document\", 78);\n    globals.invariant(doc.definitions.length <= 1, 79);\n    var fragmentDef = doc.definitions[0];\n    globals.invariant(fragmentDef.kind === \"FragmentDefinition\", 80);\n    return fragmentDef;\n}\nfunction getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === \"OperationDefinition\") {\n            var operation = definition.operation;\n            if (operation === \"query\" ||\n                operation === \"mutation\" ||\n                operation === \"subscription\") {\n                return definition;\n            }\n        }\n        if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw globals.newInvariantError(81);\n}\nfunction getDefaultValues(definition) {\n    var defaultValues = Object.create(null);\n    var defs = definition && definition.variableDefinitions;\n    if (defs && defs.length) {\n        defs.forEach(function (def) {\n            if (def.defaultValue) {\n                valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n            }\n        });\n    }\n    return defaultValues;\n}\n\nfunction identity(document) {\n    return document;\n}\nvar DocumentTransform =  (function () {\n    function DocumentTransform(transform, options) {\n        if (options === void 0) { options = Object.create(null); }\n        this.resultCache = canUseWeakSet ? new WeakSet() : new Set();\n        this.transform = transform;\n        if (options.getCacheKey) {\n            this.getCacheKey = options.getCacheKey;\n        }\n        this.cached = options.cache !== false;\n        this.resetCache();\n    }\n    DocumentTransform.prototype.getCacheKey = function (document) {\n        return [document];\n    };\n    DocumentTransform.identity = function () {\n        return new DocumentTransform(identity, { cache: false });\n    };\n    DocumentTransform.split = function (predicate, left, right) {\n        if (right === void 0) { right = DocumentTransform.identity(); }\n        return Object.assign(new DocumentTransform(function (document) {\n            var documentTransform = predicate(document) ? left : right;\n            return documentTransform.transformDocument(document);\n        },\n        { cache: false }), { left: left, right: right });\n    };\n    DocumentTransform.prototype.resetCache = function () {\n        var _this = this;\n        if (this.cached) {\n            var stableCacheKeys_1 = new trie.Trie(canUseWeakMap);\n            this.performWork = optimism.wrap(DocumentTransform.prototype.performWork.bind(this), {\n                makeCacheKey: function (document) {\n                    var cacheKeys = _this.getCacheKey(document);\n                    if (cacheKeys) {\n                        globals.invariant(Array.isArray(cacheKeys), 66);\n                        return stableCacheKeys_1.lookupArray(cacheKeys);\n                    }\n                },\n                max: cacheSizes[\"documentTransform.cache\"],\n                cache: (caches.WeakCache),\n            });\n        }\n    };\n    DocumentTransform.prototype.performWork = function (document) {\n        checkDocument(document);\n        return this.transform(document);\n    };\n    DocumentTransform.prototype.transformDocument = function (document) {\n        if (this.resultCache.has(document)) {\n            return document;\n        }\n        var transformedDocument = this.performWork(document);\n        this.resultCache.add(transformedDocument);\n        return transformedDocument;\n    };\n    DocumentTransform.prototype.concat = function (otherTransform) {\n        var _this = this;\n        return Object.assign(new DocumentTransform(function (document) {\n            return otherTransform.transformDocument(_this.transformDocument(document));\n        },\n        { cache: false }), {\n            left: this,\n            right: otherTransform,\n        });\n    };\n    return DocumentTransform;\n}());\n\nvar printCache;\nvar print = Object.assign(function (ast) {\n    var result = printCache.get(ast);\n    if (!result) {\n        result = graphql.print(ast);\n        printCache.set(ast, result);\n    }\n    return result;\n}, {\n    reset: function () {\n        printCache = new AutoCleanedWeakCache(cacheSizes.print || 2000 );\n    },\n});\nprint.reset();\nif (globalThis.__DEV__ !== false) {\n    registerGlobalCache(\"print\", function () { return (printCache ? printCache.size : 0); });\n}\n\nvar isArray = Array.isArray;\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\n\nvar TYPENAME_FIELD = {\n    kind: graphql.Kind.FIELD,\n    name: {\n        kind: graphql.Kind.NAME,\n        value: \"__typename\",\n    },\n};\nfunction isEmpty(op, fragmentMap) {\n    return (!op ||\n        op.selectionSet.selections.every(function (selection) {\n            return selection.kind === graphql.Kind.FRAGMENT_SPREAD &&\n                isEmpty(fragmentMap[selection.name.value], fragmentMap);\n        }));\n}\nfunction nullIfDocIsEmpty(doc) {\n    return (isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))) ?\n        null\n        : doc;\n}\nfunction getDirectiveMatcher(configs) {\n    var names = new Map();\n    var tests = new Map();\n    configs.forEach(function (directive) {\n        if (directive) {\n            if (directive.name) {\n                names.set(directive.name, directive);\n            }\n            else if (directive.test) {\n                tests.set(directive.test, directive);\n            }\n        }\n    });\n    return function (directive) {\n        var config = names.get(directive.name.value);\n        if (!config && tests.size) {\n            tests.forEach(function (testConfig, test) {\n                if (test(directive)) {\n                    config = testConfig;\n                }\n            });\n        }\n        return config;\n    };\n}\nfunction makeInUseGetterFunction(defaultKey) {\n    var map = new Map();\n    return function inUseGetterFunction(key) {\n        if (key === void 0) { key = defaultKey; }\n        var inUse = map.get(key);\n        if (!inUse) {\n            map.set(key, (inUse = {\n                variables: new Set(),\n                fragmentSpreads: new Set(),\n            }));\n        }\n        return inUse;\n    };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n    checkDocument(doc);\n    var getInUseByOperationName = makeInUseGetterFunction(\"\");\n    var getInUseByFragmentName = makeInUseGetterFunction(\"\");\n    var getInUse = function (ancestors) {\n        for (var p = 0, ancestor = void 0; p < ancestors.length && (ancestor = ancestors[p]); ++p) {\n            if (isArray(ancestor))\n                continue;\n            if (ancestor.kind === graphql.Kind.OPERATION_DEFINITION) {\n                return getInUseByOperationName(ancestor.name && ancestor.name.value);\n            }\n            if (ancestor.kind === graphql.Kind.FRAGMENT_DEFINITION) {\n                return getInUseByFragmentName(ancestor.name.value);\n            }\n        }\n        globalThis.__DEV__ !== false && globals.invariant.error(83);\n        return null;\n    };\n    var operationCount = 0;\n    for (var i = doc.definitions.length - 1; i >= 0; --i) {\n        if (doc.definitions[i].kind === graphql.Kind.OPERATION_DEFINITION) {\n            ++operationCount;\n        }\n    }\n    var directiveMatcher = getDirectiveMatcher(directives);\n    var shouldRemoveField = function (nodeDirectives) {\n        return isNonEmptyArray(nodeDirectives) &&\n            nodeDirectives\n                .map(directiveMatcher)\n                .some(function (config) { return config && config.remove; });\n    };\n    var originalFragmentDefsByPath = new Map();\n    var firstVisitMadeChanges = false;\n    var fieldOrInlineFragmentVisitor = {\n        enter: function (node) {\n            if (shouldRemoveField(node.directives)) {\n                firstVisitMadeChanges = true;\n                return null;\n            }\n        },\n    };\n    var docWithoutDirectiveSubtrees = graphql.visit(doc, {\n        Field: fieldOrInlineFragmentVisitor,\n        InlineFragment: fieldOrInlineFragmentVisitor,\n        VariableDefinition: {\n            enter: function () {\n                return false;\n            },\n        },\n        Variable: {\n            enter: function (node, _key, _parent, _path, ancestors) {\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.variables.add(node.name.value);\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node, _key, _parent, _path, ancestors) {\n                if (shouldRemoveField(node.directives)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.fragmentSpreads.add(node.name.value);\n                }\n            },\n        },\n        FragmentDefinition: {\n            enter: function (node, _key, _parent, path) {\n                originalFragmentDefsByPath.set(JSON.stringify(path), node);\n            },\n            leave: function (node, _key, _parent, path) {\n                var originalNode = originalFragmentDefsByPath.get(JSON.stringify(path));\n                if (node === originalNode) {\n                    return node;\n                }\n                if (\n                operationCount > 0 &&\n                    node.selectionSet.selections.every(function (selection) {\n                        return selection.kind === graphql.Kind.FIELD &&\n                            selection.name.value === \"__typename\";\n                    })) {\n                    getInUseByFragmentName(node.name.value).removed = true;\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            },\n        },\n        Directive: {\n            leave: function (node) {\n                if (directiveMatcher(node)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            },\n        },\n    });\n    if (!firstVisitMadeChanges) {\n        return doc;\n    }\n    var populateTransitiveVars = function (inUse) {\n        if (!inUse.transitiveVars) {\n            inUse.transitiveVars = new Set(inUse.variables);\n            if (!inUse.removed) {\n                inUse.fragmentSpreads.forEach(function (childFragmentName) {\n                    populateTransitiveVars(getInUseByFragmentName(childFragmentName)).transitiveVars.forEach(function (varName) {\n                        inUse.transitiveVars.add(varName);\n                    });\n                });\n            }\n        }\n        return inUse;\n    };\n    var allFragmentNamesUsed = new Set();\n    docWithoutDirectiveSubtrees.definitions.forEach(function (def) {\n        if (def.kind === graphql.Kind.OPERATION_DEFINITION) {\n            populateTransitiveVars(getInUseByOperationName(def.name && def.name.value)).fragmentSpreads.forEach(function (childFragmentName) {\n                allFragmentNamesUsed.add(childFragmentName);\n            });\n        }\n        else if (def.kind === graphql.Kind.FRAGMENT_DEFINITION &&\n            operationCount === 0 &&\n            !getInUseByFragmentName(def.name.value).removed) {\n            allFragmentNamesUsed.add(def.name.value);\n        }\n    });\n    allFragmentNamesUsed.forEach(function (fragmentName) {\n        populateTransitiveVars(getInUseByFragmentName(fragmentName)).fragmentSpreads.forEach(function (childFragmentName) {\n            allFragmentNamesUsed.add(childFragmentName);\n        });\n    });\n    var fragmentWillBeRemoved = function (fragmentName) {\n        return !!(\n        (!allFragmentNamesUsed.has(fragmentName) ||\n            getInUseByFragmentName(fragmentName).removed));\n    };\n    var enterVisitor = {\n        enter: function (node) {\n            if (fragmentWillBeRemoved(node.name.value)) {\n                return null;\n            }\n        },\n    };\n    return nullIfDocIsEmpty(graphql.visit(docWithoutDirectiveSubtrees, {\n        FragmentSpread: enterVisitor,\n        FragmentDefinition: enterVisitor,\n        OperationDefinition: {\n            leave: function (node) {\n                if (node.variableDefinitions) {\n                    var usedVariableNames_1 = populateTransitiveVars(\n                    getInUseByOperationName(node.name && node.name.value)).transitiveVars;\n                    if (usedVariableNames_1.size < node.variableDefinitions.length) {\n                        return tslib.__assign(tslib.__assign({}, node), { variableDefinitions: node.variableDefinitions.filter(function (varDef) {\n                                return usedVariableNames_1.has(varDef.variable.name.value);\n                            }) });\n                    }\n                }\n            },\n        },\n    }));\n}\nvar addTypenameToDocument = Object.assign(function (doc) {\n    return graphql.visit(doc, {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                if (parent &&\n                    parent.kind ===\n                        graphql.Kind.OPERATION_DEFINITION) {\n                    return;\n                }\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                var skip = selections.some(function (selection) {\n                    return (isField(selection) &&\n                        (selection.name.value === \"__typename\" ||\n                            selection.name.value.lastIndexOf(\"__\", 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                var field = parent;\n                if (isField(field) &&\n                    field.directives &&\n                    field.directives.some(function (d) { return d.name.value === \"export\"; })) {\n                    return;\n                }\n                return tslib.__assign(tslib.__assign({}, node), { selections: tslib.__spreadArray(tslib.__spreadArray([], selections, true), [TYPENAME_FIELD], false) });\n            },\n        },\n    });\n}, {\n    added: function (field) {\n        return field === TYPENAME_FIELD;\n    },\n});\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === \"connection\";\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === \"key\"; })) {\n                globalThis.__DEV__ !== false && globals.invariant.warn(84);\n            }\n        }\n        return willRemove;\n    },\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === graphql.Kind.VARIABLE &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(graphql.visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return tslib.__assign(tslib.__assign({}, node), {\n                    variableDefinitions: node.variableDefinitions ?\n                        node.variableDefinitions.filter(function (varDef) {\n                            return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });\n                        })\n                        : [] });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    if (node.arguments) {\n                        node.arguments.forEach(function (arg) {\n                            if (argMatcher(arg)) {\n                                argMatchCount_1 += 1;\n                            }\n                        });\n                    }\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(graphql.visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\nfunction buildQueryFromSelectionSet(document) {\n    var definition = getMainDefinition(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === \"query\") {\n        return document;\n    }\n    var modifiedDoc = graphql.visit(document, {\n        OperationDefinition: {\n            enter: function (node) {\n                return tslib.__assign(tslib.__assign({}, node), { operation: \"query\" });\n            },\n        },\n    });\n    return modifiedDoc;\n}\nfunction removeClientSetsFromDocument(document) {\n    checkDocument(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function (directive) { return directive.name.value === \"client\"; },\n            remove: true,\n        },\n    ], document);\n    return modifiedDoc;\n}\n\nfunction isOperation(document, operation) {\n    var _a;\n    return ((_a = getOperationDefinition(document)) === null || _a === void 0 ? void 0 : _a.operation) === operation;\n}\nfunction isMutationOperation(document) {\n    return isOperation(document, \"mutation\");\n}\nfunction isQueryOperation(document) {\n    return isOperation(document, \"query\");\n}\nfunction isSubscriptionOperation(document) {\n    return isOperation(document, \"subscription\");\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\nfunction mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var merger = new DeepMerger();\n        for (var i = 1; i < count; ++i) {\n            target = merger.merge(target, sources[i]);\n        }\n    }\n    return target;\n}\nvar defaultReconciler = function (target, source, property) {\n    return this.merge(target[property], source[property]);\n};\nvar DeepMerger =  (function () {\n    function DeepMerger(reconciler) {\n        if (reconciler === void 0) { reconciler = defaultReconciler; }\n        this.reconciler = reconciler;\n        this.isObject = isNonNullObject;\n        this.pastCopies = new Set();\n    }\n    DeepMerger.prototype.merge = function (target, source) {\n        var _this = this;\n        var context = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            context[_i - 2] = arguments[_i];\n        }\n        if (isNonNullObject(source) && isNonNullObject(target)) {\n            Object.keys(source).forEach(function (sourceKey) {\n                if (hasOwnProperty.call(target, sourceKey)) {\n                    var targetValue = target[sourceKey];\n                    if (source[sourceKey] !== targetValue) {\n                        var result = _this.reconciler.apply(_this, tslib.__spreadArray([target,\n                            source,\n                            sourceKey], context, false));\n                        if (result !== targetValue) {\n                            target = _this.shallowCopyForMerge(target);\n                            target[sourceKey] = result;\n                        }\n                    }\n                }\n                else {\n                    target = _this.shallowCopyForMerge(target);\n                    target[sourceKey] = source[sourceKey];\n                }\n            });\n            return target;\n        }\n        return source;\n    };\n    DeepMerger.prototype.shallowCopyForMerge = function (value) {\n        if (isNonNullObject(value)) {\n            if (!this.pastCopies.has(value)) {\n                if (Array.isArray(value)) {\n                    value = value.slice(0);\n                }\n                else {\n                    value = tslib.__assign({ __proto__: Object.getPrototypeOf(value) }, value);\n                }\n                this.pastCopies.add(value);\n            }\n        }\n        return value;\n    };\n    return DeepMerger;\n}());\n\nfunction concatPagination(keyArgs) {\n    if (keyArgs === void 0) { keyArgs = false; }\n    return {\n        keyArgs: keyArgs,\n        merge: function (existing, incoming) {\n            return existing ? tslib.__spreadArray(tslib.__spreadArray([], existing, true), incoming, true) : incoming;\n        },\n    };\n}\nfunction offsetLimitPagination(keyArgs) {\n    if (keyArgs === void 0) { keyArgs = false; }\n    return {\n        keyArgs: keyArgs,\n        merge: function (existing, incoming, _a) {\n            var args = _a.args;\n            var merged = existing ? existing.slice(0) : [];\n            if (incoming) {\n                if (args) {\n                    var _b = args.offset, offset = _b === void 0 ? 0 : _b;\n                    for (var i = 0; i < incoming.length; ++i) {\n                        merged[offset + i] = incoming[i];\n                    }\n                }\n                else {\n                    merged.push.apply(merged, incoming);\n                }\n            }\n            return merged;\n        },\n    };\n}\nfunction relayStylePagination(keyArgs) {\n    if (keyArgs === void 0) { keyArgs = false; }\n    return {\n        keyArgs: keyArgs,\n        read: function (existing, _a) {\n            var canRead = _a.canRead, readField = _a.readField;\n            if (!existing)\n                return existing;\n            var edges = [];\n            var firstEdgeCursor = \"\";\n            var lastEdgeCursor = \"\";\n            existing.edges.forEach(function (edge) {\n                if (canRead(readField(\"node\", edge))) {\n                    edges.push(edge);\n                    if (edge.cursor) {\n                        firstEdgeCursor = firstEdgeCursor || edge.cursor || \"\";\n                        lastEdgeCursor = edge.cursor || lastEdgeCursor;\n                    }\n                }\n            });\n            if (edges.length > 1 && firstEdgeCursor === lastEdgeCursor) {\n                firstEdgeCursor = \"\";\n            }\n            var _b = existing.pageInfo || {}, startCursor = _b.startCursor, endCursor = _b.endCursor;\n            return tslib.__assign(tslib.__assign({}, getExtras(existing)), { edges: edges, pageInfo: tslib.__assign(tslib.__assign({}, existing.pageInfo), {\n                    startCursor: startCursor || firstEdgeCursor, endCursor: endCursor || lastEdgeCursor }) });\n        },\n        merge: function (existing, incoming, _a) {\n            var args = _a.args, isReference = _a.isReference, readField = _a.readField;\n            if (!existing) {\n                existing = makeEmptyData();\n            }\n            if (!incoming) {\n                return existing;\n            }\n            var incomingEdges = incoming.edges ?\n                incoming.edges.map(function (edge) {\n                    if (isReference((edge = tslib.__assign({}, edge)))) {\n                        edge.cursor = readField(\"cursor\", edge);\n                    }\n                    return edge;\n                })\n                : [];\n            if (incoming.pageInfo) {\n                var pageInfo_1 = incoming.pageInfo;\n                var startCursor = pageInfo_1.startCursor, endCursor = pageInfo_1.endCursor;\n                var firstEdge = incomingEdges[0];\n                var lastEdge = incomingEdges[incomingEdges.length - 1];\n                if (firstEdge && startCursor) {\n                    firstEdge.cursor = startCursor;\n                }\n                if (lastEdge && endCursor) {\n                    lastEdge.cursor = endCursor;\n                }\n                var firstCursor = firstEdge && firstEdge.cursor;\n                if (firstCursor && !startCursor) {\n                    incoming = mergeDeep(incoming, {\n                        pageInfo: {\n                            startCursor: firstCursor,\n                        },\n                    });\n                }\n                var lastCursor = lastEdge && lastEdge.cursor;\n                if (lastCursor && !endCursor) {\n                    incoming = mergeDeep(incoming, {\n                        pageInfo: {\n                            endCursor: lastCursor,\n                        },\n                    });\n                }\n            }\n            var prefix = existing.edges;\n            var suffix = [];\n            if (args && args.after) {\n                var index = prefix.findIndex(function (edge) { return edge.cursor === args.after; });\n                if (index >= 0) {\n                    prefix = prefix.slice(0, index + 1);\n                }\n            }\n            else if (args && args.before) {\n                var index = prefix.findIndex(function (edge) { return edge.cursor === args.before; });\n                suffix = index < 0 ? prefix : prefix.slice(index);\n                prefix = [];\n            }\n            else if (incoming.edges) {\n                prefix = [];\n            }\n            var edges = tslib.__spreadArray(tslib.__spreadArray(tslib.__spreadArray([], prefix, true), incomingEdges, true), suffix, true);\n            var pageInfo = tslib.__assign(tslib.__assign({}, incoming.pageInfo), existing.pageInfo);\n            if (incoming.pageInfo) {\n                var _b = incoming.pageInfo, hasPreviousPage = _b.hasPreviousPage, hasNextPage = _b.hasNextPage, startCursor = _b.startCursor, endCursor = _b.endCursor, extras = tslib.__rest(_b, [\"hasPreviousPage\", \"hasNextPage\", \"startCursor\", \"endCursor\"]);\n                Object.assign(pageInfo, extras);\n                if (!prefix.length) {\n                    if (void 0 !== hasPreviousPage)\n                        pageInfo.hasPreviousPage = hasPreviousPage;\n                    if (void 0 !== startCursor)\n                        pageInfo.startCursor = startCursor;\n                }\n                if (!suffix.length) {\n                    if (void 0 !== hasNextPage)\n                        pageInfo.hasNextPage = hasNextPage;\n                    if (void 0 !== endCursor)\n                        pageInfo.endCursor = endCursor;\n                }\n            }\n            return tslib.__assign(tslib.__assign(tslib.__assign({}, getExtras(existing)), getExtras(incoming)), { edges: edges, pageInfo: pageInfo });\n        },\n    };\n}\nvar getExtras = function (obj) { return tslib.__rest(obj, notExtras); };\nvar notExtras = [\"edges\", \"pageInfo\"];\nfunction makeEmptyData() {\n    return {\n        edges: [],\n        pageInfo: {\n            hasPreviousPage: false,\n            hasNextPage: true,\n            startCursor: \"\",\n            endCursor: \"\",\n        },\n    };\n}\n\nfunction createFulfilledPromise(value) {\n    var promise = Promise.resolve(value);\n    promise.status = \"fulfilled\";\n    promise.value = value;\n    return promise;\n}\nfunction createRejectedPromise(reason) {\n    var promise = Promise.reject(reason);\n    promise.catch(function () { });\n    promise.status = \"rejected\";\n    promise.reason = reason;\n    return promise;\n}\nfunction isStatefulPromise(promise) {\n    return \"status\" in promise;\n}\nfunction wrapPromiseWithState(promise) {\n    if (isStatefulPromise(promise)) {\n        return promise;\n    }\n    var pendingPromise = promise;\n    pendingPromise.status = \"pending\";\n    pendingPromise.then(function (value) {\n        if (pendingPromise.status === \"pending\") {\n            var fulfilledPromise = pendingPromise;\n            fulfilledPromise.status = \"fulfilled\";\n            fulfilledPromise.value = value;\n        }\n    }, function (reason) {\n        if (pendingPromise.status === \"pending\") {\n            var rejectedPromise = pendingPromise;\n            rejectedPromise.status = \"rejected\";\n            rejectedPromise.reason = reason;\n        }\n    });\n    return promise;\n}\n\nvar toString = Object.prototype.toString;\nfunction cloneDeep(value) {\n    return cloneDeepHelper(value);\n}\nfunction cloneDeepHelper(val, seen) {\n    switch (toString.call(val)) {\n        case \"[object Array]\": {\n            seen = seen || new Map();\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_1 = val.slice(0);\n            seen.set(val, copy_1);\n            copy_1.forEach(function (child, i) {\n                copy_1[i] = cloneDeepHelper(child, seen);\n            });\n            return copy_1;\n        }\n        case \"[object Object]\": {\n            seen = seen || new Map();\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_2 = Object.create(Object.getPrototypeOf(val));\n            seen.set(val, copy_2);\n            Object.keys(val).forEach(function (key) {\n                copy_2[key] = cloneDeepHelper(val[key], seen);\n            });\n            return copy_2;\n        }\n        default:\n            return val;\n    }\n}\n\nfunction deepFreeze(value) {\n    var workSet = new Set([value]);\n    workSet.forEach(function (obj) {\n        if (isNonNullObject(obj) && shallowFreeze(obj) === obj) {\n            Object.getOwnPropertyNames(obj).forEach(function (name) {\n                if (isNonNullObject(obj[name]))\n                    workSet.add(obj[name]);\n            });\n        }\n    });\n    return value;\n}\nfunction shallowFreeze(obj) {\n    if (globalThis.__DEV__ !== false && !Object.isFrozen(obj)) {\n        try {\n            Object.freeze(obj);\n        }\n        catch (e) {\n            if (e instanceof TypeError)\n                return null;\n            throw e;\n        }\n    }\n    return obj;\n}\nfunction maybeDeepFreeze(obj) {\n    if (globalThis.__DEV__ !== false) {\n        deepFreeze(obj);\n    }\n    return obj;\n}\n\nfunction iterateObserversSafely(observers, method, argument) {\n    var observersWithMethod = [];\n    observers.forEach(function (obs) { return obs[method] && observersWithMethod.push(obs); });\n    observersWithMethod.forEach(function (obs) { return obs[method](argument); });\n}\n\nfunction asyncMap(observable, mapFn, catchFn) {\n    return new zenObservableTs.Observable(function (observer) {\n        var promiseQueue = {\n            then: function (callback) {\n                return new Promise(function (resolve) { return resolve(callback()); });\n            },\n        };\n        function makeCallback(examiner, key) {\n            return function (arg) {\n                if (examiner) {\n                    var both = function () {\n                        return observer.closed ?\n                             0\n                            : examiner(arg);\n                    };\n                    promiseQueue = promiseQueue.then(both, both).then(function (result) { return observer.next(result); }, function (error) { return observer.error(error); });\n                }\n                else {\n                    observer[key](arg);\n                }\n            };\n        }\n        var handler = {\n            next: makeCallback(mapFn, \"next\"),\n            error: makeCallback(catchFn, \"error\"),\n            complete: function () {\n                 promiseQueue.then(function () { return observer.complete(); });\n            },\n        };\n        var sub = observable.subscribe(handler);\n        return function () { return sub.unsubscribe(); };\n    });\n}\n\nfunction fixObservableSubclass(subclass) {\n    function set(key) {\n        Object.defineProperty(subclass, key, { value: zenObservableTs.Observable });\n    }\n    if (canUseSymbol && Symbol.species) {\n        set(Symbol.species);\n    }\n    set(\"@@species\");\n    return subclass;\n}\n\nfunction isPromiseLike(value) {\n    return value && typeof value.then === \"function\";\n}\nvar Concast =  (function (_super) {\n    tslib.__extends(Concast, _super);\n    function Concast(sources) {\n        var _this = _super.call(this, function (observer) {\n            _this.addObserver(observer);\n            return function () { return _this.removeObserver(observer); };\n        }) || this;\n        _this.observers = new Set();\n        _this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n        _this.handlers = {\n            next: function (result) {\n                if (_this.sub !== null) {\n                    _this.latest = [\"next\", result];\n                    _this.notify(\"next\", result);\n                    iterateObserversSafely(_this.observers, \"next\", result);\n                }\n            },\n            error: function (error) {\n                var sub = _this.sub;\n                if (sub !== null) {\n                    if (sub)\n                        setTimeout(function () { return sub.unsubscribe(); });\n                    _this.sub = null;\n                    _this.latest = [\"error\", error];\n                    _this.reject(error);\n                    _this.notify(\"error\", error);\n                    iterateObserversSafely(_this.observers, \"error\", error);\n                }\n            },\n            complete: function () {\n                var _a = _this, sub = _a.sub, _b = _a.sources, sources = _b === void 0 ? [] : _b;\n                if (sub !== null) {\n                    var value = sources.shift();\n                    if (!value) {\n                        if (sub)\n                            setTimeout(function () { return sub.unsubscribe(); });\n                        _this.sub = null;\n                        if (_this.latest && _this.latest[0] === \"next\") {\n                            _this.resolve(_this.latest[1]);\n                        }\n                        else {\n                            _this.resolve();\n                        }\n                        _this.notify(\"complete\");\n                        iterateObserversSafely(_this.observers, \"complete\");\n                    }\n                    else if (isPromiseLike(value)) {\n                        value.then(function (obs) { return (_this.sub = obs.subscribe(_this.handlers)); }, _this.handlers.error);\n                    }\n                    else {\n                        _this.sub = value.subscribe(_this.handlers);\n                    }\n                }\n            },\n        };\n        _this.nextResultListeners = new Set();\n        _this.cancel = function (reason) {\n            _this.reject(reason);\n            _this.sources = [];\n            _this.handlers.complete();\n        };\n        _this.promise.catch(function (_) { });\n        if (typeof sources === \"function\") {\n            sources = [new zenObservableTs.Observable(sources)];\n        }\n        if (isPromiseLike(sources)) {\n            sources.then(function (iterable) { return _this.start(iterable); }, _this.handlers.error);\n        }\n        else {\n            _this.start(sources);\n        }\n        return _this;\n    }\n    Concast.prototype.start = function (sources) {\n        if (this.sub !== void 0)\n            return;\n        this.sources = Array.from(sources);\n        this.handlers.complete();\n    };\n    Concast.prototype.deliverLastMessage = function (observer) {\n        if (this.latest) {\n            var nextOrError = this.latest[0];\n            var method = observer[nextOrError];\n            if (method) {\n                method.call(observer, this.latest[1]);\n            }\n            if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n                observer.complete();\n            }\n        }\n    };\n    Concast.prototype.addObserver = function (observer) {\n        if (!this.observers.has(observer)) {\n            this.deliverLastMessage(observer);\n            this.observers.add(observer);\n        }\n    };\n    Concast.prototype.removeObserver = function (observer) {\n        if (this.observers.delete(observer) && this.observers.size < 1) {\n            this.handlers.complete();\n        }\n    };\n    Concast.prototype.notify = function (method, arg) {\n        var nextResultListeners = this.nextResultListeners;\n        if (nextResultListeners.size) {\n            this.nextResultListeners = new Set();\n            nextResultListeners.forEach(function (listener) { return listener(method, arg); });\n        }\n    };\n    Concast.prototype.beforeNext = function (callback) {\n        var called = false;\n        this.nextResultListeners.add(function (method, arg) {\n            if (!called) {\n                called = true;\n                callback(method, arg);\n            }\n        });\n    };\n    return Concast;\n}(zenObservableTs.Observable));\nfixObservableSubclass(Concast);\n\nfunction isExecutionPatchIncrementalResult(value) {\n    return \"incremental\" in value;\n}\nfunction isExecutionPatchInitialResult(value) {\n    return \"hasNext\" in value && \"data\" in value;\n}\nfunction isExecutionPatchResult(value) {\n    return (isExecutionPatchIncrementalResult(value) ||\n        isExecutionPatchInitialResult(value));\n}\nfunction isApolloPayloadResult(value) {\n    return isNonNullObject(value) && \"payload\" in value;\n}\nfunction mergeIncrementalData(prevResult, result) {\n    var mergedData = prevResult;\n    var merger = new DeepMerger();\n    if (isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)) {\n        result.incremental.forEach(function (_a) {\n            var data = _a.data, path = _a.path;\n            for (var i = path.length - 1; i >= 0; --i) {\n                var key = path[i];\n                var isNumericKey = !isNaN(+key);\n                var parent_1 = isNumericKey ? [] : {};\n                parent_1[key] = data;\n                data = parent_1;\n            }\n            mergedData = merger.merge(mergedData, data);\n        });\n    }\n    return mergedData;\n}\n\nfunction graphQLResultHasError(result) {\n    var errors = getGraphQLErrorsFromResult(result);\n    return isNonEmptyArray(errors);\n}\nfunction getGraphQLErrorsFromResult(result) {\n    var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n    if (isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)) {\n        result.incremental.forEach(function (incrementalResult) {\n            if (incrementalResult.errors) {\n                graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n            }\n        });\n    }\n    return graphQLErrors;\n}\n\nfunction compact() {\n    var objects = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        objects[_i] = arguments[_i];\n    }\n    var result = Object.create(null);\n    objects.forEach(function (obj) {\n        if (!obj)\n            return;\n        Object.keys(obj).forEach(function (key) {\n            var value = obj[key];\n            if (value !== void 0) {\n                result[key] = value;\n            }\n        });\n    });\n    return result;\n}\n\nvar prefixCounts = new Map();\nfunction makeUniqueId(prefix) {\n    var count = prefixCounts.get(prefix) || 1;\n    prefixCounts.set(prefix, count + 1);\n    return \"\".concat(prefix, \":\").concat(count, \":\").concat(Math.random().toString(36).slice(2));\n}\n\nfunction stringifyForDisplay(value, space) {\n    if (space === void 0) { space = 0; }\n    var undefId = makeUniqueId(\"stringifyForDisplay\");\n    return JSON.stringify(value, function (key, value) {\n        return value === void 0 ? undefId : value;\n    }, space)\n        .split(JSON.stringify(undefId))\n        .join(\"<undefined>\");\n}\n\nfunction mergeOptions(defaults, options) {\n    return compact(defaults, options, options.variables && {\n        variables: compact(tslib.__assign(tslib.__assign({}, (defaults && defaults.variables)), options.variables)),\n    });\n}\n\nfunction omitDeep(value, key) {\n    return __omitDeep(value, key);\n}\nfunction __omitDeep(value, key, known) {\n    if (known === void 0) { known = new Map(); }\n    if (known.has(value)) {\n        return known.get(value);\n    }\n    var modified = false;\n    if (Array.isArray(value)) {\n        var array_1 = [];\n        known.set(value, array_1);\n        value.forEach(function (value, index) {\n            var result = __omitDeep(value, key, known);\n            modified || (modified = result !== value);\n            array_1[index] = result;\n        });\n        if (modified) {\n            return array_1;\n        }\n    }\n    else if (isPlainObject(value)) {\n        var obj_1 = Object.create(Object.getPrototypeOf(value));\n        known.set(value, obj_1);\n        Object.keys(value).forEach(function (k) {\n            if (k === key) {\n                modified = true;\n                return;\n            }\n            var result = __omitDeep(value[k], key, known);\n            modified || (modified = result !== value[k]);\n            obj_1[k] = result;\n        });\n        if (modified) {\n            return obj_1;\n        }\n    }\n    return value;\n}\n\nfunction stripTypename(value) {\n    return omitDeep(value, \"__typename\");\n}\n\nexports.DEV = globals.DEV;\nexports.maybe = globals.maybe;\nexports.Observable = zenObservableTs.Observable;\nexports.AutoCleanedStrongCache = AutoCleanedStrongCache;\nexports.AutoCleanedWeakCache = AutoCleanedWeakCache;\nexports.Concast = Concast;\nexports.DeepMerger = DeepMerger;\nexports.DocumentTransform = DocumentTransform;\nexports.addTypenameToDocument = addTypenameToDocument;\nexports.argumentsObjectFromField = argumentsObjectFromField;\nexports.asyncMap = asyncMap;\nexports.buildQueryFromSelectionSet = buildQueryFromSelectionSet;\nexports.cacheSizes = cacheSizes;\nexports.canUseAsyncIteratorSymbol = canUseAsyncIteratorSymbol;\nexports.canUseDOM = canUseDOM;\nexports.canUseLayoutEffect = canUseLayoutEffect;\nexports.canUseSymbol = canUseSymbol;\nexports.canUseWeakMap = canUseWeakMap;\nexports.canUseWeakSet = canUseWeakSet;\nexports.canonicalStringify = canonicalStringify;\nexports.checkDocument = checkDocument;\nexports.cloneDeep = cloneDeep;\nexports.compact = compact;\nexports.concatPagination = concatPagination;\nexports.createFragmentMap = createFragmentMap;\nexports.createFulfilledPromise = createFulfilledPromise;\nexports.createRejectedPromise = createRejectedPromise;\nexports.fixObservableSubclass = fixObservableSubclass;\nexports.getDefaultValues = getDefaultValues;\nexports.getDirectiveNames = getDirectiveNames;\nexports.getFragmentDefinition = getFragmentDefinition;\nexports.getFragmentDefinitions = getFragmentDefinitions;\nexports.getFragmentFromSelection = getFragmentFromSelection;\nexports.getFragmentQueryDocument = getFragmentQueryDocument;\nexports.getGraphQLErrorsFromResult = getGraphQLErrorsFromResult;\nexports.getInclusionDirectives = getInclusionDirectives;\nexports.getMainDefinition = getMainDefinition;\nexports.getOperationDefinition = getOperationDefinition;\nexports.getOperationName = getOperationName;\nexports.getQueryDefinition = getQueryDefinition;\nexports.getStoreKeyName = getStoreKeyName;\nexports.getTypenameFromResult = getTypenameFromResult;\nexports.graphQLResultHasError = graphQLResultHasError;\nexports.hasAllDirectives = hasAllDirectives;\nexports.hasAnyDirectives = hasAnyDirectives;\nexports.hasClientExports = hasClientExports;\nexports.hasDirectives = hasDirectives;\nexports.isApolloPayloadResult = isApolloPayloadResult;\nexports.isArray = isArray;\nexports.isDocumentNode = isDocumentNode;\nexports.isExecutionPatchIncrementalResult = isExecutionPatchIncrementalResult;\nexports.isExecutionPatchInitialResult = isExecutionPatchInitialResult;\nexports.isExecutionPatchResult = isExecutionPatchResult;\nexports.isField = isField;\nexports.isInlineFragment = isInlineFragment;\nexports.isMutationOperation = isMutationOperation;\nexports.isNonEmptyArray = isNonEmptyArray;\nexports.isNonNullObject = isNonNullObject;\nexports.isPlainObject = isPlainObject;\nexports.isQueryOperation = isQueryOperation;\nexports.isReference = isReference;\nexports.isStatefulPromise = isStatefulPromise;\nexports.isSubscriptionOperation = isSubscriptionOperation;\nexports.iterateObserversSafely = iterateObserversSafely;\nexports.makeReference = makeReference;\nexports.makeUniqueId = makeUniqueId;\nexports.maybeDeepFreeze = maybeDeepFreeze;\nexports.mergeDeep = mergeDeep;\nexports.mergeDeepArray = mergeDeepArray;\nexports.mergeIncrementalData = mergeIncrementalData;\nexports.mergeOptions = mergeOptions;\nexports.offsetLimitPagination = offsetLimitPagination;\nexports.omitDeep = omitDeep;\nexports.print = print;\nexports.relayStylePagination = relayStylePagination;\nexports.removeArgumentsFromDocument = removeArgumentsFromDocument;\nexports.removeClientSetsFromDocument = removeClientSetsFromDocument;\nexports.removeConnectionDirectiveFromDocument = removeConnectionDirectiveFromDocument;\nexports.removeDirectivesFromDocument = removeDirectivesFromDocument;\nexports.removeFragmentSpreadFromDocument = removeFragmentSpreadFromDocument;\nexports.resultKeyNameFromField = resultKeyNameFromField;\nexports.shouldInclude = shouldInclude;\nexports.storeKeyNameFromField = storeKeyNameFromField;\nexports.stringifyForDisplay = stringifyForDisplay;\nexports.stripTypename = stripTypename;\nexports.valueToObjectRepresentation = valueToObjectRepresentation;\nexports.wrapPromiseWithState = wrapPromiseWithState;\n//# sourceMappingURL=utilities.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL3V0aWxpdGllcy5janMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxjQUFjLG1CQUFPLENBQUMsb0ZBQVc7QUFDakMsY0FBYyxtQkFBTyxDQUFDLHNEQUFTO0FBQy9CLFdBQVcsbUJBQU8sQ0FBQyxnRUFBVztBQUM5QixZQUFZLG1CQUFPLENBQUMsdURBQU87QUFDM0IsYUFBYSxtQkFBTyxDQUFDLG9FQUFhO0FBQ2xDLGVBQWUsbUJBQU8sQ0FBQyw4REFBVTtBQUNqQyxzQkFBc0IsbUJBQU8sQ0FBQywyRUFBbUI7QUFDakQsbUJBQU8sQ0FBQyw4RUFBbUI7O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw4Q0FBOEM7QUFDeEUsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQyxzRUFBc0U7QUFDdkc7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELHVDQUF1QztBQUMxRjtBQUNBLDRCQUE0QixtREFBbUQ7QUFDL0U7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsZUFBZTtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLHlCQUF5QjtBQUN6QjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQzs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBLDREQUE0RCx5QkFBeUI7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELGdCQUFnQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELHlCQUF5QjtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQix5Q0FBeUM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLDRCQUE0QixzQkFBc0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsZ0JBQWdCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGNBQWM7QUFDL0Q7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsVUFBVSxjQUFjLEtBQUssMEJBQTBCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxVQUFVLGNBQWM7QUFDeEI7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQSwrQ0FBK0MsNENBQTRDO0FBQzNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxtREFBbUQ7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsUUFBUTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsaUNBQWlDO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELFdBQVc7QUFDMUU7QUFDQSw2QkFBNkIsR0FBRztBQUNoQztBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxtQ0FBbUM7QUFDNUY7QUFDQTtBQUNBLHVEQUF1RCxXQUFXLHFHQUFxRztBQUN2SyxhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTCxDQUFDO0FBQ0Q7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxrQ0FBa0M7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQSxpRUFBaUUsaURBQWlEO0FBQ2xILHlCQUF5QjtBQUN6Qiw4QkFBOEI7QUFDOUIsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsMkVBQTJFLDBCQUEwQjtBQUNyRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLHNDQUFzQztBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixjQUFjO0FBQ3hDLDhCQUE4QixjQUFjO0FBQzVDLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxXQUFXLG9CQUFvQjtBQUN0RixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsMkNBQTJDO0FBQ3BGO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsdUJBQXVCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixXQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHVCQUF1QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMseUNBQXlDO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxxQkFBcUI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUMsbURBQW1ELDBCQUEwQix3REFBd0Q7QUFDckkseUdBQXlHLEdBQUc7QUFDNUcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0Qsb0NBQW9DO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QscUNBQXFDO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLGdEQUFnRCxrQ0FBa0M7QUFDcEosU0FBUztBQUNUO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1Q0FBdUMsc0RBQXNEO0FBQzdGLGlEQUFpRCwrQkFBK0I7QUFDaEY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsNkJBQTZCO0FBQ3JGLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRkFBMEYsK0JBQStCLHFCQUFxQiwrQkFBK0I7QUFDN0s7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsNkJBQTZCO0FBQzlFLGFBQWE7QUFDYjtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0EsK0NBQStDLG1DQUFtQztBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCwyQkFBMkI7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCwyQkFBMkI7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxxREFBcUQ7QUFDekc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQywrQkFBK0I7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELCtCQUErQjtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFFBQVE7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQix1QkFBdUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNELEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLFdBQVc7QUFDWCxhQUFhO0FBQ2Isa0JBQWtCO0FBQ2xCLDhCQUE4QjtBQUM5Qiw0QkFBNEI7QUFDNUIsZUFBZTtBQUNmLGtCQUFrQjtBQUNsQix5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLGdDQUFnQztBQUNoQyxnQkFBZ0I7QUFDaEIsa0NBQWtDO0FBQ2xDLGtCQUFrQjtBQUNsQixpQ0FBaUM7QUFDakMsaUJBQWlCO0FBQ2pCLDBCQUEwQjtBQUMxQixvQkFBb0I7QUFDcEIscUJBQXFCO0FBQ3JCLHFCQUFxQjtBQUNyQiwwQkFBMEI7QUFDMUIscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixlQUFlO0FBQ2Ysd0JBQXdCO0FBQ3hCLHlCQUF5QjtBQUN6Qiw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCLDZCQUE2QjtBQUM3Qix3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3Qiw4QkFBOEI7QUFDOUIsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQyxrQ0FBa0M7QUFDbEMsOEJBQThCO0FBQzlCLHlCQUF5QjtBQUN6Qiw4QkFBOEI7QUFDOUIsd0JBQXdCO0FBQ3hCLDBCQUEwQjtBQUMxQix1QkFBdUI7QUFDdkIsNkJBQTZCO0FBQzdCLDZCQUE2QjtBQUM3Qix3QkFBd0I7QUFDeEIsd0JBQXdCO0FBQ3hCLHdCQUF3QjtBQUN4QixxQkFBcUI7QUFDckIsNkJBQTZCO0FBQzdCLGVBQWU7QUFDZixzQkFBc0I7QUFDdEIseUNBQXlDO0FBQ3pDLHFDQUFxQztBQUNyQyw4QkFBOEI7QUFDOUIsZUFBZTtBQUNmLHdCQUF3QjtBQUN4QiwyQkFBMkI7QUFDM0IsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2QixxQkFBcUI7QUFDckIsd0JBQXdCO0FBQ3hCLG1CQUFtQjtBQUNuQix5QkFBeUI7QUFDekIsK0JBQStCO0FBQy9CLDhCQUE4QjtBQUM5QixxQkFBcUI7QUFDckIsb0JBQW9CO0FBQ3BCLHVCQUF1QjtBQUN2QixpQkFBaUI7QUFDakIsc0JBQXNCO0FBQ3RCLDRCQUE0QjtBQUM1QixvQkFBb0I7QUFDcEIsNkJBQTZCO0FBQzdCLGdCQUFnQjtBQUNoQixhQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLG1DQUFtQztBQUNuQyxvQ0FBb0M7QUFDcEMsNkNBQTZDO0FBQzdDLG9DQUFvQztBQUNwQyx3Q0FBd0M7QUFDeEMsOEJBQThCO0FBQzlCLHFCQUFxQjtBQUNyQiw2QkFBNkI7QUFDN0IsMkJBQTJCO0FBQzNCLHFCQUFxQjtBQUNyQixtQ0FBbUM7QUFDbkMsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXp1cm8tYmV0dGluZy1hcHAvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL3V0aWxpdGllcy5janM/Mzc1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBnbG9iYWxzID0gcmVxdWlyZSgnLi9nbG9iYWxzJyk7XG52YXIgZ3JhcGhxbCA9IHJlcXVpcmUoJ2dyYXBocWwnKTtcbnZhciB0cmllID0gcmVxdWlyZSgnQHdyeS90cmllJyk7XG52YXIgdHNsaWIgPSByZXF1aXJlKCd0c2xpYicpO1xudmFyIGNhY2hlcyA9IHJlcXVpcmUoJ0B3cnkvY2FjaGVzJyk7XG52YXIgb3B0aW1pc20gPSByZXF1aXJlKCdvcHRpbWlzbScpO1xudmFyIHplbk9ic2VydmFibGVUcyA9IHJlcXVpcmUoJ3plbi1vYnNlcnZhYmxlLXRzJyk7XG5yZXF1aXJlKCdzeW1ib2wtb2JzZXJ2YWJsZScpO1xuXG5mdW5jdGlvbiBzaG91bGRJbmNsdWRlKF9hLCB2YXJpYWJsZXMpIHtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IF9hLmRpcmVjdGl2ZXM7XG4gICAgaWYgKCFkaXJlY3RpdmVzIHx8ICFkaXJlY3RpdmVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGdldEluY2x1c2lvbkRpcmVjdGl2ZXMoZGlyZWN0aXZlcykuZXZlcnkoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSBfYS5kaXJlY3RpdmUsIGlmQXJndW1lbnQgPSBfYS5pZkFyZ3VtZW50O1xuICAgICAgICB2YXIgZXZhbGVkVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGlmQXJndW1lbnQudmFsdWUua2luZCA9PT0gXCJWYXJpYWJsZVwiKSB7XG4gICAgICAgICAgICBldmFsZWRWYWx1ZSA9XG4gICAgICAgICAgICAgICAgdmFyaWFibGVzICYmIHZhcmlhYmxlc1tpZkFyZ3VtZW50LnZhbHVlLm5hbWUudmFsdWVdO1xuICAgICAgICAgICAgZ2xvYmFscy5pbnZhcmlhbnQoZXZhbGVkVmFsdWUgIT09IHZvaWQgMCwgNjcsIGRpcmVjdGl2ZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV2YWxlZFZhbHVlID0gaWZBcmd1bWVudC52YWx1ZS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlLm5hbWUudmFsdWUgPT09IFwic2tpcFwiID8gIWV2YWxlZFZhbHVlIDogZXZhbGVkVmFsdWU7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBnZXREaXJlY3RpdmVOYW1lcyhyb290KSB7XG4gICAgdmFyIG5hbWVzID0gW107XG4gICAgZ3JhcGhxbC52aXNpdChyb290LCB7XG4gICAgICAgIERpcmVjdGl2ZTogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIG5hbWVzLnB1c2gobm9kZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gbmFtZXM7XG59XG52YXIgaGFzQW55RGlyZWN0aXZlcyA9IGZ1bmN0aW9uIChuYW1lcywgcm9vdCkge1xuICAgIHJldHVybiBoYXNEaXJlY3RpdmVzKG5hbWVzLCByb290LCBmYWxzZSk7XG59O1xudmFyIGhhc0FsbERpcmVjdGl2ZXMgPSBmdW5jdGlvbiAobmFtZXMsIHJvb3QpIHtcbiAgICByZXR1cm4gaGFzRGlyZWN0aXZlcyhuYW1lcywgcm9vdCwgdHJ1ZSk7XG59O1xuZnVuY3Rpb24gaGFzRGlyZWN0aXZlcyhuYW1lcywgcm9vdCwgYWxsKSB7XG4gICAgdmFyIG5hbWVTZXQgPSBuZXcgU2V0KG5hbWVzKTtcbiAgICB2YXIgdW5pcXVlQ291bnQgPSBuYW1lU2V0LnNpemU7XG4gICAgZ3JhcGhxbC52aXNpdChyb290LCB7XG4gICAgICAgIERpcmVjdGl2ZTogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChuYW1lU2V0LmRlbGV0ZShub2RlLm5hbWUudmFsdWUpICYmICghYWxsIHx8ICFuYW1lU2V0LnNpemUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdyYXBocWwuQlJFQUs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGFsbCA/ICFuYW1lU2V0LnNpemUgOiBuYW1lU2V0LnNpemUgPCB1bmlxdWVDb3VudDtcbn1cbmZ1bmN0aW9uIGhhc0NsaWVudEV4cG9ydHMoZG9jdW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQgJiYgaGFzRGlyZWN0aXZlcyhbXCJjbGllbnRcIiwgXCJleHBvcnRcIl0sIGRvY3VtZW50LCB0cnVlKTtcbn1cbmZ1bmN0aW9uIGlzSW5jbHVzaW9uRGlyZWN0aXZlKF9hKSB7XG4gICAgdmFyIHZhbHVlID0gX2EubmFtZS52YWx1ZTtcbiAgICByZXR1cm4gdmFsdWUgPT09IFwic2tpcFwiIHx8IHZhbHVlID09PSBcImluY2x1ZGVcIjtcbn1cbmZ1bmN0aW9uIGdldEluY2x1c2lvbkRpcmVjdGl2ZXMoZGlyZWN0aXZlcykge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBpZiAoZGlyZWN0aXZlcyAmJiBkaXJlY3RpdmVzLmxlbmd0aCkge1xuICAgICAgICBkaXJlY3RpdmVzLmZvckVhY2goZnVuY3Rpb24gKGRpcmVjdGl2ZSkge1xuICAgICAgICAgICAgaWYgKCFpc0luY2x1c2lvbkRpcmVjdGl2ZShkaXJlY3RpdmUpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBkaXJlY3RpdmVBcmd1bWVudHMgPSBkaXJlY3RpdmUuYXJndW1lbnRzO1xuICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmUubmFtZS52YWx1ZTtcbiAgICAgICAgICAgIGdsb2JhbHMuaW52YXJpYW50KGRpcmVjdGl2ZUFyZ3VtZW50cyAmJiBkaXJlY3RpdmVBcmd1bWVudHMubGVuZ3RoID09PSAxLCA2OCwgZGlyZWN0aXZlTmFtZSk7XG4gICAgICAgICAgICB2YXIgaWZBcmd1bWVudCA9IGRpcmVjdGl2ZUFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIGdsb2JhbHMuaW52YXJpYW50KGlmQXJndW1lbnQubmFtZSAmJiBpZkFyZ3VtZW50Lm5hbWUudmFsdWUgPT09IFwiaWZcIiwgNjksIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgICAgICAgdmFyIGlmVmFsdWUgPSBpZkFyZ3VtZW50LnZhbHVlO1xuICAgICAgICAgICAgZ2xvYmFscy5pbnZhcmlhbnQoaWZWYWx1ZSAmJlxuICAgICAgICAgICAgICAgIChpZlZhbHVlLmtpbmQgPT09IFwiVmFyaWFibGVcIiB8fCBpZlZhbHVlLmtpbmQgPT09IFwiQm9vbGVhblZhbHVlXCIpLCA3MCwgZGlyZWN0aXZlTmFtZSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7IGRpcmVjdGl2ZTogZGlyZWN0aXZlLCBpZkFyZ3VtZW50OiBpZkFyZ3VtZW50IH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIGNhblVzZVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgIWdsb2JhbHMubWF5YmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF2aWdhdG9yLnByb2R1Y3QgPT0gXCJSZWFjdE5hdGl2ZVwiICYmICFnbG9iYWwuSGVybWVzSW50ZXJuYWw7IH0pO1xudmFyIGNhblVzZVdlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gXCJmdW5jdGlvblwiO1xudmFyIGNhblVzZVN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLmZvciA9PT0gXCJmdW5jdGlvblwiO1xudmFyIGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgPSBjYW5Vc2VTeW1ib2wgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3I7XG52YXIgY2FuVXNlRE9NID0gdHlwZW9mIGdsb2JhbHMubWF5YmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQ7IH0pID09PSBcImZ1bmN0aW9uXCI7XG52YXIgdXNpbmdKU0RPTSA9XG5nbG9iYWxzLm1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcImpzZG9tXCIpID49IDA7IH0pIHx8IGZhbHNlO1xudmFyIGNhblVzZUxheW91dEVmZmVjdCA9IGNhblVzZURPTSAmJiAhdXNpbmdKU0RPTTtcblxuZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KG9iaikge1xuICAgIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIjtcbn1cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIChvYmogIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IE9iamVjdC5wcm90b3R5cGUgfHxcbiAgICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBudWxsKSk7XG59XG5cbmZ1bmN0aW9uIGdldEZyYWdtZW50UXVlcnlEb2N1bWVudChkb2N1bWVudCwgZnJhZ21lbnROYW1lKSB7XG4gICAgdmFyIGFjdHVhbEZyYWdtZW50TmFtZSA9IGZyYWdtZW50TmFtZTtcbiAgICB2YXIgZnJhZ21lbnRzID0gW107XG4gICAgZG9jdW1lbnQuZGVmaW5pdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoZGVmaW5pdGlvbikge1xuICAgICAgICBpZiAoZGVmaW5pdGlvbi5raW5kID09PSBcIk9wZXJhdGlvbkRlZmluaXRpb25cIikge1xuICAgICAgICAgICAgdGhyb3cgZ2xvYmFscy5uZXdJbnZhcmlhbnRFcnJvcihcbiAgICAgICAgICAgICAgICA3MSxcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uLm9wZXJhdGlvbixcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPyBcIiBuYW1lZCAnXCIuY29uY2F0KGRlZmluaXRpb24ubmFtZS52YWx1ZSwgXCInXCIpIDogXCJcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5pdGlvbi5raW5kID09PSBcIkZyYWdtZW50RGVmaW5pdGlvblwiKSB7XG4gICAgICAgICAgICBmcmFnbWVudHMucHVzaChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgYWN0dWFsRnJhZ21lbnROYW1lID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGdsb2JhbHMuaW52YXJpYW50KGZyYWdtZW50cy5sZW5ndGggPT09IDEsIDcyLCBmcmFnbWVudHMubGVuZ3RoKTtcbiAgICAgICAgYWN0dWFsRnJhZ21lbnROYW1lID0gZnJhZ21lbnRzWzBdLm5hbWUudmFsdWU7XG4gICAgfVxuICAgIHZhciBxdWVyeSA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBkb2N1bWVudCksIHsgZGVmaW5pdGlvbnM6IHRzbGliLl9fc3ByZWFkQXJyYXkoW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGtpbmQ6IFwiT3BlcmF0aW9uRGVmaW5pdGlvblwiLFxuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJxdWVyeVwiLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvblNldDoge1xuICAgICAgICAgICAgICAgICAgICBraW5kOiBcIlNlbGVjdGlvblNldFwiLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2luZDogXCJGcmFnbWVudFNwcmVhZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2luZDogXCJOYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBhY3R1YWxGcmFnbWVudE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSwgZG9jdW1lbnQuZGVmaW5pdGlvbnMsIHRydWUpIH0pO1xuICAgIHJldHVybiBxdWVyeTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50TWFwKGZyYWdtZW50cykge1xuICAgIGlmIChmcmFnbWVudHMgPT09IHZvaWQgMCkgeyBmcmFnbWVudHMgPSBbXTsgfVxuICAgIHZhciBzeW1UYWJsZSA9IHt9O1xuICAgIGZyYWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnbWVudCkge1xuICAgICAgICBzeW1UYWJsZVtmcmFnbWVudC5uYW1lLnZhbHVlXSA9IGZyYWdtZW50O1xuICAgIH0pO1xuICAgIHJldHVybiBzeW1UYWJsZTtcbn1cbmZ1bmN0aW9uIGdldEZyYWdtZW50RnJvbVNlbGVjdGlvbihzZWxlY3Rpb24sIGZyYWdtZW50TWFwKSB7XG4gICAgc3dpdGNoIChzZWxlY3Rpb24ua2luZCkge1xuICAgICAgICBjYXNlIFwiSW5saW5lRnJhZ21lbnRcIjpcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb247XG4gICAgICAgIGNhc2UgXCJGcmFnbWVudFNwcmVhZFwiOiB7XG4gICAgICAgICAgICB2YXIgZnJhZ21lbnROYW1lID0gc2VsZWN0aW9uLm5hbWUudmFsdWU7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZyYWdtZW50TWFwID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnJhZ21lbnRNYXAoZnJhZ21lbnROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBmcmFnbWVudCA9IGZyYWdtZW50TWFwICYmIGZyYWdtZW50TWFwW2ZyYWdtZW50TmFtZV07XG4gICAgICAgICAgICBnbG9iYWxzLmludmFyaWFudChmcmFnbWVudCwgNzMsIGZyYWdtZW50TmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gZnJhZ21lbnQgfHwgbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG52YXIgc2NoZWR1bGVkQ2xlYW51cCA9IG5ldyBXZWFrU2V0KCk7XG5mdW5jdGlvbiBzY2hlZHVsZShjYWNoZSkge1xuICAgIGlmICghc2NoZWR1bGVkQ2xlYW51cC5oYXMoY2FjaGUpKSB7XG4gICAgICAgIHNjaGVkdWxlZENsZWFudXAuYWRkKGNhY2hlKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjYWNoZS5jbGVhbigpO1xuICAgICAgICAgICAgc2NoZWR1bGVkQ2xlYW51cC5kZWxldGUoY2FjaGUpO1xuICAgICAgICB9LCAxMDApO1xuICAgIH1cbn1cbnZhciBBdXRvQ2xlYW5lZFdlYWtDYWNoZSA9IGZ1bmN0aW9uIChtYXgsIGRpc3Bvc2UpIHtcbiAgICB2YXIgY2FjaGUgPSBuZXcgY2FjaGVzLldlYWtDYWNoZShtYXgsIGRpc3Bvc2UpO1xuICAgIGNhY2hlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHNjaGVkdWxlKHRoaXMpO1xuICAgICAgICByZXR1cm4gY2FjaGVzLldlYWtDYWNoZS5wcm90b3R5cGUuc2V0LmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gY2FjaGU7XG59O1xudmFyIEF1dG9DbGVhbmVkU3Ryb25nQ2FjaGUgPSBmdW5jdGlvbiAobWF4LCBkaXNwb3NlKSB7XG4gICAgdmFyIGNhY2hlID0gbmV3IGNhY2hlcy5TdHJvbmdDYWNoZShtYXgsIGRpc3Bvc2UpO1xuICAgIGNhY2hlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHNjaGVkdWxlKHRoaXMpO1xuICAgICAgICByZXR1cm4gY2FjaGVzLlN0cm9uZ0NhY2hlLnByb3RvdHlwZS5zZXQuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBjYWNoZTtcbn07XG5cbnZhciBjYWNoZVNpemVTeW1ib2wgPSBTeW1ib2wuZm9yKFwiYXBvbGxvLmNhY2hlU2l6ZVwiKTtcbnZhciBjYWNoZVNpemVzID0gdHNsaWIuX19hc3NpZ24oe30sIGdsb2JhbHMuZ2xvYmFsW2NhY2hlU2l6ZVN5bWJvbF0pO1xuXG52YXIgZ2xvYmFsQ2FjaGVzID0ge307XG5mdW5jdGlvbiByZWdpc3Rlckdsb2JhbENhY2hlKG5hbWUsIGdldFNpemUpIHtcbiAgICBnbG9iYWxDYWNoZXNbbmFtZV0gPSBnZXRTaXplO1xufVxuXG52YXIgY2Fub25pY2FsU3RyaW5naWZ5ID0gT2JqZWN0LmFzc2lnbihmdW5jdGlvbiBjYW5vbmljYWxTdHJpbmdpZnkodmFsdWUpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUsIHN0YWJsZU9iamVjdFJlcGxhY2VyKTtcbn0sIHtcbiAgICByZXNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBzb3J0aW5nTWFwID0gbmV3IEF1dG9DbGVhbmVkU3Ryb25nQ2FjaGUoY2FjaGVTaXplcy5jYW5vbmljYWxTdHJpbmdpZnkgfHwgMTAwMCApO1xuICAgIH0sXG59KTtcbmlmIChnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlKSB7XG4gICAgcmVnaXN0ZXJHbG9iYWxDYWNoZShcImNhbm9uaWNhbFN0cmluZ2lmeVwiLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzb3J0aW5nTWFwLnNpemU7IH0pO1xufVxudmFyIHNvcnRpbmdNYXA7XG5jYW5vbmljYWxTdHJpbmdpZnkucmVzZXQoKTtcbmZ1bmN0aW9uIHN0YWJsZU9iamVjdFJlcGxhY2VyKGtleSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XG4gICAgICAgIGlmIChwcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBwcm90byA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoa2V5cy5ldmVyeShldmVyeUtleUluT3JkZXIpKVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIHZhciB1bnNvcnRlZEtleSA9IEpTT04uc3RyaW5naWZ5KGtleXMpO1xuICAgICAgICAgICAgdmFyIHNvcnRlZEtleXMgPSBzb3J0aW5nTWFwLmdldCh1bnNvcnRlZEtleSk7XG4gICAgICAgICAgICBpZiAoIXNvcnRlZEtleXMpIHtcbiAgICAgICAgICAgICAgICBrZXlzLnNvcnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgc29ydGVkS2V5ID0gSlNPTi5zdHJpbmdpZnkoa2V5cyk7XG4gICAgICAgICAgICAgICAgc29ydGVkS2V5cyA9IHNvcnRpbmdNYXAuZ2V0KHNvcnRlZEtleSkgfHwga2V5cztcbiAgICAgICAgICAgICAgICBzb3J0aW5nTWFwLnNldCh1bnNvcnRlZEtleSwgc29ydGVkS2V5cyk7XG4gICAgICAgICAgICAgICAgc29ydGluZ01hcC5zZXQoc29ydGVkS2V5LCBzb3J0ZWRLZXlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzb3J0ZWRPYmplY3RfMSA9IE9iamVjdC5jcmVhdGUocHJvdG8pO1xuICAgICAgICAgICAgc29ydGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICBzb3J0ZWRPYmplY3RfMVtrZXldID0gdmFsdWVba2V5XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRlZE9iamVjdF8xO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGV2ZXJ5S2V5SW5PcmRlcihrZXksIGksIGtleXMpIHtcbiAgICByZXR1cm4gaSA9PT0gMCB8fCBrZXlzW2kgLSAxXSA8PSBrZXk7XG59XG5cbmZ1bmN0aW9uIG1ha2VSZWZlcmVuY2UoaWQpIHtcbiAgICByZXR1cm4geyBfX3JlZjogU3RyaW5nKGlkKSB9O1xufVxuZnVuY3Rpb24gaXNSZWZlcmVuY2Uob2JqKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4ob2JqICYmIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iai5fX3JlZiA9PT0gXCJzdHJpbmdcIik7XG59XG5mdW5jdGlvbiBpc0RvY3VtZW50Tm9kZSh2YWx1ZSkge1xuICAgIHJldHVybiAoaXNOb25OdWxsT2JqZWN0KHZhbHVlKSAmJlxuICAgICAgICB2YWx1ZS5raW5kID09PSBcIkRvY3VtZW50XCIgJiZcbiAgICAgICAgQXJyYXkuaXNBcnJheSh2YWx1ZS5kZWZpbml0aW9ucykpO1xufVxuZnVuY3Rpb24gaXNTdHJpbmdWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5raW5kID09PSBcIlN0cmluZ1ZhbHVlXCI7XG59XG5mdW5jdGlvbiBpc0Jvb2xlYW5WYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5raW5kID09PSBcIkJvb2xlYW5WYWx1ZVwiO1xufVxuZnVuY3Rpb24gaXNJbnRWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5raW5kID09PSBcIkludFZhbHVlXCI7XG59XG5mdW5jdGlvbiBpc0Zsb2F0VmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUua2luZCA9PT0gXCJGbG9hdFZhbHVlXCI7XG59XG5mdW5jdGlvbiBpc1ZhcmlhYmxlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLmtpbmQgPT09IFwiVmFyaWFibGVcIjtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0VmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUua2luZCA9PT0gXCJPYmplY3RWYWx1ZVwiO1xufVxuZnVuY3Rpb24gaXNMaXN0VmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUua2luZCA9PT0gXCJMaXN0VmFsdWVcIjtcbn1cbmZ1bmN0aW9uIGlzRW51bVZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLmtpbmQgPT09IFwiRW51bVZhbHVlXCI7XG59XG5mdW5jdGlvbiBpc051bGxWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5raW5kID09PSBcIk51bGxWYWx1ZVwiO1xufVxuZnVuY3Rpb24gdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKGFyZ09iaiwgbmFtZSwgdmFsdWUsIHZhcmlhYmxlcykge1xuICAgIGlmIChpc0ludFZhbHVlKHZhbHVlKSB8fCBpc0Zsb2F0VmFsdWUodmFsdWUpKSB7XG4gICAgICAgIGFyZ09ialtuYW1lLnZhbHVlXSA9IE51bWJlcih2YWx1ZS52YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQm9vbGVhblZhbHVlKHZhbHVlKSB8fCBpc1N0cmluZ1ZhbHVlKHZhbHVlKSkge1xuICAgICAgICBhcmdPYmpbbmFtZS52YWx1ZV0gPSB2YWx1ZS52YWx1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYmplY3RWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG5lc3RlZEFyZ09ial8xID0ge307XG4gICAgICAgIHZhbHVlLmZpZWxkcy5tYXAoZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlVG9PYmplY3RSZXByZXNlbnRhdGlvbihuZXN0ZWRBcmdPYmpfMSwgb2JqLm5hbWUsIG9iai52YWx1ZSwgdmFyaWFibGVzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFyZ09ialtuYW1lLnZhbHVlXSA9IG5lc3RlZEFyZ09ial8xO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1ZhcmlhYmxlKHZhbHVlKSkge1xuICAgICAgICB2YXIgdmFyaWFibGVWYWx1ZSA9ICh2YXJpYWJsZXMgfHwge30pW3ZhbHVlLm5hbWUudmFsdWVdO1xuICAgICAgICBhcmdPYmpbbmFtZS52YWx1ZV0gPSB2YXJpYWJsZVZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0xpc3RWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgYXJnT2JqW25hbWUudmFsdWVdID0gdmFsdWUudmFsdWVzLm1hcChmdW5jdGlvbiAobGlzdFZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgbmVzdGVkQXJnQXJyYXlPYmogPSB7fTtcbiAgICAgICAgICAgIHZhbHVlVG9PYmplY3RSZXByZXNlbnRhdGlvbihuZXN0ZWRBcmdBcnJheU9iaiwgbmFtZSwgbGlzdFZhbHVlLCB2YXJpYWJsZXMpO1xuICAgICAgICAgICAgcmV0dXJuIG5lc3RlZEFyZ0FycmF5T2JqW25hbWUudmFsdWVdO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNFbnVtVmFsdWUodmFsdWUpKSB7XG4gICAgICAgIGFyZ09ialtuYW1lLnZhbHVlXSA9IHZhbHVlLnZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc051bGxWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgYXJnT2JqW25hbWUudmFsdWVdID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IGdsb2JhbHMubmV3SW52YXJpYW50RXJyb3IoODIsIG5hbWUudmFsdWUsIHZhbHVlLmtpbmQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN0b3JlS2V5TmFtZUZyb21GaWVsZChmaWVsZCwgdmFyaWFibGVzKSB7XG4gICAgdmFyIGRpcmVjdGl2ZXNPYmogPSBudWxsO1xuICAgIGlmIChmaWVsZC5kaXJlY3RpdmVzKSB7XG4gICAgICAgIGRpcmVjdGl2ZXNPYmogPSB7fTtcbiAgICAgICAgZmllbGQuZGlyZWN0aXZlcy5mb3JFYWNoKGZ1bmN0aW9uIChkaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIGRpcmVjdGl2ZXNPYmpbZGlyZWN0aXZlLm5hbWUudmFsdWVdID0ge307XG4gICAgICAgICAgICBpZiAoZGlyZWN0aXZlLmFyZ3VtZW50cykge1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5hcmd1bWVudHMuZm9yRWFjaChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBfYS5uYW1lLCB2YWx1ZSA9IF9hLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKGRpcmVjdGl2ZXNPYmpbZGlyZWN0aXZlLm5hbWUudmFsdWVdLCBuYW1lLCB2YWx1ZSwgdmFyaWFibGVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBhcmdPYmogPSBudWxsO1xuICAgIGlmIChmaWVsZC5hcmd1bWVudHMgJiYgZmllbGQuYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICBhcmdPYmogPSB7fTtcbiAgICAgICAgZmllbGQuYXJndW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IF9hLm5hbWUsIHZhbHVlID0gX2EudmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKGFyZ09iaiwgbmFtZSwgdmFsdWUsIHZhcmlhYmxlcyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0U3RvcmVLZXlOYW1lKGZpZWxkLm5hbWUudmFsdWUsIGFyZ09iaiwgZGlyZWN0aXZlc09iaik7XG59XG52YXIgS05PV05fRElSRUNUSVZFUyA9IFtcbiAgICBcImNvbm5lY3Rpb25cIixcbiAgICBcImluY2x1ZGVcIixcbiAgICBcInNraXBcIixcbiAgICBcImNsaWVudFwiLFxuICAgIFwicmVzdFwiLFxuICAgIFwiZXhwb3J0XCIsXG4gICAgXCJub25yZWFjdGl2ZVwiLFxuXTtcbnZhciBzdG9yZUtleU5hbWVTdHJpbmdpZnkgPSBjYW5vbmljYWxTdHJpbmdpZnk7XG52YXIgZ2V0U3RvcmVLZXlOYW1lID0gT2JqZWN0LmFzc2lnbihmdW5jdGlvbiAoZmllbGROYW1lLCBhcmdzLCBkaXJlY3RpdmVzKSB7XG4gICAgaWYgKGFyZ3MgJiZcbiAgICAgICAgZGlyZWN0aXZlcyAmJlxuICAgICAgICBkaXJlY3RpdmVzW1wiY29ubmVjdGlvblwiXSAmJlxuICAgICAgICBkaXJlY3RpdmVzW1wiY29ubmVjdGlvblwiXVtcImtleVwiXSkge1xuICAgICAgICBpZiAoZGlyZWN0aXZlc1tcImNvbm5lY3Rpb25cIl1bXCJmaWx0ZXJcIl0gJiZcbiAgICAgICAgICAgIGRpcmVjdGl2ZXNbXCJjb25uZWN0aW9uXCJdW1wiZmlsdGVyXCJdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJLZXlzID0gZGlyZWN0aXZlc1tcImNvbm5lY3Rpb25cIl1bXCJmaWx0ZXJcIl0gP1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXNbXCJjb25uZWN0aW9uXCJdW1wiZmlsdGVyXCJdXG4gICAgICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgICAgIGZpbHRlcktleXMuc29ydCgpO1xuICAgICAgICAgICAgdmFyIGZpbHRlcmVkQXJnc18xID0ge307XG4gICAgICAgICAgICBmaWx0ZXJLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkQXJnc18xW2tleV0gPSBhcmdzW2tleV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChkaXJlY3RpdmVzW1wiY29ubmVjdGlvblwiXVtcImtleVwiXSwgXCIoXCIpLmNvbmNhdChzdG9yZUtleU5hbWVTdHJpbmdpZnkoZmlsdGVyZWRBcmdzXzEpLCBcIilcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGlyZWN0aXZlc1tcImNvbm5lY3Rpb25cIl1bXCJrZXlcIl07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNvbXBsZXRlRmllbGROYW1lID0gZmllbGROYW1lO1xuICAgIGlmIChhcmdzKSB7XG4gICAgICAgIHZhciBzdHJpbmdpZmllZEFyZ3MgPSBzdG9yZUtleU5hbWVTdHJpbmdpZnkoYXJncyk7XG4gICAgICAgIGNvbXBsZXRlRmllbGROYW1lICs9IFwiKFwiLmNvbmNhdChzdHJpbmdpZmllZEFyZ3MsIFwiKVwiKTtcbiAgICB9XG4gICAgaWYgKGRpcmVjdGl2ZXMpIHtcbiAgICAgICAgT2JqZWN0LmtleXMoZGlyZWN0aXZlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoS05PV05fRElSRUNUSVZFUy5pbmRleE9mKGtleSkgIT09IC0xKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmIChkaXJlY3RpdmVzW2tleV0gJiYgT2JqZWN0LmtleXMoZGlyZWN0aXZlc1trZXldKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZUZpZWxkTmFtZSArPSBcIkBcIi5jb25jYXQoa2V5LCBcIihcIikuY29uY2F0KHN0b3JlS2V5TmFtZVN0cmluZ2lmeShkaXJlY3RpdmVzW2tleV0pLCBcIilcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZUZpZWxkTmFtZSArPSBcIkBcIi5jb25jYXQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjb21wbGV0ZUZpZWxkTmFtZTtcbn0sIHtcbiAgICBzZXRTdHJpbmdpZnk6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHZhciBwcmV2aW91cyA9IHN0b3JlS2V5TmFtZVN0cmluZ2lmeTtcbiAgICAgICAgc3RvcmVLZXlOYW1lU3RyaW5naWZ5ID0gcztcbiAgICAgICAgcmV0dXJuIHByZXZpb3VzO1xuICAgIH0sXG59KTtcbmZ1bmN0aW9uIGFyZ3VtZW50c09iamVjdEZyb21GaWVsZChmaWVsZCwgdmFyaWFibGVzKSB7XG4gICAgaWYgKGZpZWxkLmFyZ3VtZW50cyAmJiBmaWVsZC5hcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcmdPYmpfMSA9IHt9O1xuICAgICAgICBmaWVsZC5hcmd1bWVudHMuZm9yRWFjaChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gX2EubmFtZSwgdmFsdWUgPSBfYS52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVRvT2JqZWN0UmVwcmVzZW50YXRpb24oYXJnT2JqXzEsIG5hbWUsIHZhbHVlLCB2YXJpYWJsZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFyZ09ial8xO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHJlc3VsdEtleU5hbWVGcm9tRmllbGQoZmllbGQpIHtcbiAgICByZXR1cm4gZmllbGQuYWxpYXMgPyBmaWVsZC5hbGlhcy52YWx1ZSA6IGZpZWxkLm5hbWUudmFsdWU7XG59XG5mdW5jdGlvbiBnZXRUeXBlbmFtZUZyb21SZXN1bHQocmVzdWx0LCBzZWxlY3Rpb25TZXQsIGZyYWdtZW50TWFwKSB7XG4gICAgdmFyIGZyYWdtZW50cztcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBzZWxlY3Rpb24gPSBfYVtfaV07XG4gICAgICAgIGlmIChpc0ZpZWxkKHNlbGVjdGlvbikpIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb24ubmFtZS52YWx1ZSA9PT0gXCJfX3R5cGVuYW1lXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0W3Jlc3VsdEtleU5hbWVGcm9tRmllbGQoc2VsZWN0aW9uKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZnJhZ21lbnRzKSB7XG4gICAgICAgICAgICBmcmFnbWVudHMucHVzaChzZWxlY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZnJhZ21lbnRzID0gW3NlbGVjdGlvbl07XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHQuX190eXBlbmFtZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gcmVzdWx0Ll9fdHlwZW5hbWU7XG4gICAgfVxuICAgIGlmIChmcmFnbWVudHMpIHtcbiAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBmcmFnbWVudHNfMSA9IGZyYWdtZW50czsgX2IgPCBmcmFnbWVudHNfMS5sZW5ndGg7IF9iKyspIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSBmcmFnbWVudHNfMVtfYl07XG4gICAgICAgICAgICB2YXIgdHlwZW5hbWUgPSBnZXRUeXBlbmFtZUZyb21SZXN1bHQocmVzdWx0LCBnZXRGcmFnbWVudEZyb21TZWxlY3Rpb24oc2VsZWN0aW9uLCBmcmFnbWVudE1hcCkuc2VsZWN0aW9uU2V0LCBmcmFnbWVudE1hcCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHR5cGVuYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaXNGaWVsZChzZWxlY3Rpb24pIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uLmtpbmQgPT09IFwiRmllbGRcIjtcbn1cbmZ1bmN0aW9uIGlzSW5saW5lRnJhZ21lbnQoc2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuIHNlbGVjdGlvbi5raW5kID09PSBcIklubGluZUZyYWdtZW50XCI7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRG9jdW1lbnQoZG9jKSB7XG4gICAgZ2xvYmFscy5pbnZhcmlhbnQoZG9jICYmIGRvYy5raW5kID09PSBcIkRvY3VtZW50XCIsIDc0KTtcbiAgICB2YXIgb3BlcmF0aW9ucyA9IGRvYy5kZWZpbml0aW9uc1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmtpbmQgIT09IFwiRnJhZ21lbnREZWZpbml0aW9uXCI7IH0pXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgICAgICAgaWYgKGRlZmluaXRpb24ua2luZCAhPT0gXCJPcGVyYXRpb25EZWZpbml0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IGdsb2JhbHMubmV3SW52YXJpYW50RXJyb3IoNzUsIGRlZmluaXRpb24ua2luZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb247XG4gICAgfSk7XG4gICAgZ2xvYmFscy5pbnZhcmlhbnQob3BlcmF0aW9ucy5sZW5ndGggPD0gMSwgNzYsIG9wZXJhdGlvbnMubGVuZ3RoKTtcbiAgICByZXR1cm4gZG9jO1xufVxuZnVuY3Rpb24gZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihkb2MpIHtcbiAgICBjaGVja0RvY3VtZW50KGRvYyk7XG4gICAgcmV0dXJuIGRvYy5kZWZpbml0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb24ua2luZCA9PT0gXCJPcGVyYXRpb25EZWZpbml0aW9uXCI7XG4gICAgfSlbMF07XG59XG5mdW5jdGlvbiBnZXRPcGVyYXRpb25OYW1lKGRvYykge1xuICAgIHJldHVybiAoZG9jLmRlZmluaXRpb25zXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb24ua2luZCA9PT0gXCJPcGVyYXRpb25EZWZpbml0aW9uXCIgJiYgISFkZWZpbml0aW9uLm5hbWU7XG4gICAgfSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5uYW1lLnZhbHVlOyB9KVswXSB8fCBudWxsKTtcbn1cbmZ1bmN0aW9uIGdldEZyYWdtZW50RGVmaW5pdGlvbnMoZG9jKSB7XG4gICAgcmV0dXJuIGRvYy5kZWZpbml0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb24ua2luZCA9PT0gXCJGcmFnbWVudERlZmluaXRpb25cIjtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldFF1ZXJ5RGVmaW5pdGlvbihkb2MpIHtcbiAgICB2YXIgcXVlcnlEZWYgPSBnZXRPcGVyYXRpb25EZWZpbml0aW9uKGRvYyk7XG4gICAgZ2xvYmFscy5pbnZhcmlhbnQocXVlcnlEZWYgJiYgcXVlcnlEZWYub3BlcmF0aW9uID09PSBcInF1ZXJ5XCIsIDc3KTtcbiAgICByZXR1cm4gcXVlcnlEZWY7XG59XG5mdW5jdGlvbiBnZXRGcmFnbWVudERlZmluaXRpb24oZG9jKSB7XG4gICAgZ2xvYmFscy5pbnZhcmlhbnQoZG9jLmtpbmQgPT09IFwiRG9jdW1lbnRcIiwgNzgpO1xuICAgIGdsb2JhbHMuaW52YXJpYW50KGRvYy5kZWZpbml0aW9ucy5sZW5ndGggPD0gMSwgNzkpO1xuICAgIHZhciBmcmFnbWVudERlZiA9IGRvYy5kZWZpbml0aW9uc1swXTtcbiAgICBnbG9iYWxzLmludmFyaWFudChmcmFnbWVudERlZi5raW5kID09PSBcIkZyYWdtZW50RGVmaW5pdGlvblwiLCA4MCk7XG4gICAgcmV0dXJuIGZyYWdtZW50RGVmO1xufVxuZnVuY3Rpb24gZ2V0TWFpbkRlZmluaXRpb24ocXVlcnlEb2MpIHtcbiAgICBjaGVja0RvY3VtZW50KHF1ZXJ5RG9jKTtcbiAgICB2YXIgZnJhZ21lbnREZWZpbml0aW9uO1xuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBxdWVyeURvYy5kZWZpbml0aW9uczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGRlZmluaXRpb24gPSBfYVtfaV07XG4gICAgICAgIGlmIChkZWZpbml0aW9uLmtpbmQgPT09IFwiT3BlcmF0aW9uRGVmaW5pdGlvblwiKSB7XG4gICAgICAgICAgICB2YXIgb3BlcmF0aW9uID0gZGVmaW5pdGlvbi5vcGVyYXRpb247XG4gICAgICAgICAgICBpZiAob3BlcmF0aW9uID09PSBcInF1ZXJ5XCIgfHxcbiAgICAgICAgICAgICAgICBvcGVyYXRpb24gPT09IFwibXV0YXRpb25cIiB8fFxuICAgICAgICAgICAgICAgIG9wZXJhdGlvbiA9PT0gXCJzdWJzY3JpcHRpb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWZpbml0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZpbml0aW9uLmtpbmQgPT09IFwiRnJhZ21lbnREZWZpbml0aW9uXCIgJiYgIWZyYWdtZW50RGVmaW5pdGlvbikge1xuICAgICAgICAgICAgZnJhZ21lbnREZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnJhZ21lbnREZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiBmcmFnbWVudERlZmluaXRpb247XG4gICAgfVxuICAgIHRocm93IGdsb2JhbHMubmV3SW52YXJpYW50RXJyb3IoODEpO1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlcyhkZWZpbml0aW9uKSB7XG4gICAgdmFyIGRlZmF1bHRWYWx1ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBkZWZzID0gZGVmaW5pdGlvbiAmJiBkZWZpbml0aW9uLnZhcmlhYmxlRGVmaW5pdGlvbnM7XG4gICAgaWYgKGRlZnMgJiYgZGVmcy5sZW5ndGgpIHtcbiAgICAgICAgZGVmcy5mb3JFYWNoKGZ1bmN0aW9uIChkZWYpIHtcbiAgICAgICAgICAgIGlmIChkZWYuZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKGRlZmF1bHRWYWx1ZXMsIGRlZi52YXJpYWJsZS5uYW1lLCBkZWYuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0VmFsdWVzO1xufVxuXG5mdW5jdGlvbiBpZGVudGl0eShkb2N1bWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudDtcbn1cbnZhciBEb2N1bWVudFRyYW5zZm9ybSA9ICAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERvY3VtZW50VHJhbnNmb3JtKHRyYW5zZm9ybSwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpOyB9XG4gICAgICAgIHRoaXMucmVzdWx0Q2FjaGUgPSBjYW5Vc2VXZWFrU2V0ID8gbmV3IFdlYWtTZXQoKSA6IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICAgIGlmIChvcHRpb25zLmdldENhY2hlS2V5KSB7XG4gICAgICAgICAgICB0aGlzLmdldENhY2hlS2V5ID0gb3B0aW9ucy5nZXRDYWNoZUtleTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhY2hlZCA9IG9wdGlvbnMuY2FjaGUgIT09IGZhbHNlO1xuICAgICAgICB0aGlzLnJlc2V0Q2FjaGUoKTtcbiAgICB9XG4gICAgRG9jdW1lbnRUcmFuc2Zvcm0ucHJvdG90eXBlLmdldENhY2hlS2V5ID0gZnVuY3Rpb24gKGRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiBbZG9jdW1lbnRdO1xuICAgIH07XG4gICAgRG9jdW1lbnRUcmFuc2Zvcm0uaWRlbnRpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnRUcmFuc2Zvcm0oaWRlbnRpdHksIHsgY2FjaGU6IGZhbHNlIH0pO1xuICAgIH07XG4gICAgRG9jdW1lbnRUcmFuc2Zvcm0uc3BsaXQgPSBmdW5jdGlvbiAocHJlZGljYXRlLCBsZWZ0LCByaWdodCkge1xuICAgICAgICBpZiAocmlnaHQgPT09IHZvaWQgMCkgeyByaWdodCA9IERvY3VtZW50VHJhbnNmb3JtLmlkZW50aXR5KCk7IH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IERvY3VtZW50VHJhbnNmb3JtKGZ1bmN0aW9uIChkb2N1bWVudCkge1xuICAgICAgICAgICAgdmFyIGRvY3VtZW50VHJhbnNmb3JtID0gcHJlZGljYXRlKGRvY3VtZW50KSA/IGxlZnQgOiByaWdodDtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudFRyYW5zZm9ybS50cmFuc2Zvcm1Eb2N1bWVudChkb2N1bWVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIHsgY2FjaGU6IGZhbHNlIH0pLCB7IGxlZnQ6IGxlZnQsIHJpZ2h0OiByaWdodCB9KTtcbiAgICB9O1xuICAgIERvY3VtZW50VHJhbnNmb3JtLnByb3RvdHlwZS5yZXNldENhY2hlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5jYWNoZWQpIHtcbiAgICAgICAgICAgIHZhciBzdGFibGVDYWNoZUtleXNfMSA9IG5ldyB0cmllLlRyaWUoY2FuVXNlV2Vha01hcCk7XG4gICAgICAgICAgICB0aGlzLnBlcmZvcm1Xb3JrID0gb3B0aW1pc20ud3JhcChEb2N1bWVudFRyYW5zZm9ybS5wcm90b3R5cGUucGVyZm9ybVdvcmsuYmluZCh0aGlzKSwge1xuICAgICAgICAgICAgICAgIG1ha2VDYWNoZUtleTogZnVuY3Rpb24gKGRvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYWNoZUtleXMgPSBfdGhpcy5nZXRDYWNoZUtleShkb2N1bWVudCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZUtleXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbHMuaW52YXJpYW50KEFycmF5LmlzQXJyYXkoY2FjaGVLZXlzKSwgNjYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YWJsZUNhY2hlS2V5c18xLmxvb2t1cEFycmF5KGNhY2hlS2V5cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1heDogY2FjaGVTaXplc1tcImRvY3VtZW50VHJhbnNmb3JtLmNhY2hlXCJdLFxuICAgICAgICAgICAgICAgIGNhY2hlOiAoY2FjaGVzLldlYWtDYWNoZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRG9jdW1lbnRUcmFuc2Zvcm0ucHJvdG90eXBlLnBlcmZvcm1Xb3JrID0gZnVuY3Rpb24gKGRvY3VtZW50KSB7XG4gICAgICAgIGNoZWNrRG9jdW1lbnQoZG9jdW1lbnQpO1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oZG9jdW1lbnQpO1xuICAgIH07XG4gICAgRG9jdW1lbnRUcmFuc2Zvcm0ucHJvdG90eXBlLnRyYW5zZm9ybURvY3VtZW50ID0gZnVuY3Rpb24gKGRvY3VtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnJlc3VsdENhY2hlLmhhcyhkb2N1bWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHJhbnNmb3JtZWREb2N1bWVudCA9IHRoaXMucGVyZm9ybVdvcmsoZG9jdW1lbnQpO1xuICAgICAgICB0aGlzLnJlc3VsdENhY2hlLmFkZCh0cmFuc2Zvcm1lZERvY3VtZW50KTtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVkRG9jdW1lbnQ7XG4gICAgfTtcbiAgICBEb2N1bWVudFRyYW5zZm9ybS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKG90aGVyVHJhbnNmb3JtKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBEb2N1bWVudFRyYW5zZm9ybShmdW5jdGlvbiAoZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlclRyYW5zZm9ybS50cmFuc2Zvcm1Eb2N1bWVudChfdGhpcy50cmFuc2Zvcm1Eb2N1bWVudChkb2N1bWVudCkpO1xuICAgICAgICB9LFxuICAgICAgICB7IGNhY2hlOiBmYWxzZSB9KSwge1xuICAgICAgICAgICAgbGVmdDogdGhpcyxcbiAgICAgICAgICAgIHJpZ2h0OiBvdGhlclRyYW5zZm9ybSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gRG9jdW1lbnRUcmFuc2Zvcm07XG59KCkpO1xuXG52YXIgcHJpbnRDYWNoZTtcbnZhciBwcmludCA9IE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gKGFzdCkge1xuICAgIHZhciByZXN1bHQgPSBwcmludENhY2hlLmdldChhc3QpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdCA9IGdyYXBocWwucHJpbnQoYXN0KTtcbiAgICAgICAgcHJpbnRDYWNoZS5zZXQoYXN0LCByZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufSwge1xuICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHByaW50Q2FjaGUgPSBuZXcgQXV0b0NsZWFuZWRXZWFrQ2FjaGUoY2FjaGVTaXplcy5wcmludCB8fCAyMDAwICk7XG4gICAgfSxcbn0pO1xucHJpbnQucmVzZXQoKTtcbmlmIChnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlKSB7XG4gICAgcmVnaXN0ZXJHbG9iYWxDYWNoZShcInByaW50XCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIChwcmludENhY2hlID8gcHJpbnRDYWNoZS5zaXplIDogMCk7IH0pO1xufVxuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBpc05vbkVtcHR5QXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID4gMDtcbn1cblxudmFyIFRZUEVOQU1FX0ZJRUxEID0ge1xuICAgIGtpbmQ6IGdyYXBocWwuS2luZC5GSUVMRCxcbiAgICBuYW1lOiB7XG4gICAgICAgIGtpbmQ6IGdyYXBocWwuS2luZC5OQU1FLFxuICAgICAgICB2YWx1ZTogXCJfX3R5cGVuYW1lXCIsXG4gICAgfSxcbn07XG5mdW5jdGlvbiBpc0VtcHR5KG9wLCBmcmFnbWVudE1hcCkge1xuICAgIHJldHVybiAoIW9wIHx8XG4gICAgICAgIG9wLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zLmV2ZXJ5KGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24ua2luZCA9PT0gZ3JhcGhxbC5LaW5kLkZSQUdNRU5UX1NQUkVBRCAmJlxuICAgICAgICAgICAgICAgIGlzRW1wdHkoZnJhZ21lbnRNYXBbc2VsZWN0aW9uLm5hbWUudmFsdWVdLCBmcmFnbWVudE1hcCk7XG4gICAgICAgIH0pKTtcbn1cbmZ1bmN0aW9uIG51bGxJZkRvY0lzRW1wdHkoZG9jKSB7XG4gICAgcmV0dXJuIChpc0VtcHR5KGdldE9wZXJhdGlvbkRlZmluaXRpb24oZG9jKSB8fCBnZXRGcmFnbWVudERlZmluaXRpb24oZG9jKSwgY3JlYXRlRnJhZ21lbnRNYXAoZ2V0RnJhZ21lbnREZWZpbml0aW9ucyhkb2MpKSkpID9cbiAgICAgICAgbnVsbFxuICAgICAgICA6IGRvYztcbn1cbmZ1bmN0aW9uIGdldERpcmVjdGl2ZU1hdGNoZXIoY29uZmlncykge1xuICAgIHZhciBuYW1lcyA9IG5ldyBNYXAoKTtcbiAgICB2YXIgdGVzdHMgPSBuZXcgTWFwKCk7XG4gICAgY29uZmlncy5mb3JFYWNoKGZ1bmN0aW9uIChkaXJlY3RpdmUpIHtcbiAgICAgICAgaWYgKGRpcmVjdGl2ZSkge1xuICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgbmFtZXMuc2V0KGRpcmVjdGl2ZS5uYW1lLCBkaXJlY3RpdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGlyZWN0aXZlLnRlc3QpIHtcbiAgICAgICAgICAgICAgICB0ZXN0cy5zZXQoZGlyZWN0aXZlLnRlc3QsIGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGRpcmVjdGl2ZSkge1xuICAgICAgICB2YXIgY29uZmlnID0gbmFtZXMuZ2V0KGRpcmVjdGl2ZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgaWYgKCFjb25maWcgJiYgdGVzdHMuc2l6ZSkge1xuICAgICAgICAgICAgdGVzdHMuZm9yRWFjaChmdW5jdGlvbiAodGVzdENvbmZpZywgdGVzdCkge1xuICAgICAgICAgICAgICAgIGlmICh0ZXN0KGRpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gdGVzdENvbmZpZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG59XG5mdW5jdGlvbiBtYWtlSW5Vc2VHZXR0ZXJGdW5jdGlvbihkZWZhdWx0S2V5KSB7XG4gICAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gaW5Vc2VHZXR0ZXJGdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gdm9pZCAwKSB7IGtleSA9IGRlZmF1bHRLZXk7IH1cbiAgICAgICAgdmFyIGluVXNlID0gbWFwLmdldChrZXkpO1xuICAgICAgICBpZiAoIWluVXNlKSB7XG4gICAgICAgICAgICBtYXAuc2V0KGtleSwgKGluVXNlID0ge1xuICAgICAgICAgICAgICAgIHZhcmlhYmxlczogbmV3IFNldCgpLFxuICAgICAgICAgICAgICAgIGZyYWdtZW50U3ByZWFkczogbmV3IFNldCgpLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpblVzZTtcbiAgICB9O1xufVxuZnVuY3Rpb24gcmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudChkaXJlY3RpdmVzLCBkb2MpIHtcbiAgICBjaGVja0RvY3VtZW50KGRvYyk7XG4gICAgdmFyIGdldEluVXNlQnlPcGVyYXRpb25OYW1lID0gbWFrZUluVXNlR2V0dGVyRnVuY3Rpb24oXCJcIik7XG4gICAgdmFyIGdldEluVXNlQnlGcmFnbWVudE5hbWUgPSBtYWtlSW5Vc2VHZXR0ZXJGdW5jdGlvbihcIlwiKTtcbiAgICB2YXIgZ2V0SW5Vc2UgPSBmdW5jdGlvbiAoYW5jZXN0b3JzKSB7XG4gICAgICAgIGZvciAodmFyIHAgPSAwLCBhbmNlc3RvciA9IHZvaWQgMDsgcCA8IGFuY2VzdG9ycy5sZW5ndGggJiYgKGFuY2VzdG9yID0gYW5jZXN0b3JzW3BdKTsgKytwKSB7XG4gICAgICAgICAgICBpZiAoaXNBcnJheShhbmNlc3RvcikpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAoYW5jZXN0b3Iua2luZCA9PT0gZ3JhcGhxbC5LaW5kLk9QRVJBVElPTl9ERUZJTklUSU9OKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEluVXNlQnlPcGVyYXRpb25OYW1lKGFuY2VzdG9yLm5hbWUgJiYgYW5jZXN0b3IubmFtZS52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYW5jZXN0b3Iua2luZCA9PT0gZ3JhcGhxbC5LaW5kLkZSQUdNRU5UX0RFRklOSVRJT04pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0SW5Vc2VCeUZyYWdtZW50TmFtZShhbmNlc3Rvci5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlICYmIGdsb2JhbHMuaW52YXJpYW50LmVycm9yKDgzKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICB2YXIgb3BlcmF0aW9uQ291bnQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBkb2MuZGVmaW5pdGlvbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgaWYgKGRvYy5kZWZpbml0aW9uc1tpXS5raW5kID09PSBncmFwaHFsLktpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04pIHtcbiAgICAgICAgICAgICsrb3BlcmF0aW9uQ291bnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGRpcmVjdGl2ZU1hdGNoZXIgPSBnZXREaXJlY3RpdmVNYXRjaGVyKGRpcmVjdGl2ZXMpO1xuICAgIHZhciBzaG91bGRSZW1vdmVGaWVsZCA9IGZ1bmN0aW9uIChub2RlRGlyZWN0aXZlcykge1xuICAgICAgICByZXR1cm4gaXNOb25FbXB0eUFycmF5KG5vZGVEaXJlY3RpdmVzKSAmJlxuICAgICAgICAgICAgbm9kZURpcmVjdGl2ZXNcbiAgICAgICAgICAgICAgICAubWFwKGRpcmVjdGl2ZU1hdGNoZXIpXG4gICAgICAgICAgICAgICAgLnNvbWUoZnVuY3Rpb24gKGNvbmZpZykgeyByZXR1cm4gY29uZmlnICYmIGNvbmZpZy5yZW1vdmU7IH0pO1xuICAgIH07XG4gICAgdmFyIG9yaWdpbmFsRnJhZ21lbnREZWZzQnlQYXRoID0gbmV3IE1hcCgpO1xuICAgIHZhciBmaXJzdFZpc2l0TWFkZUNoYW5nZXMgPSBmYWxzZTtcbiAgICB2YXIgZmllbGRPcklubGluZUZyYWdtZW50VmlzaXRvciA9IHtcbiAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkUmVtb3ZlRmllbGQobm9kZS5kaXJlY3RpdmVzKSkge1xuICAgICAgICAgICAgICAgIGZpcnN0VmlzaXRNYWRlQ2hhbmdlcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICB2YXIgZG9jV2l0aG91dERpcmVjdGl2ZVN1YnRyZWVzID0gZ3JhcGhxbC52aXNpdChkb2MsIHtcbiAgICAgICAgRmllbGQ6IGZpZWxkT3JJbmxpbmVGcmFnbWVudFZpc2l0b3IsXG4gICAgICAgIElubGluZUZyYWdtZW50OiBmaWVsZE9ySW5saW5lRnJhZ21lbnRWaXNpdG9yLFxuICAgICAgICBWYXJpYWJsZURlZmluaXRpb246IHtcbiAgICAgICAgICAgIGVudGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgVmFyaWFibGU6IHtcbiAgICAgICAgICAgIGVudGVyOiBmdW5jdGlvbiAobm9kZSwgX2tleSwgX3BhcmVudCwgX3BhdGgsIGFuY2VzdG9ycykge1xuICAgICAgICAgICAgICAgIHZhciBpblVzZSA9IGdldEluVXNlKGFuY2VzdG9ycyk7XG4gICAgICAgICAgICAgICAgaWYgKGluVXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluVXNlLnZhcmlhYmxlcy5hZGQobm9kZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBGcmFnbWVudFNwcmVhZDoge1xuICAgICAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChub2RlLCBfa2V5LCBfcGFyZW50LCBfcGF0aCwgYW5jZXN0b3JzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZFJlbW92ZUZpZWxkKG5vZGUuZGlyZWN0aXZlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RWaXNpdE1hZGVDaGFuZ2VzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBpblVzZSA9IGdldEluVXNlKGFuY2VzdG9ycyk7XG4gICAgICAgICAgICAgICAgaWYgKGluVXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluVXNlLmZyYWdtZW50U3ByZWFkcy5hZGQobm9kZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBGcmFnbWVudERlZmluaXRpb246IHtcbiAgICAgICAgICAgIGVudGVyOiBmdW5jdGlvbiAobm9kZSwgX2tleSwgX3BhcmVudCwgcGF0aCkge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsRnJhZ21lbnREZWZzQnlQYXRoLnNldChKU09OLnN0cmluZ2lmeShwYXRoKSwgbm9kZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhdmU6IGZ1bmN0aW9uIChub2RlLCBfa2V5LCBfcGFyZW50LCBwYXRoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsTm9kZSA9IG9yaWdpbmFsRnJhZ21lbnREZWZzQnlQYXRoLmdldChKU09OLnN0cmluZ2lmeShwYXRoKSk7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IG9yaWdpbmFsTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG9wZXJhdGlvbkNvdW50ID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICBub2RlLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zLmV2ZXJ5KGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24ua2luZCA9PT0gZ3JhcGhxbC5LaW5kLkZJRUxEICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLm5hbWUudmFsdWUgPT09IFwiX190eXBlbmFtZVwiO1xuICAgICAgICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICAgICAgICBnZXRJblVzZUJ5RnJhZ21lbnROYW1lKG5vZGUubmFtZS52YWx1ZSkucmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0VmlzaXRNYWRlQ2hhbmdlcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIERpcmVjdGl2ZToge1xuICAgICAgICAgICAgbGVhdmU6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZU1hdGNoZXIobm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RWaXNpdE1hZGVDaGFuZ2VzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICBpZiAoIWZpcnN0VmlzaXRNYWRlQ2hhbmdlcykge1xuICAgICAgICByZXR1cm4gZG9jO1xuICAgIH1cbiAgICB2YXIgcG9wdWxhdGVUcmFuc2l0aXZlVmFycyA9IGZ1bmN0aW9uIChpblVzZSkge1xuICAgICAgICBpZiAoIWluVXNlLnRyYW5zaXRpdmVWYXJzKSB7XG4gICAgICAgICAgICBpblVzZS50cmFuc2l0aXZlVmFycyA9IG5ldyBTZXQoaW5Vc2UudmFyaWFibGVzKTtcbiAgICAgICAgICAgIGlmICghaW5Vc2UucmVtb3ZlZCkge1xuICAgICAgICAgICAgICAgIGluVXNlLmZyYWdtZW50U3ByZWFkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZEZyYWdtZW50TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZVRyYW5zaXRpdmVWYXJzKGdldEluVXNlQnlGcmFnbWVudE5hbWUoY2hpbGRGcmFnbWVudE5hbWUpKS50cmFuc2l0aXZlVmFycy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpblVzZS50cmFuc2l0aXZlVmFycy5hZGQodmFyTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpblVzZTtcbiAgICB9O1xuICAgIHZhciBhbGxGcmFnbWVudE5hbWVzVXNlZCA9IG5ldyBTZXQoKTtcbiAgICBkb2NXaXRob3V0RGlyZWN0aXZlU3VidHJlZXMuZGVmaW5pdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoZGVmKSB7XG4gICAgICAgIGlmIChkZWYua2luZCA9PT0gZ3JhcGhxbC5LaW5kLk9QRVJBVElPTl9ERUZJTklUSU9OKSB7XG4gICAgICAgICAgICBwb3B1bGF0ZVRyYW5zaXRpdmVWYXJzKGdldEluVXNlQnlPcGVyYXRpb25OYW1lKGRlZi5uYW1lICYmIGRlZi5uYW1lLnZhbHVlKSkuZnJhZ21lbnRTcHJlYWRzLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkRnJhZ21lbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgYWxsRnJhZ21lbnROYW1lc1VzZWQuYWRkKGNoaWxkRnJhZ21lbnROYW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlZi5raW5kID09PSBncmFwaHFsLktpbmQuRlJBR01FTlRfREVGSU5JVElPTiAmJlxuICAgICAgICAgICAgb3BlcmF0aW9uQ291bnQgPT09IDAgJiZcbiAgICAgICAgICAgICFnZXRJblVzZUJ5RnJhZ21lbnROYW1lKGRlZi5uYW1lLnZhbHVlKS5yZW1vdmVkKSB7XG4gICAgICAgICAgICBhbGxGcmFnbWVudE5hbWVzVXNlZC5hZGQoZGVmLm5hbWUudmFsdWUpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgYWxsRnJhZ21lbnROYW1lc1VzZWQuZm9yRWFjaChmdW5jdGlvbiAoZnJhZ21lbnROYW1lKSB7XG4gICAgICAgIHBvcHVsYXRlVHJhbnNpdGl2ZVZhcnMoZ2V0SW5Vc2VCeUZyYWdtZW50TmFtZShmcmFnbWVudE5hbWUpKS5mcmFnbWVudFNwcmVhZHMuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRGcmFnbWVudE5hbWUpIHtcbiAgICAgICAgICAgIGFsbEZyYWdtZW50TmFtZXNVc2VkLmFkZChjaGlsZEZyYWdtZW50TmFtZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciBmcmFnbWVudFdpbGxCZVJlbW92ZWQgPSBmdW5jdGlvbiAoZnJhZ21lbnROYW1lKSB7XG4gICAgICAgIHJldHVybiAhIShcbiAgICAgICAgKCFhbGxGcmFnbWVudE5hbWVzVXNlZC5oYXMoZnJhZ21lbnROYW1lKSB8fFxuICAgICAgICAgICAgZ2V0SW5Vc2VCeUZyYWdtZW50TmFtZShmcmFnbWVudE5hbWUpLnJlbW92ZWQpKTtcbiAgICB9O1xuICAgIHZhciBlbnRlclZpc2l0b3IgPSB7XG4gICAgICAgIGVudGVyOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKGZyYWdtZW50V2lsbEJlUmVtb3ZlZChub2RlLm5hbWUudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gbnVsbElmRG9jSXNFbXB0eShncmFwaHFsLnZpc2l0KGRvY1dpdGhvdXREaXJlY3RpdmVTdWJ0cmVlcywge1xuICAgICAgICBGcmFnbWVudFNwcmVhZDogZW50ZXJWaXNpdG9yLFxuICAgICAgICBGcmFnbWVudERlZmluaXRpb246IGVudGVyVmlzaXRvcixcbiAgICAgICAgT3BlcmF0aW9uRGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgbGVhdmU6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUudmFyaWFibGVEZWZpbml0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXNlZFZhcmlhYmxlTmFtZXNfMSA9IHBvcHVsYXRlVHJhbnNpdGl2ZVZhcnMoXG4gICAgICAgICAgICAgICAgICAgIGdldEluVXNlQnlPcGVyYXRpb25OYW1lKG5vZGUubmFtZSAmJiBub2RlLm5hbWUudmFsdWUpKS50cmFuc2l0aXZlVmFycztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZWRWYXJpYWJsZU5hbWVzXzEuc2l6ZSA8IG5vZGUudmFyaWFibGVEZWZpbml0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgbm9kZSksIHsgdmFyaWFibGVEZWZpbml0aW9uczogbm9kZS52YXJpYWJsZURlZmluaXRpb25zLmZpbHRlcihmdW5jdGlvbiAodmFyRGVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1c2VkVmFyaWFibGVOYW1lc18xLmhhcyh2YXJEZWYudmFyaWFibGUubmFtZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0pKTtcbn1cbnZhciBhZGRUeXBlbmFtZVRvRG9jdW1lbnQgPSBPYmplY3QuYXNzaWduKGZ1bmN0aW9uIChkb2MpIHtcbiAgICByZXR1cm4gZ3JhcGhxbC52aXNpdChkb2MsIHtcbiAgICAgICAgU2VsZWN0aW9uU2V0OiB7XG4gICAgICAgICAgICBlbnRlcjogZnVuY3Rpb24gKG5vZGUsIF9rZXksIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LmtpbmQgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICBncmFwaHFsLktpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0aW9ucyA9IG5vZGUuc2VsZWN0aW9ucztcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc2tpcCA9IHNlbGVjdGlvbnMuc29tZShmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoaXNGaWVsZChzZWxlY3Rpb24pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2VsZWN0aW9uLm5hbWUudmFsdWUgPT09IFwiX190eXBlbmFtZVwiIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLm5hbWUudmFsdWUubGFzdEluZGV4T2YoXCJfX1wiLCAwKSA9PT0gMCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChza2lwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGZpZWxkID0gcGFyZW50O1xuICAgICAgICAgICAgICAgIGlmIChpc0ZpZWxkKGZpZWxkKSAmJlxuICAgICAgICAgICAgICAgICAgICBmaWVsZC5kaXJlY3RpdmVzICYmXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkLmRpcmVjdGl2ZXMuc29tZShmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lLnZhbHVlID09PSBcImV4cG9ydFwiOyB9KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgbm9kZSksIHsgc2VsZWN0aW9uczogdHNsaWIuX19zcHJlYWRBcnJheSh0c2xpYi5fX3NwcmVhZEFycmF5KFtdLCBzZWxlY3Rpb25zLCB0cnVlKSwgW1RZUEVOQU1FX0ZJRUxEXSwgZmFsc2UpIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9KTtcbn0sIHtcbiAgICBhZGRlZDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIHJldHVybiBmaWVsZCA9PT0gVFlQRU5BTUVfRklFTEQ7XG4gICAgfSxcbn0pO1xudmFyIGNvbm5lY3Rpb25SZW1vdmVDb25maWcgPSB7XG4gICAgdGVzdDogZnVuY3Rpb24gKGRpcmVjdGl2ZSkge1xuICAgICAgICB2YXIgd2lsbFJlbW92ZSA9IGRpcmVjdGl2ZS5uYW1lLnZhbHVlID09PSBcImNvbm5lY3Rpb25cIjtcbiAgICAgICAgaWYgKHdpbGxSZW1vdmUpIHtcbiAgICAgICAgICAgIGlmICghZGlyZWN0aXZlLmFyZ3VtZW50cyB8fFxuICAgICAgICAgICAgICAgICFkaXJlY3RpdmUuYXJndW1lbnRzLnNvbWUoZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gYXJnLm5hbWUudmFsdWUgPT09IFwia2V5XCI7IH0pKSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBnbG9iYWxzLmludmFyaWFudC53YXJuKDg0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2lsbFJlbW92ZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHJlbW92ZUNvbm5lY3Rpb25EaXJlY3RpdmVGcm9tRG9jdW1lbnQoZG9jKSB7XG4gICAgcmV0dXJuIHJlbW92ZURpcmVjdGl2ZXNGcm9tRG9jdW1lbnQoW2Nvbm5lY3Rpb25SZW1vdmVDb25maWddLCBjaGVja0RvY3VtZW50KGRvYykpO1xufVxuZnVuY3Rpb24gZ2V0QXJndW1lbnRNYXRjaGVyKGNvbmZpZykge1xuICAgIHJldHVybiBmdW5jdGlvbiBhcmd1bWVudE1hdGNoZXIoYXJndW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5zb21lKGZ1bmN0aW9uIChhQ29uZmlnKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnQudmFsdWUgJiZcbiAgICAgICAgICAgICAgICBhcmd1bWVudC52YWx1ZS5raW5kID09PSBncmFwaHFsLktpbmQuVkFSSUFCTEUgJiZcbiAgICAgICAgICAgICAgICBhcmd1bWVudC52YWx1ZS5uYW1lICYmXG4gICAgICAgICAgICAgICAgKGFDb25maWcubmFtZSA9PT0gYXJndW1lbnQudmFsdWUubmFtZS52YWx1ZSB8fFxuICAgICAgICAgICAgICAgICAgICAoYUNvbmZpZy50ZXN0ICYmIGFDb25maWcudGVzdChhcmd1bWVudCkpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUFyZ3VtZW50c0Zyb21Eb2N1bWVudChjb25maWcsIGRvYykge1xuICAgIHZhciBhcmdNYXRjaGVyID0gZ2V0QXJndW1lbnRNYXRjaGVyKGNvbmZpZyk7XG4gICAgcmV0dXJuIG51bGxJZkRvY0lzRW1wdHkoZ3JhcGhxbC52aXNpdChkb2MsIHtcbiAgICAgICAgT3BlcmF0aW9uRGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBub2RlKSwge1xuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZURlZmluaXRpb25zOiBub2RlLnZhcmlhYmxlRGVmaW5pdGlvbnMgP1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS52YXJpYWJsZURlZmluaXRpb25zLmZpbHRlcihmdW5jdGlvbiAodmFyRGVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFjb25maWcuc29tZShmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBhcmcubmFtZSA9PT0gdmFyRGVmLnZhcmlhYmxlLm5hbWUudmFsdWU7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogW10gfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBGaWVsZDoge1xuICAgICAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNob3VsZFJlbW92ZUZpZWxkID0gY29uZmlnLnNvbWUoZnVuY3Rpb24gKGFyZ0NvbmZpZykgeyByZXR1cm4gYXJnQ29uZmlnLnJlbW92ZTsgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZFJlbW92ZUZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdNYXRjaENvdW50XzEgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5hcmd1bWVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXJndW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmdNYXRjaGVyKGFyZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnTWF0Y2hDb3VudF8xICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ01hdGNoQ291bnRfMSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBBcmd1bWVudDoge1xuICAgICAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ01hdGNoZXIobm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9KSk7XG59XG5mdW5jdGlvbiByZW1vdmVGcmFnbWVudFNwcmVhZEZyb21Eb2N1bWVudChjb25maWcsIGRvYykge1xuICAgIGZ1bmN0aW9uIGVudGVyKG5vZGUpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5zb21lKGZ1bmN0aW9uIChkZWYpIHsgcmV0dXJuIGRlZi5uYW1lID09PSBub2RlLm5hbWUudmFsdWU7IH0pKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbElmRG9jSXNFbXB0eShncmFwaHFsLnZpc2l0KGRvYywge1xuICAgICAgICBGcmFnbWVudFNwcmVhZDogeyBlbnRlcjogZW50ZXIgfSxcbiAgICAgICAgRnJhZ21lbnREZWZpbml0aW9uOiB7IGVudGVyOiBlbnRlciB9LFxuICAgIH0pKTtcbn1cbmZ1bmN0aW9uIGJ1aWxkUXVlcnlGcm9tU2VsZWN0aW9uU2V0KGRvY3VtZW50KSB7XG4gICAgdmFyIGRlZmluaXRpb24gPSBnZXRNYWluRGVmaW5pdGlvbihkb2N1bWVudCk7XG4gICAgdmFyIGRlZmluaXRpb25PcGVyYXRpb24gPSBkZWZpbml0aW9uLm9wZXJhdGlvbjtcbiAgICBpZiAoZGVmaW5pdGlvbk9wZXJhdGlvbiA9PT0gXCJxdWVyeVwiKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICB9XG4gICAgdmFyIG1vZGlmaWVkRG9jID0gZ3JhcGhxbC52aXNpdChkb2N1bWVudCwge1xuICAgICAgICBPcGVyYXRpb25EZWZpbml0aW9uOiB7XG4gICAgICAgICAgICBlbnRlcjogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIG5vZGUpLCB7IG9wZXJhdGlvbjogXCJxdWVyeVwiIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gbW9kaWZpZWREb2M7XG59XG5mdW5jdGlvbiByZW1vdmVDbGllbnRTZXRzRnJvbURvY3VtZW50KGRvY3VtZW50KSB7XG4gICAgY2hlY2tEb2N1bWVudChkb2N1bWVudCk7XG4gICAgdmFyIG1vZGlmaWVkRG9jID0gcmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudChbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlc3Q6IGZ1bmN0aW9uIChkaXJlY3RpdmUpIHsgcmV0dXJuIGRpcmVjdGl2ZS5uYW1lLnZhbHVlID09PSBcImNsaWVudFwiOyB9LFxuICAgICAgICAgICAgcmVtb3ZlOiB0cnVlLFxuICAgICAgICB9LFxuICAgIF0sIGRvY3VtZW50KTtcbiAgICByZXR1cm4gbW9kaWZpZWREb2M7XG59XG5cbmZ1bmN0aW9uIGlzT3BlcmF0aW9uKGRvY3VtZW50LCBvcGVyYXRpb24pIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuICgoX2EgPSBnZXRPcGVyYXRpb25EZWZpbml0aW9uKGRvY3VtZW50KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9wZXJhdGlvbikgPT09IG9wZXJhdGlvbjtcbn1cbmZ1bmN0aW9uIGlzTXV0YXRpb25PcGVyYXRpb24oZG9jdW1lbnQpIHtcbiAgICByZXR1cm4gaXNPcGVyYXRpb24oZG9jdW1lbnQsIFwibXV0YXRpb25cIik7XG59XG5mdW5jdGlvbiBpc1F1ZXJ5T3BlcmF0aW9uKGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGlzT3BlcmF0aW9uKGRvY3VtZW50LCBcInF1ZXJ5XCIpO1xufVxuZnVuY3Rpb24gaXNTdWJzY3JpcHRpb25PcGVyYXRpb24oZG9jdW1lbnQpIHtcbiAgICByZXR1cm4gaXNPcGVyYXRpb24oZG9jdW1lbnQsIFwic3Vic2NyaXB0aW9uXCIpO1xufVxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gbWVyZ2VEZWVwKCkge1xuICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgc291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEZWVwQXJyYXkoc291cmNlcyk7XG59XG5mdW5jdGlvbiBtZXJnZURlZXBBcnJheShzb3VyY2VzKSB7XG4gICAgdmFyIHRhcmdldCA9IHNvdXJjZXNbMF0gfHwge307XG4gICAgdmFyIGNvdW50ID0gc291cmNlcy5sZW5ndGg7XG4gICAgaWYgKGNvdW50ID4gMSkge1xuICAgICAgICB2YXIgbWVyZ2VyID0gbmV3IERlZXBNZXJnZXIoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICAgICAgICB0YXJnZXQgPSBtZXJnZXIubWVyZ2UodGFyZ2V0LCBzb3VyY2VzW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxudmFyIGRlZmF1bHRSZWNvbmNpbGVyID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBwcm9wZXJ0eSkge1xuICAgIHJldHVybiB0aGlzLm1lcmdlKHRhcmdldFtwcm9wZXJ0eV0sIHNvdXJjZVtwcm9wZXJ0eV0pO1xufTtcbnZhciBEZWVwTWVyZ2VyID0gIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVlcE1lcmdlcihyZWNvbmNpbGVyKSB7XG4gICAgICAgIGlmIChyZWNvbmNpbGVyID09PSB2b2lkIDApIHsgcmVjb25jaWxlciA9IGRlZmF1bHRSZWNvbmNpbGVyOyB9XG4gICAgICAgIHRoaXMucmVjb25jaWxlciA9IHJlY29uY2lsZXI7XG4gICAgICAgIHRoaXMuaXNPYmplY3QgPSBpc05vbk51bGxPYmplY3Q7XG4gICAgICAgIHRoaXMucGFzdENvcGllcyA9IG5ldyBTZXQoKTtcbiAgICB9XG4gICAgRGVlcE1lcmdlci5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNvbnRleHQgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGNvbnRleHRbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTm9uTnVsbE9iamVjdChzb3VyY2UpICYmIGlzTm9uTnVsbE9iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUtleSkge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgc291cmNlS2V5KSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0VmFsdWUgPSB0YXJnZXRbc291cmNlS2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZVtzb3VyY2VLZXldICE9PSB0YXJnZXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IF90aGlzLnJlY29uY2lsZXIuYXBwbHkoX3RoaXMsIHRzbGliLl9fc3ByZWFkQXJyYXkoW3RhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlS2V5XSwgY29udGV4dCwgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IHRhcmdldFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gX3RoaXMuc2hhbGxvd0NvcHlGb3JNZXJnZSh0YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtzb3VyY2VLZXldID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBfdGhpcy5zaGFsbG93Q29weUZvck1lcmdlKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtzb3VyY2VLZXldID0gc291cmNlW3NvdXJjZUtleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfTtcbiAgICBEZWVwTWVyZ2VyLnByb3RvdHlwZS5zaGFsbG93Q29weUZvck1lcmdlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmIChpc05vbk51bGxPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucGFzdENvcGllcy5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRzbGliLl9fYXNzaWduKHsgX19wcm90b19fOiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpIH0sIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wYXN0Q29waWVzLmFkZCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgcmV0dXJuIERlZXBNZXJnZXI7XG59KCkpO1xuXG5mdW5jdGlvbiBjb25jYXRQYWdpbmF0aW9uKGtleUFyZ3MpIHtcbiAgICBpZiAoa2V5QXJncyA9PT0gdm9pZCAwKSB7IGtleUFyZ3MgPSBmYWxzZTsgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGtleUFyZ3M6IGtleUFyZ3MsXG4gICAgICAgIG1lcmdlOiBmdW5jdGlvbiAoZXhpc3RpbmcsIGluY29taW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmcgPyB0c2xpYi5fX3NwcmVhZEFycmF5KHRzbGliLl9fc3ByZWFkQXJyYXkoW10sIGV4aXN0aW5nLCB0cnVlKSwgaW5jb21pbmcsIHRydWUpIDogaW5jb21pbmc7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG9mZnNldExpbWl0UGFnaW5hdGlvbihrZXlBcmdzKSB7XG4gICAgaWYgKGtleUFyZ3MgPT09IHZvaWQgMCkgeyBrZXlBcmdzID0gZmFsc2U7IH1cbiAgICByZXR1cm4ge1xuICAgICAgICBrZXlBcmdzOiBrZXlBcmdzLFxuICAgICAgICBtZXJnZTogZnVuY3Rpb24gKGV4aXN0aW5nLCBpbmNvbWluZywgX2EpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gX2EuYXJncztcbiAgICAgICAgICAgIHZhciBtZXJnZWQgPSBleGlzdGluZyA/IGV4aXN0aW5nLnNsaWNlKDApIDogW107XG4gICAgICAgICAgICBpZiAoaW5jb21pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXJncykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2IgPSBhcmdzLm9mZnNldCwgb2Zmc2V0ID0gX2IgPT09IHZvaWQgMCA/IDAgOiBfYjtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmNvbWluZy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VkW29mZnNldCArIGldID0gaW5jb21pbmdbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1lcmdlZC5wdXNoLmFwcGx5KG1lcmdlZCwgaW5jb21pbmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlbGF5U3R5bGVQYWdpbmF0aW9uKGtleUFyZ3MpIHtcbiAgICBpZiAoa2V5QXJncyA9PT0gdm9pZCAwKSB7IGtleUFyZ3MgPSBmYWxzZTsgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGtleUFyZ3M6IGtleUFyZ3MsXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIChleGlzdGluZywgX2EpIHtcbiAgICAgICAgICAgIHZhciBjYW5SZWFkID0gX2EuY2FuUmVhZCwgcmVhZEZpZWxkID0gX2EucmVhZEZpZWxkO1xuICAgICAgICAgICAgaWYgKCFleGlzdGluZylcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgICAgICB2YXIgZWRnZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBmaXJzdEVkZ2VDdXJzb3IgPSBcIlwiO1xuICAgICAgICAgICAgdmFyIGxhc3RFZGdlQ3Vyc29yID0gXCJcIjtcbiAgICAgICAgICAgIGV4aXN0aW5nLmVkZ2VzLmZvckVhY2goZnVuY3Rpb24gKGVkZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FuUmVhZChyZWFkRmllbGQoXCJub2RlXCIsIGVkZ2UpKSkge1xuICAgICAgICAgICAgICAgICAgICBlZGdlcy5wdXNoKGVkZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWRnZS5jdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0RWRnZUN1cnNvciA9IGZpcnN0RWRnZUN1cnNvciB8fCBlZGdlLmN1cnNvciB8fCBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEVkZ2VDdXJzb3IgPSBlZGdlLmN1cnNvciB8fCBsYXN0RWRnZUN1cnNvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGVkZ2VzLmxlbmd0aCA+IDEgJiYgZmlyc3RFZGdlQ3Vyc29yID09PSBsYXN0RWRnZUN1cnNvcikge1xuICAgICAgICAgICAgICAgIGZpcnN0RWRnZUN1cnNvciA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2IgPSBleGlzdGluZy5wYWdlSW5mbyB8fCB7fSwgc3RhcnRDdXJzb3IgPSBfYi5zdGFydEN1cnNvciwgZW5kQ3Vyc29yID0gX2IuZW5kQ3Vyc29yO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBnZXRFeHRyYXMoZXhpc3RpbmcpKSwgeyBlZGdlczogZWRnZXMsIHBhZ2VJbmZvOiB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgZXhpc3RpbmcucGFnZUluZm8pLCB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q3Vyc29yOiBzdGFydEN1cnNvciB8fCBmaXJzdEVkZ2VDdXJzb3IsIGVuZEN1cnNvcjogZW5kQ3Vyc29yIHx8IGxhc3RFZGdlQ3Vyc29yIH0pIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtZXJnZTogZnVuY3Rpb24gKGV4aXN0aW5nLCBpbmNvbWluZywgX2EpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gX2EuYXJncywgaXNSZWZlcmVuY2UgPSBfYS5pc1JlZmVyZW5jZSwgcmVhZEZpZWxkID0gX2EucmVhZEZpZWxkO1xuICAgICAgICAgICAgaWYgKCFleGlzdGluZykge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nID0gbWFrZUVtcHR5RGF0YSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpbmNvbWluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbmNvbWluZ0VkZ2VzID0gaW5jb21pbmcuZWRnZXMgP1xuICAgICAgICAgICAgICAgIGluY29taW5nLmVkZ2VzLm1hcChmdW5jdGlvbiAoZWRnZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNSZWZlcmVuY2UoKGVkZ2UgPSB0c2xpYi5fX2Fzc2lnbih7fSwgZWRnZSkpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWRnZS5jdXJzb3IgPSByZWFkRmllbGQoXCJjdXJzb3JcIiwgZWRnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVkZ2U7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICAgICAgaWYgKGluY29taW5nLnBhZ2VJbmZvKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhZ2VJbmZvXzEgPSBpbmNvbWluZy5wYWdlSW5mbztcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRDdXJzb3IgPSBwYWdlSW5mb18xLnN0YXJ0Q3Vyc29yLCBlbmRDdXJzb3IgPSBwYWdlSW5mb18xLmVuZEN1cnNvcjtcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RFZGdlID0gaW5jb21pbmdFZGdlc1swXTtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdEVkZ2UgPSBpbmNvbWluZ0VkZ2VzW2luY29taW5nRWRnZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0RWRnZSAmJiBzdGFydEN1cnNvcikge1xuICAgICAgICAgICAgICAgICAgICBmaXJzdEVkZ2UuY3Vyc29yID0gc3RhcnRDdXJzb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsYXN0RWRnZSAmJiBlbmRDdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdEVkZ2UuY3Vyc29yID0gZW5kQ3Vyc29yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RDdXJzb3IgPSBmaXJzdEVkZ2UgJiYgZmlyc3RFZGdlLmN1cnNvcjtcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3RDdXJzb3IgJiYgIXN0YXJ0Q3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgICAgIGluY29taW5nID0gbWVyZ2VEZWVwKGluY29taW5nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlSW5mbzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0Q3Vyc29yOiBmaXJzdEN1cnNvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbGFzdEN1cnNvciA9IGxhc3RFZGdlICYmIGxhc3RFZGdlLmN1cnNvcjtcbiAgICAgICAgICAgICAgICBpZiAobGFzdEN1cnNvciAmJiAhZW5kQ3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgICAgIGluY29taW5nID0gbWVyZ2VEZWVwKGluY29taW5nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlSW5mbzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEN1cnNvcjogbGFzdEN1cnNvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcmVmaXggPSBleGlzdGluZy5lZGdlcztcbiAgICAgICAgICAgIHZhciBzdWZmaXggPSBbXTtcbiAgICAgICAgICAgIGlmIChhcmdzICYmIGFyZ3MuYWZ0ZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBwcmVmaXguZmluZEluZGV4KGZ1bmN0aW9uIChlZGdlKSB7IHJldHVybiBlZGdlLmN1cnNvciA9PT0gYXJncy5hZnRlcjsgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4ID0gcHJlZml4LnNsaWNlKDAsIGluZGV4ICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYXJncyAmJiBhcmdzLmJlZm9yZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHByZWZpeC5maW5kSW5kZXgoZnVuY3Rpb24gKGVkZ2UpIHsgcmV0dXJuIGVkZ2UuY3Vyc29yID09PSBhcmdzLmJlZm9yZTsgfSk7XG4gICAgICAgICAgICAgICAgc3VmZml4ID0gaW5kZXggPCAwID8gcHJlZml4IDogcHJlZml4LnNsaWNlKGluZGV4KTtcbiAgICAgICAgICAgICAgICBwcmVmaXggPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGluY29taW5nLmVkZ2VzKSB7XG4gICAgICAgICAgICAgICAgcHJlZml4ID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZWRnZXMgPSB0c2xpYi5fX3NwcmVhZEFycmF5KHRzbGliLl9fc3ByZWFkQXJyYXkodHNsaWIuX19zcHJlYWRBcnJheShbXSwgcHJlZml4LCB0cnVlKSwgaW5jb21pbmdFZGdlcywgdHJ1ZSksIHN1ZmZpeCwgdHJ1ZSk7XG4gICAgICAgICAgICB2YXIgcGFnZUluZm8gPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgaW5jb21pbmcucGFnZUluZm8pLCBleGlzdGluZy5wYWdlSW5mbyk7XG4gICAgICAgICAgICBpZiAoaW5jb21pbmcucGFnZUluZm8pIHtcbiAgICAgICAgICAgICAgICB2YXIgX2IgPSBpbmNvbWluZy5wYWdlSW5mbywgaGFzUHJldmlvdXNQYWdlID0gX2IuaGFzUHJldmlvdXNQYWdlLCBoYXNOZXh0UGFnZSA9IF9iLmhhc05leHRQYWdlLCBzdGFydEN1cnNvciA9IF9iLnN0YXJ0Q3Vyc29yLCBlbmRDdXJzb3IgPSBfYi5lbmRDdXJzb3IsIGV4dHJhcyA9IHRzbGliLl9fcmVzdChfYiwgW1wiaGFzUHJldmlvdXNQYWdlXCIsIFwiaGFzTmV4dFBhZ2VcIiwgXCJzdGFydEN1cnNvclwiLCBcImVuZEN1cnNvclwiXSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihwYWdlSW5mbywgZXh0cmFzKTtcbiAgICAgICAgICAgICAgICBpZiAoIXByZWZpeC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gaGFzUHJldmlvdXNQYWdlKVxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZUluZm8uaGFzUHJldmlvdXNQYWdlID0gaGFzUHJldmlvdXNQYWdlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBzdGFydEN1cnNvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VJbmZvLnN0YXJ0Q3Vyc29yID0gc3RhcnRDdXJzb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghc3VmZml4Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBoYXNOZXh0UGFnZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VJbmZvLmhhc05leHRQYWdlID0gaGFzTmV4dFBhZ2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IGVuZEN1cnNvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VJbmZvLmVuZEN1cnNvciA9IGVuZEN1cnNvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGdldEV4dHJhcyhleGlzdGluZykpLCBnZXRFeHRyYXMoaW5jb21pbmcpKSwgeyBlZGdlczogZWRnZXMsIHBhZ2VJbmZvOiBwYWdlSW5mbyB9KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxudmFyIGdldEV4dHJhcyA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHRzbGliLl9fcmVzdChvYmosIG5vdEV4dHJhcyk7IH07XG52YXIgbm90RXh0cmFzID0gW1wiZWRnZXNcIiwgXCJwYWdlSW5mb1wiXTtcbmZ1bmN0aW9uIG1ha2VFbXB0eURhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZWRnZXM6IFtdLFxuICAgICAgICBwYWdlSW5mbzoge1xuICAgICAgICAgICAgaGFzUHJldmlvdXNQYWdlOiBmYWxzZSxcbiAgICAgICAgICAgIGhhc05leHRQYWdlOiB0cnVlLFxuICAgICAgICAgICAgc3RhcnRDdXJzb3I6IFwiXCIsXG4gICAgICAgICAgICBlbmRDdXJzb3I6IFwiXCIsXG4gICAgICAgIH0sXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRnVsZmlsbGVkUHJvbWlzZSh2YWx1ZSkge1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKTtcbiAgICBwcm9taXNlLnN0YXR1cyA9IFwiZnVsZmlsbGVkXCI7XG4gICAgcHJvbWlzZS52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gY3JlYXRlUmVqZWN0ZWRQcm9taXNlKHJlYXNvbikge1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgICBwcm9taXNlLmNhdGNoKGZ1bmN0aW9uICgpIHsgfSk7XG4gICAgcHJvbWlzZS5zdGF0dXMgPSBcInJlamVjdGVkXCI7XG4gICAgcHJvbWlzZS5yZWFzb24gPSByZWFzb247XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBpc1N0YXRlZnVsUHJvbWlzZShwcm9taXNlKSB7XG4gICAgcmV0dXJuIFwic3RhdHVzXCIgaW4gcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIHdyYXBQcm9taXNlV2l0aFN0YXRlKHByb21pc2UpIHtcbiAgICBpZiAoaXNTdGF0ZWZ1bFByb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICAgIHZhciBwZW5kaW5nUHJvbWlzZSA9IHByb21pc2U7XG4gICAgcGVuZGluZ1Byb21pc2Uuc3RhdHVzID0gXCJwZW5kaW5nXCI7XG4gICAgcGVuZGluZ1Byb21pc2UudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHBlbmRpbmdQcm9taXNlLnN0YXR1cyA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgICAgIHZhciBmdWxmaWxsZWRQcm9taXNlID0gcGVuZGluZ1Byb21pc2U7XG4gICAgICAgICAgICBmdWxmaWxsZWRQcm9taXNlLnN0YXR1cyA9IFwiZnVsZmlsbGVkXCI7XG4gICAgICAgICAgICBmdWxmaWxsZWRQcm9taXNlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIGlmIChwZW5kaW5nUHJvbWlzZS5zdGF0dXMgPT09IFwicGVuZGluZ1wiKSB7XG4gICAgICAgICAgICB2YXIgcmVqZWN0ZWRQcm9taXNlID0gcGVuZGluZ1Byb21pc2U7XG4gICAgICAgICAgICByZWplY3RlZFByb21pc2Uuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgICAgICAgcmVqZWN0ZWRQcm9taXNlLnJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNsb25lRGVlcEhlbHBlcih2YWx1ZSk7XG59XG5mdW5jdGlvbiBjbG9uZURlZXBIZWxwZXIodmFsLCBzZWVuKSB7XG4gICAgc3dpdGNoICh0b1N0cmluZy5jYWxsKHZhbCkpIHtcbiAgICAgICAgY2FzZSBcIltvYmplY3QgQXJyYXldXCI6IHtcbiAgICAgICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIGlmIChzZWVuLmhhcyh2YWwpKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLmdldCh2YWwpO1xuICAgICAgICAgICAgdmFyIGNvcHlfMSA9IHZhbC5zbGljZSgwKTtcbiAgICAgICAgICAgIHNlZW4uc2V0KHZhbCwgY29weV8xKTtcbiAgICAgICAgICAgIGNvcHlfMS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgICAgICAgICAgIGNvcHlfMVtpXSA9IGNsb25lRGVlcEhlbHBlcihjaGlsZCwgc2Vlbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb3B5XzE7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIltvYmplY3QgT2JqZWN0XVwiOiB7XG4gICAgICAgICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XG4gICAgICAgICAgICBpZiAoc2Vlbi5oYXModmFsKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5nZXQodmFsKTtcbiAgICAgICAgICAgIHZhciBjb3B5XzIgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpKTtcbiAgICAgICAgICAgIHNlZW4uc2V0KHZhbCwgY29weV8yKTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHZhbCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgY29weV8yW2tleV0gPSBjbG9uZURlZXBIZWxwZXIodmFsW2tleV0sIHNlZW4pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY29weV8yO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZGVlcEZyZWV6ZSh2YWx1ZSkge1xuICAgIHZhciB3b3JrU2V0ID0gbmV3IFNldChbdmFsdWVdKTtcbiAgICB3b3JrU2V0LmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICBpZiAoaXNOb25OdWxsT2JqZWN0KG9iaikgJiYgc2hhbGxvd0ZyZWV6ZShvYmopID09PSBvYmopIHtcbiAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChpc05vbk51bGxPYmplY3Qob2JqW25hbWVdKSlcbiAgICAgICAgICAgICAgICAgICAgd29ya1NldC5hZGQob2JqW25hbWVdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gc2hhbGxvd0ZyZWV6ZShvYmopIHtcbiAgICBpZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiAhT2JqZWN0LmlzRnJvemVuKG9iaikpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIE9iamVjdC5mcmVlemUob2JqKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBUeXBlRXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiBtYXliZURlZXBGcmVlemUob2JqKSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpIHtcbiAgICAgICAgZGVlcEZyZWV6ZShvYmopO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBpdGVyYXRlT2JzZXJ2ZXJzU2FmZWx5KG9ic2VydmVycywgbWV0aG9kLCBhcmd1bWVudCkge1xuICAgIHZhciBvYnNlcnZlcnNXaXRoTWV0aG9kID0gW107XG4gICAgb2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9icykgeyByZXR1cm4gb2JzW21ldGhvZF0gJiYgb2JzZXJ2ZXJzV2l0aE1ldGhvZC5wdXNoKG9icyk7IH0pO1xuICAgIG9ic2VydmVyc1dpdGhNZXRob2QuZm9yRWFjaChmdW5jdGlvbiAob2JzKSB7IHJldHVybiBvYnNbbWV0aG9kXShhcmd1bWVudCk7IH0pO1xufVxuXG5mdW5jdGlvbiBhc3luY01hcChvYnNlcnZhYmxlLCBtYXBGbiwgY2F0Y2hGbikge1xuICAgIHJldHVybiBuZXcgemVuT2JzZXJ2YWJsZVRzLk9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciBwcm9taXNlUXVldWUgPSB7XG4gICAgICAgICAgICB0aGVuOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHJlc29sdmUoY2FsbGJhY2soKSk7IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gbWFrZUNhbGxiYWNrKGV4YW1pbmVyLCBrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4YW1pbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBib3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLmNsb3NlZCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGV4YW1pbmVyKGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VRdWV1ZSA9IHByb21pc2VRdWV1ZS50aGVuKGJvdGgsIGJvdGgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgeyByZXR1cm4gb2JzZXJ2ZXIubmV4dChyZXN1bHQpOyB9LCBmdW5jdGlvbiAoZXJyb3IpIHsgcmV0dXJuIG9ic2VydmVyLmVycm9yKGVycm9yKTsgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcltrZXldKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGFuZGxlciA9IHtcbiAgICAgICAgICAgIG5leHQ6IG1ha2VDYWxsYmFjayhtYXBGbiwgXCJuZXh0XCIpLFxuICAgICAgICAgICAgZXJyb3I6IG1ha2VDYWxsYmFjayhjYXRjaEZuLCBcImVycm9yXCIpLFxuICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgcHJvbWlzZVF1ZXVlLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gb2JzZXJ2ZXIuY29tcGxldGUoKTsgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICB2YXIgc3ViID0gb2JzZXJ2YWJsZS5zdWJzY3JpYmUoaGFuZGxlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWIudW5zdWJzY3JpYmUoKTsgfTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZml4T2JzZXJ2YWJsZVN1YmNsYXNzKHN1YmNsYXNzKSB7XG4gICAgZnVuY3Rpb24gc2V0KGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViY2xhc3MsIGtleSwgeyB2YWx1ZTogemVuT2JzZXJ2YWJsZVRzLk9ic2VydmFibGUgfSk7XG4gICAgfVxuICAgIGlmIChjYW5Vc2VTeW1ib2wgJiYgU3ltYm9sLnNwZWNpZXMpIHtcbiAgICAgICAgc2V0KFN5bWJvbC5zcGVjaWVzKTtcbiAgICB9XG4gICAgc2V0KFwiQEBzcGVjaWVzXCIpO1xuICAgIHJldHVybiBzdWJjbGFzcztcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlTGlrZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gXCJmdW5jdGlvblwiO1xufVxudmFyIENvbmNhc3QgPSAgKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYi5fX2V4dGVuZHMoQ29uY2FzdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb25jYXN0KHNvdXJjZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgICAgICBfdGhpcy5hZGRPYnNlcnZlcihvYnNlcnZlcik7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucmVtb3ZlT2JzZXJ2ZXIob2JzZXJ2ZXIpOyB9O1xuICAgICAgICB9KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vYnNlcnZlcnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIF90aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBfdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIF90aGlzLnJlamVjdCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLmhhbmRsZXJzID0ge1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5zdWIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubGF0ZXN0ID0gW1wibmV4dFwiLCByZXN1bHRdO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ub3RpZnkoXCJuZXh0XCIsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdGVPYnNlcnZlcnNTYWZlbHkoX3RoaXMub2JzZXJ2ZXJzLCBcIm5leHRcIiwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHZhciBzdWIgPSBfdGhpcy5zdWI7XG4gICAgICAgICAgICAgICAgaWYgKHN1YiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBzdWIudW5zdWJzY3JpYmUoKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnN1YiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmxhdGVzdCA9IFtcImVycm9yXCIsIGVycm9yXTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubm90aWZ5KFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBpdGVyYXRlT2JzZXJ2ZXJzU2FmZWx5KF90aGlzLm9ic2VydmVycywgXCJlcnJvclwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIHN1YiA9IF9hLnN1YiwgX2IgPSBfYS5zb3VyY2VzLCBzb3VyY2VzID0gX2IgPT09IHZvaWQgMCA/IFtdIDogX2I7XG4gICAgICAgICAgICAgICAgaWYgKHN1YiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2VzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBzdWIudW5zdWJzY3JpYmUoKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdWIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmxhdGVzdCAmJiBfdGhpcy5sYXRlc3RbMF0gPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVzb2x2ZShfdGhpcy5sYXRlc3RbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubm90aWZ5KFwiY29tcGxldGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlT2JzZXJ2ZXJzU2FmZWx5KF90aGlzLm9ic2VydmVycywgXCJjb21wbGV0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpc1Byb21pc2VMaWtlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUudGhlbihmdW5jdGlvbiAob2JzKSB7IHJldHVybiAoX3RoaXMuc3ViID0gb2JzLnN1YnNjcmliZShfdGhpcy5oYW5kbGVycykpOyB9LCBfdGhpcy5oYW5kbGVycy5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdWIgPSB2YWx1ZS5zdWJzY3JpYmUoX3RoaXMuaGFuZGxlcnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMubmV4dFJlc3VsdExpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICAgICAgX3RoaXMuY2FuY2VsID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgX3RoaXMucmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICBfdGhpcy5zb3VyY2VzID0gW107XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVycy5jb21wbGV0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5wcm9taXNlLmNhdGNoKGZ1bmN0aW9uIChfKSB7IH0pO1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgc291cmNlcyA9IFtuZXcgemVuT2JzZXJ2YWJsZVRzLk9ic2VydmFibGUoc291cmNlcyldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2VMaWtlKHNvdXJjZXMpKSB7XG4gICAgICAgICAgICBzb3VyY2VzLnRoZW4oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7IHJldHVybiBfdGhpcy5zdGFydChpdGVyYWJsZSk7IH0sIF90aGlzLmhhbmRsZXJzLmVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLnN0YXJ0KHNvdXJjZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ29uY2FzdC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoc291cmNlcykge1xuICAgICAgICBpZiAodGhpcy5zdWIgIT09IHZvaWQgMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5zb3VyY2VzID0gQXJyYXkuZnJvbShzb3VyY2VzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVycy5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgQ29uY2FzdC5wcm90b3R5cGUuZGVsaXZlckxhc3RNZXNzYWdlID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmxhdGVzdCkge1xuICAgICAgICAgICAgdmFyIG5leHRPckVycm9yID0gdGhpcy5sYXRlc3RbMF07XG4gICAgICAgICAgICB2YXIgbWV0aG9kID0gb2JzZXJ2ZXJbbmV4dE9yRXJyb3JdO1xuICAgICAgICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICAgICAgICAgIG1ldGhvZC5jYWxsKG9ic2VydmVyLCB0aGlzLmxhdGVzdFsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zdWIgPT09IG51bGwgJiYgbmV4dE9yRXJyb3IgPT09IFwibmV4dFwiICYmIG9ic2VydmVyLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uY2FzdC5wcm90b3R5cGUuYWRkT2JzZXJ2ZXIgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9ic2VydmVycy5oYXMob2JzZXJ2ZXIpKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGl2ZXJMYXN0TWVzc2FnZShvYnNlcnZlcik7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVycy5hZGQob2JzZXJ2ZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25jYXN0LnByb3RvdHlwZS5yZW1vdmVPYnNlcnZlciA9IGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICBpZiAodGhpcy5vYnNlcnZlcnMuZGVsZXRlKG9ic2VydmVyKSAmJiB0aGlzLm9ic2VydmVycy5zaXplIDwgMSkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25jYXN0LnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgICAgICAgdmFyIG5leHRSZXN1bHRMaXN0ZW5lcnMgPSB0aGlzLm5leHRSZXN1bHRMaXN0ZW5lcnM7XG4gICAgICAgIGlmIChuZXh0UmVzdWx0TGlzdGVuZXJzLnNpemUpIHtcbiAgICAgICAgICAgIHRoaXMubmV4dFJlc3VsdExpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIG5leHRSZXN1bHRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIGxpc3RlbmVyKG1ldGhvZCwgYXJnKTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbmNhc3QucHJvdG90eXBlLmJlZm9yZU5leHQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5leHRSZXN1bHRMaXN0ZW5lcnMuYWRkKGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICAgICAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG1ldGhvZCwgYXJnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29uY2FzdDtcbn0oemVuT2JzZXJ2YWJsZVRzLk9ic2VydmFibGUpKTtcbmZpeE9ic2VydmFibGVTdWJjbGFzcyhDb25jYXN0KTtcblxuZnVuY3Rpb24gaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0KHZhbHVlKSB7XG4gICAgcmV0dXJuIFwiaW5jcmVtZW50YWxcIiBpbiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGlzRXhlY3V0aW9uUGF0Y2hJbml0aWFsUmVzdWx0KHZhbHVlKSB7XG4gICAgcmV0dXJuIFwiaGFzTmV4dFwiIGluIHZhbHVlICYmIFwiZGF0YVwiIGluIHZhbHVlO1xufVxuZnVuY3Rpb24gaXNFeGVjdXRpb25QYXRjaFJlc3VsdCh2YWx1ZSkge1xuICAgIHJldHVybiAoaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0KHZhbHVlKSB8fFxuICAgICAgICBpc0V4ZWN1dGlvblBhdGNoSW5pdGlhbFJlc3VsdCh2YWx1ZSkpO1xufVxuZnVuY3Rpb24gaXNBcG9sbG9QYXlsb2FkUmVzdWx0KHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkgJiYgXCJwYXlsb2FkXCIgaW4gdmFsdWU7XG59XG5mdW5jdGlvbiBtZXJnZUluY3JlbWVudGFsRGF0YShwcmV2UmVzdWx0LCByZXN1bHQpIHtcbiAgICB2YXIgbWVyZ2VkRGF0YSA9IHByZXZSZXN1bHQ7XG4gICAgdmFyIG1lcmdlciA9IG5ldyBEZWVwTWVyZ2VyKCk7XG4gICAgaWYgKGlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdChyZXN1bHQpICYmXG4gICAgICAgIGlzTm9uRW1wdHlBcnJheShyZXN1bHQuaW5jcmVtZW50YWwpKSB7XG4gICAgICAgIHJlc3VsdC5pbmNyZW1lbnRhbC5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBfYS5kYXRhLCBwYXRoID0gX2EucGF0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHBhdGhbaV07XG4gICAgICAgICAgICAgICAgdmFyIGlzTnVtZXJpY0tleSA9ICFpc05hTigra2V5KTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBpc051bWVyaWNLZXkgPyBbXSA6IHt9O1xuICAgICAgICAgICAgICAgIHBhcmVudF8xW2tleV0gPSBkYXRhO1xuICAgICAgICAgICAgICAgIGRhdGEgPSBwYXJlbnRfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lcmdlZERhdGEgPSBtZXJnZXIubWVyZ2UobWVyZ2VkRGF0YSwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkRGF0YTtcbn1cblxuZnVuY3Rpb24gZ3JhcGhRTFJlc3VsdEhhc0Vycm9yKHJlc3VsdCkge1xuICAgIHZhciBlcnJvcnMgPSBnZXRHcmFwaFFMRXJyb3JzRnJvbVJlc3VsdChyZXN1bHQpO1xuICAgIHJldHVybiBpc05vbkVtcHR5QXJyYXkoZXJyb3JzKTtcbn1cbmZ1bmN0aW9uIGdldEdyYXBoUUxFcnJvcnNGcm9tUmVzdWx0KHJlc3VsdCkge1xuICAgIHZhciBncmFwaFFMRXJyb3JzID0gaXNOb25FbXB0eUFycmF5KHJlc3VsdC5lcnJvcnMpID8gcmVzdWx0LmVycm9ycy5zbGljZSgwKSA6IFtdO1xuICAgIGlmIChpc0V4ZWN1dGlvblBhdGNoSW5jcmVtZW50YWxSZXN1bHQocmVzdWx0KSAmJlxuICAgICAgICBpc05vbkVtcHR5QXJyYXkocmVzdWx0LmluY3JlbWVudGFsKSkge1xuICAgICAgICByZXN1bHQuaW5jcmVtZW50YWwuZm9yRWFjaChmdW5jdGlvbiAoaW5jcmVtZW50YWxSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChpbmNyZW1lbnRhbFJlc3VsdC5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgICBncmFwaFFMRXJyb3JzLnB1c2guYXBwbHkoZ3JhcGhRTEVycm9ycywgaW5jcmVtZW50YWxSZXN1bHQuZXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBncmFwaFFMRXJyb3JzO1xufVxuXG5mdW5jdGlvbiBjb21wYWN0KCkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JqZWN0c1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBvYmplY3RzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICBpZiAoIW9iailcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgcHJlZml4Q291bnRzID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gbWFrZVVuaXF1ZUlkKHByZWZpeCkge1xuICAgIHZhciBjb3VudCA9IHByZWZpeENvdW50cy5nZXQocHJlZml4KSB8fCAxO1xuICAgIHByZWZpeENvdW50cy5zZXQocHJlZml4LCBjb3VudCArIDEpO1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChwcmVmaXgsIFwiOlwiKS5jb25jYXQoY291bnQsIFwiOlwiKS5jb25jYXQoTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMikpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlGb3JEaXNwbGF5KHZhbHVlLCBzcGFjZSkge1xuICAgIGlmIChzcGFjZSA9PT0gdm9pZCAwKSB7IHNwYWNlID0gMDsgfVxuICAgIHZhciB1bmRlZklkID0gbWFrZVVuaXF1ZUlkKFwic3RyaW5naWZ5Rm9yRGlzcGxheVwiKTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdm9pZCAwID8gdW5kZWZJZCA6IHZhbHVlO1xuICAgIH0sIHNwYWNlKVxuICAgICAgICAuc3BsaXQoSlNPTi5zdHJpbmdpZnkodW5kZWZJZCkpXG4gICAgICAgIC5qb2luKFwiPHVuZGVmaW5lZD5cIik7XG59XG5cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyhkZWZhdWx0cywgb3B0aW9ucykge1xuICAgIHJldHVybiBjb21wYWN0KGRlZmF1bHRzLCBvcHRpb25zLCBvcHRpb25zLnZhcmlhYmxlcyAmJiB7XG4gICAgICAgIHZhcmlhYmxlczogY29tcGFjdCh0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgKGRlZmF1bHRzICYmIGRlZmF1bHRzLnZhcmlhYmxlcykpLCBvcHRpb25zLnZhcmlhYmxlcykpLFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBvbWl0RGVlcCh2YWx1ZSwga2V5KSB7XG4gICAgcmV0dXJuIF9fb21pdERlZXAodmFsdWUsIGtleSk7XG59XG5mdW5jdGlvbiBfX29taXREZWVwKHZhbHVlLCBrZXksIGtub3duKSB7XG4gICAgaWYgKGtub3duID09PSB2b2lkIDApIHsga25vd24gPSBuZXcgTWFwKCk7IH1cbiAgICBpZiAoa25vd24uaGFzKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4ga25vd24uZ2V0KHZhbHVlKTtcbiAgICB9XG4gICAgdmFyIG1vZGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhciBhcnJheV8xID0gW107XG4gICAgICAgIGtub3duLnNldCh2YWx1ZSwgYXJyYXlfMSk7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IF9fb21pdERlZXAodmFsdWUsIGtleSwga25vd24pO1xuICAgICAgICAgICAgbW9kaWZpZWQgfHwgKG1vZGlmaWVkID0gcmVzdWx0ICE9PSB2YWx1ZSk7XG4gICAgICAgICAgICBhcnJheV8xW2luZGV4XSA9IHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChtb2RpZmllZCkge1xuICAgICAgICAgICAgcmV0dXJuIGFycmF5XzE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG9ial8xID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpKTtcbiAgICAgICAga25vd24uc2V0KHZhbHVlLCBvYmpfMSk7XG4gICAgICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgICAgICBpZiAoayA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgbW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBfX29taXREZWVwKHZhbHVlW2tdLCBrZXksIGtub3duKTtcbiAgICAgICAgICAgIG1vZGlmaWVkIHx8IChtb2RpZmllZCA9IHJlc3VsdCAhPT0gdmFsdWVba10pO1xuICAgICAgICAgICAgb2JqXzFba10gPSByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobW9kaWZpZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmpfMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHN0cmlwVHlwZW5hbWUodmFsdWUpIHtcbiAgICByZXR1cm4gb21pdERlZXAodmFsdWUsIFwiX190eXBlbmFtZVwiKTtcbn1cblxuZXhwb3J0cy5ERVYgPSBnbG9iYWxzLkRFVjtcbmV4cG9ydHMubWF5YmUgPSBnbG9iYWxzLm1heWJlO1xuZXhwb3J0cy5PYnNlcnZhYmxlID0gemVuT2JzZXJ2YWJsZVRzLk9ic2VydmFibGU7XG5leHBvcnRzLkF1dG9DbGVhbmVkU3Ryb25nQ2FjaGUgPSBBdXRvQ2xlYW5lZFN0cm9uZ0NhY2hlO1xuZXhwb3J0cy5BdXRvQ2xlYW5lZFdlYWtDYWNoZSA9IEF1dG9DbGVhbmVkV2Vha0NhY2hlO1xuZXhwb3J0cy5Db25jYXN0ID0gQ29uY2FzdDtcbmV4cG9ydHMuRGVlcE1lcmdlciA9IERlZXBNZXJnZXI7XG5leHBvcnRzLkRvY3VtZW50VHJhbnNmb3JtID0gRG9jdW1lbnRUcmFuc2Zvcm07XG5leHBvcnRzLmFkZFR5cGVuYW1lVG9Eb2N1bWVudCA9IGFkZFR5cGVuYW1lVG9Eb2N1bWVudDtcbmV4cG9ydHMuYXJndW1lbnRzT2JqZWN0RnJvbUZpZWxkID0gYXJndW1lbnRzT2JqZWN0RnJvbUZpZWxkO1xuZXhwb3J0cy5hc3luY01hcCA9IGFzeW5jTWFwO1xuZXhwb3J0cy5idWlsZFF1ZXJ5RnJvbVNlbGVjdGlvblNldCA9IGJ1aWxkUXVlcnlGcm9tU2VsZWN0aW9uU2V0O1xuZXhwb3J0cy5jYWNoZVNpemVzID0gY2FjaGVTaXplcztcbmV4cG9ydHMuY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCA9IGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2w7XG5leHBvcnRzLmNhblVzZURPTSA9IGNhblVzZURPTTtcbmV4cG9ydHMuY2FuVXNlTGF5b3V0RWZmZWN0ID0gY2FuVXNlTGF5b3V0RWZmZWN0O1xuZXhwb3J0cy5jYW5Vc2VTeW1ib2wgPSBjYW5Vc2VTeW1ib2w7XG5leHBvcnRzLmNhblVzZVdlYWtNYXAgPSBjYW5Vc2VXZWFrTWFwO1xuZXhwb3J0cy5jYW5Vc2VXZWFrU2V0ID0gY2FuVXNlV2Vha1NldDtcbmV4cG9ydHMuY2Fub25pY2FsU3RyaW5naWZ5ID0gY2Fub25pY2FsU3RyaW5naWZ5O1xuZXhwb3J0cy5jaGVja0RvY3VtZW50ID0gY2hlY2tEb2N1bWVudDtcbmV4cG9ydHMuY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuZXhwb3J0cy5jb21wYWN0ID0gY29tcGFjdDtcbmV4cG9ydHMuY29uY2F0UGFnaW5hdGlvbiA9IGNvbmNhdFBhZ2luYXRpb247XG5leHBvcnRzLmNyZWF0ZUZyYWdtZW50TWFwID0gY3JlYXRlRnJhZ21lbnRNYXA7XG5leHBvcnRzLmNyZWF0ZUZ1bGZpbGxlZFByb21pc2UgPSBjcmVhdGVGdWxmaWxsZWRQcm9taXNlO1xuZXhwb3J0cy5jcmVhdGVSZWplY3RlZFByb21pc2UgPSBjcmVhdGVSZWplY3RlZFByb21pc2U7XG5leHBvcnRzLmZpeE9ic2VydmFibGVTdWJjbGFzcyA9IGZpeE9ic2VydmFibGVTdWJjbGFzcztcbmV4cG9ydHMuZ2V0RGVmYXVsdFZhbHVlcyA9IGdldERlZmF1bHRWYWx1ZXM7XG5leHBvcnRzLmdldERpcmVjdGl2ZU5hbWVzID0gZ2V0RGlyZWN0aXZlTmFtZXM7XG5leHBvcnRzLmdldEZyYWdtZW50RGVmaW5pdGlvbiA9IGdldEZyYWdtZW50RGVmaW5pdGlvbjtcbmV4cG9ydHMuZ2V0RnJhZ21lbnREZWZpbml0aW9ucyA9IGdldEZyYWdtZW50RGVmaW5pdGlvbnM7XG5leHBvcnRzLmdldEZyYWdtZW50RnJvbVNlbGVjdGlvbiA9IGdldEZyYWdtZW50RnJvbVNlbGVjdGlvbjtcbmV4cG9ydHMuZ2V0RnJhZ21lbnRRdWVyeURvY3VtZW50ID0gZ2V0RnJhZ21lbnRRdWVyeURvY3VtZW50O1xuZXhwb3J0cy5nZXRHcmFwaFFMRXJyb3JzRnJvbVJlc3VsdCA9IGdldEdyYXBoUUxFcnJvcnNGcm9tUmVzdWx0O1xuZXhwb3J0cy5nZXRJbmNsdXNpb25EaXJlY3RpdmVzID0gZ2V0SW5jbHVzaW9uRGlyZWN0aXZlcztcbmV4cG9ydHMuZ2V0TWFpbkRlZmluaXRpb24gPSBnZXRNYWluRGVmaW5pdGlvbjtcbmV4cG9ydHMuZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbiA9IGdldE9wZXJhdGlvbkRlZmluaXRpb247XG5leHBvcnRzLmdldE9wZXJhdGlvbk5hbWUgPSBnZXRPcGVyYXRpb25OYW1lO1xuZXhwb3J0cy5nZXRRdWVyeURlZmluaXRpb24gPSBnZXRRdWVyeURlZmluaXRpb247XG5leHBvcnRzLmdldFN0b3JlS2V5TmFtZSA9IGdldFN0b3JlS2V5TmFtZTtcbmV4cG9ydHMuZ2V0VHlwZW5hbWVGcm9tUmVzdWx0ID0gZ2V0VHlwZW5hbWVGcm9tUmVzdWx0O1xuZXhwb3J0cy5ncmFwaFFMUmVzdWx0SGFzRXJyb3IgPSBncmFwaFFMUmVzdWx0SGFzRXJyb3I7XG5leHBvcnRzLmhhc0FsbERpcmVjdGl2ZXMgPSBoYXNBbGxEaXJlY3RpdmVzO1xuZXhwb3J0cy5oYXNBbnlEaXJlY3RpdmVzID0gaGFzQW55RGlyZWN0aXZlcztcbmV4cG9ydHMuaGFzQ2xpZW50RXhwb3J0cyA9IGhhc0NsaWVudEV4cG9ydHM7XG5leHBvcnRzLmhhc0RpcmVjdGl2ZXMgPSBoYXNEaXJlY3RpdmVzO1xuZXhwb3J0cy5pc0Fwb2xsb1BheWxvYWRSZXN1bHQgPSBpc0Fwb2xsb1BheWxvYWRSZXN1bHQ7XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuZXhwb3J0cy5pc0RvY3VtZW50Tm9kZSA9IGlzRG9jdW1lbnROb2RlO1xuZXhwb3J0cy5pc0V4ZWN1dGlvblBhdGNoSW5jcmVtZW50YWxSZXN1bHQgPSBpc0V4ZWN1dGlvblBhdGNoSW5jcmVtZW50YWxSZXN1bHQ7XG5leHBvcnRzLmlzRXhlY3V0aW9uUGF0Y2hJbml0aWFsUmVzdWx0ID0gaXNFeGVjdXRpb25QYXRjaEluaXRpYWxSZXN1bHQ7XG5leHBvcnRzLmlzRXhlY3V0aW9uUGF0Y2hSZXN1bHQgPSBpc0V4ZWN1dGlvblBhdGNoUmVzdWx0O1xuZXhwb3J0cy5pc0ZpZWxkID0gaXNGaWVsZDtcbmV4cG9ydHMuaXNJbmxpbmVGcmFnbWVudCA9IGlzSW5saW5lRnJhZ21lbnQ7XG5leHBvcnRzLmlzTXV0YXRpb25PcGVyYXRpb24gPSBpc011dGF0aW9uT3BlcmF0aW9uO1xuZXhwb3J0cy5pc05vbkVtcHR5QXJyYXkgPSBpc05vbkVtcHR5QXJyYXk7XG5leHBvcnRzLmlzTm9uTnVsbE9iamVjdCA9IGlzTm9uTnVsbE9iamVjdDtcbmV4cG9ydHMuaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG5leHBvcnRzLmlzUXVlcnlPcGVyYXRpb24gPSBpc1F1ZXJ5T3BlcmF0aW9uO1xuZXhwb3J0cy5pc1JlZmVyZW5jZSA9IGlzUmVmZXJlbmNlO1xuZXhwb3J0cy5pc1N0YXRlZnVsUHJvbWlzZSA9IGlzU3RhdGVmdWxQcm9taXNlO1xuZXhwb3J0cy5pc1N1YnNjcmlwdGlvbk9wZXJhdGlvbiA9IGlzU3Vic2NyaXB0aW9uT3BlcmF0aW9uO1xuZXhwb3J0cy5pdGVyYXRlT2JzZXJ2ZXJzU2FmZWx5ID0gaXRlcmF0ZU9ic2VydmVyc1NhZmVseTtcbmV4cG9ydHMubWFrZVJlZmVyZW5jZSA9IG1ha2VSZWZlcmVuY2U7XG5leHBvcnRzLm1ha2VVbmlxdWVJZCA9IG1ha2VVbmlxdWVJZDtcbmV4cG9ydHMubWF5YmVEZWVwRnJlZXplID0gbWF5YmVEZWVwRnJlZXplO1xuZXhwb3J0cy5tZXJnZURlZXAgPSBtZXJnZURlZXA7XG5leHBvcnRzLm1lcmdlRGVlcEFycmF5ID0gbWVyZ2VEZWVwQXJyYXk7XG5leHBvcnRzLm1lcmdlSW5jcmVtZW50YWxEYXRhID0gbWVyZ2VJbmNyZW1lbnRhbERhdGE7XG5leHBvcnRzLm1lcmdlT3B0aW9ucyA9IG1lcmdlT3B0aW9ucztcbmV4cG9ydHMub2Zmc2V0TGltaXRQYWdpbmF0aW9uID0gb2Zmc2V0TGltaXRQYWdpbmF0aW9uO1xuZXhwb3J0cy5vbWl0RGVlcCA9IG9taXREZWVwO1xuZXhwb3J0cy5wcmludCA9IHByaW50O1xuZXhwb3J0cy5yZWxheVN0eWxlUGFnaW5hdGlvbiA9IHJlbGF5U3R5bGVQYWdpbmF0aW9uO1xuZXhwb3J0cy5yZW1vdmVBcmd1bWVudHNGcm9tRG9jdW1lbnQgPSByZW1vdmVBcmd1bWVudHNGcm9tRG9jdW1lbnQ7XG5leHBvcnRzLnJlbW92ZUNsaWVudFNldHNGcm9tRG9jdW1lbnQgPSByZW1vdmVDbGllbnRTZXRzRnJvbURvY3VtZW50O1xuZXhwb3J0cy5yZW1vdmVDb25uZWN0aW9uRGlyZWN0aXZlRnJvbURvY3VtZW50ID0gcmVtb3ZlQ29ubmVjdGlvbkRpcmVjdGl2ZUZyb21Eb2N1bWVudDtcbmV4cG9ydHMucmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudCA9IHJlbW92ZURpcmVjdGl2ZXNGcm9tRG9jdW1lbnQ7XG5leHBvcnRzLnJlbW92ZUZyYWdtZW50U3ByZWFkRnJvbURvY3VtZW50ID0gcmVtb3ZlRnJhZ21lbnRTcHJlYWRGcm9tRG9jdW1lbnQ7XG5leHBvcnRzLnJlc3VsdEtleU5hbWVGcm9tRmllbGQgPSByZXN1bHRLZXlOYW1lRnJvbUZpZWxkO1xuZXhwb3J0cy5zaG91bGRJbmNsdWRlID0gc2hvdWxkSW5jbHVkZTtcbmV4cG9ydHMuc3RvcmVLZXlOYW1lRnJvbUZpZWxkID0gc3RvcmVLZXlOYW1lRnJvbUZpZWxkO1xuZXhwb3J0cy5zdHJpbmdpZnlGb3JEaXNwbGF5ID0gc3RyaW5naWZ5Rm9yRGlzcGxheTtcbmV4cG9ydHMuc3RyaXBUeXBlbmFtZSA9IHN0cmlwVHlwZW5hbWU7XG5leHBvcnRzLnZhbHVlVG9PYmplY3RSZXByZXNlbnRhdGlvbiA9IHZhbHVlVG9PYmplY3RSZXByZXNlbnRhdGlvbjtcbmV4cG9ydHMud3JhcFByb21pc2VXaXRoU3RhdGUgPSB3cmFwUHJvbWlzZVdpdGhTdGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxpdGllcy5janMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/utilities.cjs\n");

/***/ })

};
;